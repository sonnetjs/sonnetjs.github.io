import { CElement } from '@sonnetjs/dom';

declare class CHTMLElement<T> extends CElement<T> {
    el?: HTMLElement;
    constructor(tag?: string);
    dataset(name: string, value: string): this;
    accessKey(value: string): this;
    autoFocus(value: boolean): this;
    contentEditable(value: 'true' | 'false' | 'plaintext-only'): this;
    dir(value: 'ltr' | 'rtl' | 'auto'): this;
    draggable(value: boolean): this;
    enterKeyHint(value: string): this;
    hidden(value: boolean): this;
    inert(value: boolean): this;
    innerText(value: string): this;
    lang(value: string): this;
    nonce(value: string): this;
    outerText(value: string): this;
    popover(value: string): this;
    spellcheck(value: boolean): this;
    style(value: CSSStyleDeclaration | Record<string, string>): this;
    tabIndex(value: number): this;
    title(value: string): this;
    translate(value: boolean): this;
}
declare function article(): CHTMLElement<HTMLElement>;
declare function aside(): CHTMLElement<HTMLElement>;
declare function footer(): CHTMLElement<HTMLElement>;
declare function header(): CHTMLElement<HTMLElement>;
declare function hgroup(): CHTMLElement<HTMLElement>;
declare function main(): CHTMLElement<HTMLElement>;
declare function nav(): CHTMLElement<HTMLElement>;
declare function section(): CHTMLElement<HTMLElement>;
declare function search(): CHTMLElement<HTMLElement>;
declare function dd(): CHTMLElement<HTMLElement>;
declare function figcaption(): CHTMLElement<HTMLElement>;
declare function figure(): CHTMLElement<HTMLElement>;
declare function abbr(): CHTMLElement<HTMLElement>;
declare function b(): CHTMLElement<HTMLElement>;
declare function bdi(): CHTMLElement<HTMLElement>;
declare function dfn(): CHTMLElement<HTMLElement>;
declare function kbd(): CHTMLElement<HTMLElement>;
declare function mark(): CHTMLElement<HTMLElement>;
declare function rp(): CHTMLElement<HTMLElement>;
declare function rt(): CHTMLElement<HTMLElement>;
declare function ruby(): CHTMLElement<HTMLElement>;
declare function s(): CHTMLElement<HTMLElement>;
declare function samp(): CHTMLElement<HTMLElement>;
declare function small(): CHTMLElement<HTMLElement>;
declare function strong(): CHTMLElement<HTMLElement>;
declare function sub(): CHTMLElement<HTMLElement>;
declare function sup(): CHTMLElement<HTMLElement>;
declare function u(): CHTMLElement<HTMLElement>;
declare function variable(): CHTMLElement<HTMLElement>;
declare function wbr(): CHTMLElement<HTMLElement>;
declare function noscript(): CHTMLElement<HTMLElement>;
declare function summary(): CHTMLElement<HTMLElement>;

declare class CHTMLAnchorElement extends CHTMLElement<HTMLAnchorElement> {
    el: HTMLAnchorElement;
    constructor();
    download(value: string): this;
    hash(value: string): this;
    host(value: string): this;
    hostname(value: string): this;
    href(value: string): this;
    hreflang(value: string): this;
    password(value: string): this;
    pathname(value: string): this;
    ping(value: string): this;
    port(value: string): this;
    protocol(value: string): this;
    referrerPolicy(value: string): this;
    rel(value: string): this;
    search(value: string): this;
    target(value: string): this;
    text(value: string): this;
    type(value: string): this;
    username(value: string): this;
}
declare function a(): CHTMLAnchorElement;

declare class CHTMLAreaElement extends CHTMLElement<HTMLAreaElement> {
    el: HTMLAreaElement;
    constructor();
    alt(value: string): this;
    coords(value: string): this;
    download(value: string): this;
    hash(value: string): this;
    host(value: string): this;
    hostname(value: string): this;
    href(value: string): this;
    password(value: string): this;
    pathname(value: string): this;
    ping(value: string): this;
    port(value: string): this;
    protocol(value: string): this;
    referrerPolicy(value: string): this;
    rel(value: string): this;
    search(value: string): this;
    shape(value: string): this;
    target(value: string): this;
    username(value: string): this;
}
declare function area(): CHTMLAreaElement;

declare class CHTMLMediaElement<T> extends CHTMLElement<T> {
    el: HTMLMediaElement;
    constructor();
    autoplay(value: boolean): this;
    controls(value: boolean): this;
    crossOrigin(value: string): this;
    currentTime(value: number): this;
    defaultMuted(value: boolean): this;
    defaultPlaybackRate(value: number): this;
    disableRemotePlayback(value: boolean): this;
    loop(value: boolean): this;
    muted(value: boolean): this;
    playbackRate(value: number): this;
    preservesPitch(value: boolean): this;
    src(value: string): this;
    srcObject(value: MediaStream): this;
    volume(value: number): this;
}

declare class CHTMLAudioElement extends CHTMLMediaElement<HTMLAudioElement> {
    el: HTMLAudioElement;
    constructor();
}
declare function audio(): CHTMLAudioElement;

declare class CHTMLBaseElement extends CHTMLElement<HTMLBaseElement> {
    el: HTMLBaseElement;
    constructor();
    href(value: string): this;
    target(value: string): this;
}
declare function base(): CHTMLBaseElement;

declare class CHTMLBodyElement extends CHTMLElement<HTMLBodyElement> {
    el: HTMLBodyElement;
    constructor();
}
declare function body(): CHTMLBodyElement;

declare class CHTMLBRElement extends CHTMLElement<HTMLBRElement> {
    el: HTMLBRElement;
    constructor();
}
declare function br(): CHTMLBRElement;

declare class CHTMLButtonElement extends CHTMLElement<HTMLButtonElement> {
    el: HTMLButtonElement;
    constructor();
    disabled(value: boolean): this;
    formAction(value: string): this;
    formEncType(value: string): this;
    formMethod(value: string): this;
    formNoValidate(value: boolean): this;
    formTarget(value: string): this;
    name(value: string): this;
    popoverTargetAction(value: string): this;
    type(value: 'submit' | 'reset' | 'button'): this;
    value(value: string): this;
}
declare function button(): CHTMLButtonElement;

declare class CHTMLCanvasElement extends CHTMLElement<HTMLCanvasElement> {
    el: HTMLCanvasElement;
    constructor();
    height(value: number): this;
    width(value: number): this;
}
declare function canvas(): CHTMLCanvasElement;

declare class CHTMLDataElement extends CHTMLElement<HTMLDataElement> {
    el: HTMLDataElement;
    constructor();
    value(value: string): this;
}
declare function data(): CHTMLDataElement;

declare class CHTMLDataListElement extends CHTMLElement<HTMLDataListElement> {
    el: HTMLDataListElement;
    constructor();
}
declare function datalist(): CHTMLDataListElement;

declare class CHTMLDetailsElement extends CHTMLElement<HTMLDetailsElement> {
    el: HTMLDetailsElement;
    constructor();
    open(value?: boolean): this;
}
declare function details(): CHTMLDetailsElement;

declare class CHTMLDialogElement extends CHTMLElement<HTMLDialogElement> {
    el: HTMLDialogElement;
    constructor();
    open(value?: boolean): this;
    returnValue(value: string): this;
}
declare function dialog(): CHTMLDialogElement;

declare class CHTMLDivElement extends CHTMLElement<HTMLDivElement> {
    el: HTMLDivElement;
    constructor();
}
declare function div(): CHTMLDivElement;

declare class CHTMLDListElement extends CHTMLElement<HTMLDListElement> {
    el: HTMLDListElement;
    constructor();
}
declare function dl(): CHTMLDListElement;

declare class CHTMLEmbedElement extends CHTMLElement<HTMLEmbedElement> {
    el: HTMLEmbedElement;
    constructor();
    height(value: string): this;
    src(value: string): this;
    type(value: string): this;
    width(value: string): this;
}
declare function embed(): CHTMLEmbedElement;

declare class CHTMLFieldSetElement extends CHTMLElement<HTMLFieldSetElement> {
    el: HTMLFieldSetElement;
    constructor();
    disabled(value: boolean): this;
    name(value: string): this;
}
declare function fieldset(): CHTMLFieldSetElement;

declare class CHTMLFormElement extends CHTMLElement<HTMLFormElement> {
    el: HTMLFormElement;
    constructor();
    name(value: string): this;
    action(value: string): this;
    method(value: string): this;
    target(value: string): this;
    enctype(value: string): this;
    encoding(value: string): this;
    acceptCharset(value: string): this;
    autocomplete(value: AutoFillBase): this;
    noValidate(value: boolean): this;
}
declare function form(): CHTMLFormElement;

declare class CHTMLHeadElement extends CHTMLElement<HTMLHeadElement> {
    el: HTMLHeadElement;
    constructor();
}
declare function head(): CHTMLHeadElement;

declare class CHTMLHeadingElement extends CHTMLElement<HTMLHeadingElement> {
    el: HTMLHeadingElement;
    constructor(level: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6');
}
declare function h1(): CHTMLHeadingElement;
declare function h2(): CHTMLHeadingElement;
declare function h3(): CHTMLHeadingElement;
declare function h4(): CHTMLHeadingElement;
declare function h5(): CHTMLHeadingElement;
declare function h6(): CHTMLHeadingElement;

declare class CHTMLHRElement extends CHTMLElement<HTMLHRElement> {
    el: HTMLHRElement;
    constructor();
}
declare function hr(): CHTMLHRElement;

declare class CHTMLHtmlElement extends CHTMLElement<HTMLHtmlElement> {
    el: HTMLHtmlElement;
    constructor();
    version(version: string): this;
}
declare function html(): CHTMLHtmlElement;

declare class CHTMLIFrameElement extends CHTMLElement<HTMLIFrameElement> {
    el: HTMLIFrameElement;
    constructor();
    allow(value: string): this;
    allowfullscreen(value: boolean): this;
    height(value: string): this;
    loading(value: string): this;
    name(value: string): this;
    referrerpolicy(value: 'no-referrer' | 'no-referrer-when-downgrade' | 'origin' | 'origin-when-cross-origin' | 'same-origin' | 'strict-origin' | 'strict-origin-when-cross-origin' | 'unsafe-url'): this;
    src(value: string): this;
    srcdoc(value: string): this;
    width(value: string): this;
}
declare function iframe(): CHTMLIFrameElement;

declare class CHTMLImageElement extends CHTMLElement<HTMLImageElement> {
    el: HTMLImageElement;
    constructor();
    alt(alt: string): this;
    crossOrigin(value: string): this;
    decoding(value: 'async' | 'sync' | 'auto'): this;
    height(value: number): this;
    isMap(value: boolean): this;
    loading(value: 'eager' | 'lazy'): this;
    referrerPolicy(value: string): this;
    sizes(value: string): this;
    src(value: string): this;
    srcset(value: string): this;
    useMap(value: string): this;
    width(value: number): this;
}
declare function img(): CHTMLImageElement;

declare class CHTMLInputElement extends CHTMLElement<HTMLInputElement> {
    el: HTMLInputElement;
    constructor();
    defaultValue(value: string): this;
    dirName(value: string): this;
    multiple(value: boolean): this;
    name(value: string): this;
    popoverTargetAction(value: string): this;
    popoverTargetElement(value: Element): this;
    step(value: string): this;
    type(value: string): this;
    value(value: string): this;
    valueAsDate(value: Date): this;
    valueAsNumber(value: number): this;
    formAction(value: string): this;
    formEnctype(value: string): this;
    formMethod(value: string): this;
    formNoValidate(value: boolean): this;
    formTarget(value: string): this;
    disabled(value: boolean): this;
    required(value: boolean): this;
    checked(value: boolean): this;
    defaultChecked(value: boolean): this;
    indeterminate(value: boolean): this;
    alt(value: string): this;
    height(value: number): this;
    src(value: string): this;
    width(value: number): this;
    accept(value: string): this;
    files(value: FileList): this;
    webkitdirectory(value: boolean): this;
    autocomplete(value: AutoFill): this;
    capture(value: string): this;
    max(value: string): this;
    maxLength(value: number): this;
    min(value: string): this;
    minLength(value: number): this;
    pattern(value: string): this;
    placeholder(value: string): this;
    readOnly(value: boolean): this;
    selectionDirection(value: 'forward' | 'backward' | 'none'): this;
    selectionEnd(value: number): this;
    selectionStart(value: number): this;
    size(value: number): this;
}
declare function input(): CHTMLInputElement;

declare class CHTMLLabelElement extends CHTMLElement<HTMLLabelElement> {
    el: HTMLLabelElement;
    constructor();
    htmlFor(value: string): this;
}
declare function label(): CHTMLLabelElement;

declare class CHTMLLegendElement extends CHTMLElement<HTMLLegendElement> {
    el: HTMLLegendElement;
    constructor();
}
declare function legend(): CHTMLLegendElement;

declare class CHTMLLIElement extends CHTMLElement<HTMLLIElement> {
    el: HTMLLIElement;
    constructor();
    value(value: string): this;
}
declare function li(): CHTMLLIElement;

declare class CHTMLLinkElement extends CHTMLElement<HTMLLinkElement> {
    el: HTMLLinkElement;
    constructor();
    as(value: string): this;
    crossOrigin(value: string): this;
    disabled(value: boolean): this;
    href(value: string): this;
    hreflang(value: string): this;
    media(value: string): this;
    referrerPolicy(value: string): this;
    rel(value: string): this;
    type(value: string): this;
}
declare function link(): CHTMLLinkElement;

declare class CHTMLMapElement extends CHTMLElement<HTMLMapElement> {
    el: HTMLMapElement;
    constructor();
    name(value: string): this;
}
declare function map(): CHTMLMapElement;

declare class CHTMLMenuElement extends CHTMLElement<HTMLMenuElement> {
    el: HTMLMenuElement;
    constructor();
}
declare function menu(): CHTMLMenuElement;

declare class CHTMLMetaElement extends CHTMLElement<HTMLMetaElement> {
    el: HTMLMetaElement;
    constructor();
    content(value: string): this;
    httpEquiv(value: string): this;
    media(value: string): this;
    name(value: string): this;
    scheme(value: string): this;
}
declare function meta(): CHTMLMetaElement;

declare class CHTMLMeterElement extends CHTMLElement<HTMLMeterElement> {
    el: HTMLMeterElement;
    constructor();
    high(value: number): this;
    low(value: number): this;
    max(value: number): this;
    min(value: number): this;
    optimum(value: number): this;
    value(value: number): this;
}
declare function meter(): CHTMLMeterElement;

declare class CHTMLModElement extends CHTMLElement<HTMLModElement> {
    el: HTMLModElement;
    constructor(tag: 'del' | 'ins');
    cite(value: string): this;
    dateTime(value: string): this;
}
declare function del(): CHTMLModElement;
declare function ins(): CHTMLModElement;

declare class CHTMLObjectElement extends CHTMLElement<HTMLObjectElement> {
    el: HTMLObjectElement;
    constructor();
    data(value: string): this;
    height(value: string): this;
    name(value: string): this;
    type(value: string): this;
    width(value: string): this;
}
declare function object(): CHTMLObjectElement;

declare class CHTMLOListElement extends CHTMLElement<HTMLOListElement> {
    el: HTMLOListElement;
    constructor();
    reversed(value: boolean): this;
    start(value: number): this;
    type(value: '1' | 'a' | 'A' | 'i' | 'I'): this;
}
declare function ol(): CHTMLOListElement;

declare class CHTMLOptGroupElement extends CHTMLElement<HTMLOptGroupElement> {
    el: HTMLOptGroupElement;
    constructor();
    disabled(value: boolean): this;
    label(value: string): this;
}
declare function optgroup(): CHTMLOptGroupElement;

declare class CHTMLOptionElement extends CHTMLElement<HTMLOptionElement> {
    el: HTMLOptionElement;
    constructor();
    disabled(value: boolean): this;
    defaultSelected(value: boolean): this;
    label(value: string): this;
    selected(value: boolean): this;
    text(value: string): this;
    value(value: string): this;
}
declare function option(): CHTMLOptionElement;

declare class CHTMLOutputElement extends CHTMLElement<HTMLOutputElement> {
    el: HTMLOutputElement;
    constructor();
    defaultValue(value: string): this;
    name(value: string): this;
    value(value: string): this;
}
declare function output(): CHTMLOutputElement;

declare class CHTMLParagraphElement extends CHTMLElement<HTMLParagraphElement> {
    el: HTMLParagraphElement;
    constructor();
}
declare function p(): CHTMLParagraphElement;

declare class CHTMLPictureElement extends CHTMLElement<HTMLPictureElement> {
    el: HTMLPictureElement;
    constructor();
}
declare function picture(): CHTMLPictureElement;

declare class CHTMLPreElement extends CHTMLElement<HTMLPreElement> {
    el: HTMLPreElement;
    constructor();
}
declare function pre(): CHTMLPreElement;

declare class CHTMLProgressElement extends CHTMLElement<HTMLProgressElement> {
    el: HTMLProgressElement;
    constructor();
    max(value: number): this;
    value(value: number): this;
}
declare function progress(): CHTMLProgressElement;

declare class CHTMLQuoteElement extends CHTMLElement<HTMLQuoteElement> {
    el: HTMLQuoteElement;
    constructor(tag: 'blockquote' | 'q');
    cite(cite: string): this;
}
declare function blockquote(): CHTMLQuoteElement;
declare function q(): CHTMLQuoteElement;

declare class CHTMLScriptElement extends CHTMLElement<HTMLScriptElement> {
    el: HTMLScriptElement;
    constructor();
    async(value: boolean): this;
    defer(value: boolean): this;
    type(value: string): this;
    src(value: string): this;
    crossOrigin(value: string): this;
    text(value: string): this;
    noModule(value: boolean): this;
    referrerPolicy(value: string): this;
}
declare function script(): CHTMLScriptElement;

declare class CHTMLSelectElement extends CHTMLElement<HTMLSelectElement> {
    el: HTMLSelectElement;
    constructor();
    disabled(value: boolean): this;
    length(value: number): this;
    multiple(value: boolean): this;
    name(value: string): this;
    required(value: boolean): this;
    selectedIndex(value: number): this;
    size(value: number): this;
    value(value: string): this;
}
declare function select(): CHTMLSelectElement;

declare class CHTMLSlotElement extends CHTMLElement<HTMLSlotElement> {
    el: HTMLSlotElement;
    constructor();
    name(value: string): this;
}
declare function slot(): CHTMLSlotElement;

declare class CHTMLSourceElement extends CHTMLElement<HTMLSourceElement> {
    el: HTMLSourceElement;
    constructor();
    height(value: number): this;
    media(value: string): this;
    sizes(value: string): this;
    src(value: string): this;
    srcset(value: string): this;
    type(value: string): this;
    width(value: number): this;
}
declare function source(): CHTMLSourceElement;

declare class CHTMLStyleElement extends CHTMLElement<HTMLStyleElement> {
    el: HTMLStyleElement;
    constructor();
    media(value: string): this;
    disabled(value: boolean): this;
}
declare function style(): CHTMLStyleElement;

declare class CHTMLSpanElement extends CHTMLElement<HTMLSpanElement> {
    el: HTMLSpanElement;
    constructor(tag?: string);
}
declare function span(): CHTMLSpanElement;
declare function address(): CHTMLSpanElement;
declare function dt(): CHTMLSpanElement;
declare function bdo(): CHTMLSpanElement;
declare function cite(): CHTMLSpanElement;
declare function code(): CHTMLSpanElement;
declare function em(): CHTMLSpanElement;
declare function i(): CHTMLSpanElement;

declare class CHTMLTableCaptionElement$1 extends CHTMLElement<HTMLTableCaptionElement> {
    el: HTMLTableCaptionElement;
    constructor();
}
declare function caption(): CHTMLTableCaptionElement$1;

declare class CHTMLTableCellElement extends CHTMLElement<HTMLTableCellElement> {
    el: HTMLTableCellElement;
    constructor(tag: 'th' | 'td');
    abbr(value: string): this;
    colspan(value: number): this;
    rowspan(value: number): this;
    scope(value: string): this;
}
declare function td(): CHTMLTableCellElement;
declare function th(): CHTMLTableCellElement;

declare class CHTMLTableColElement extends CHTMLElement<HTMLTableColElement> {
    el: HTMLTableColElement;
    constructor(tag: 'col' | 'colgroup');
    span(value: number): this;
}
declare function col(): CHTMLTableColElement;
declare function colgroup(): CHTMLTableColElement;

declare class CHTMLTableElement extends CHTMLElement<HTMLTableElement> {
    el: HTMLTableElement;
    constructor();
}
declare function table(): CHTMLTableElement;

declare class CHTMLTableRowElement extends CHTMLElement<HTMLTableRowElement> {
    el: HTMLTableRowElement;
    constructor();
}
declare function tr(): CHTMLTableRowElement;

declare class CHTMLTableCaptionElement extends CHTMLElement<HTMLTableCaptionElement> {
    el: HTMLTableCaptionElement;
    constructor(tag: 'thead' | 'tbody' | 'tfoot');
}
declare function thead(): CHTMLTableCaptionElement;
declare function tbody(): CHTMLTableCaptionElement;
declare function tfoot(): CHTMLTableCaptionElement;

declare class CHTMLTemplateElement extends CHTMLElement<HTMLTemplateElement> {
    el: HTMLTemplateElement;
    constructor();
}
declare function template(): CHTMLTemplateElement;

declare class CHTMLTextAreaElement extends CHTMLElement<HTMLTextAreaElement> {
    el: HTMLTextAreaElement;
    constructor();
    autocapitalize(value: string): this;
    autocomplete(value: AutoFill): this;
    cols(value: number): this;
    defaultValue(value: string): this;
    dirName(value: string): this;
    disabled(value: boolean): this;
    maxLength(value: number): this;
    minLength(value: number): this;
    name(value: string): this;
    placeholder(value: string): this;
    readOnly(value: boolean): this;
    required(value: boolean): this;
    rows(value: number): this;
    selectionDirection(value: 'forward' | 'backward' | 'none'): this;
    selectionEnd(value: number): this;
    selectionStart(value: number): this;
    textLength(): number;
    value(value: string): this;
    wrap(value: 'hard' | 'soft' | 'off'): this;
}
declare function textarea(): CHTMLTextAreaElement;

declare class CHTMLTimeElement extends CHTMLElement<HTMLTimeElement> {
    el: HTMLTimeElement;
    constructor();
}
declare function time(): CHTMLTimeElement;

declare class CHTMLTitleElement extends CHTMLElement<HTMLTitleElement> {
    el: HTMLTitleElement;
    constructor();
    text(text: string): this;
}
declare function title(): CHTMLTitleElement;

declare class CHTMLTrackElement extends CHTMLElement<HTMLTrackElement> {
    el: HTMLTrackElement;
    constructor();
    kind(value: string): this;
    src(value: string): this;
    srclang(value: string): this;
    label(value: string): this;
    default(value: boolean): this;
}
declare function track(): CHTMLTrackElement;

declare class CHTMLUListElement extends CHTMLElement<HTMLUListElement> {
    el: HTMLUListElement;
    constructor();
}
declare function ul(): CHTMLUListElement;

declare class CHTMLVideoElement extends CHTMLMediaElement<HTMLVideoElement> {
    el: HTMLVideoElement;
    constructor();
    disablePictureInPicture(value: boolean): this;
    height(value: number): this;
    poster(value: string): this;
    playsInline(value: boolean): this;
    width(value: number): this;
}
declare function video(): CHTMLVideoElement;

export { a, abbr, address, area, article, aside, audio, b, base, bdi, bdo, blockquote, body, br, button, canvas, caption, cite, code, col, colgroup, data, datalist, dd, del, details, dfn, dialog, div, dl, dt, em, embed, fieldset, figcaption, figure, footer, form, h1, h2, h3, h4, h5, h6, head, header, hgroup, hr, html, i, iframe, img, input, ins, kbd, label, legend, li, link, main, map, mark, menu, meta, meter, nav, noscript, object, ol, optgroup, option, output, p, picture, pre, progress, q, rp, rt, ruby, s, samp, script, search, section, select, slot, small, source, span, strong, style, sub, summary, sup, table, tbody, td, template, textarea, tfoot, th, thead, time, title, tr, track, u, ul, variable, video, wbr };
