"use strict";(self.webpackChunksonnet_docs=self.webpackChunksonnet_docs||[]).push([[8827],{5888:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var s=t(4848),r=t(8453);const o={sidebar_position:3},i="SSR",c={id:"core/ssr",title:"SSR",description:"Server-side rendering (SSR) is a feature that allows you to render your application on the server and send the HTML to the client. This can be useful for SEO, faster initial page loads, and more. Sonnet JS utilizes vite core APIs to provide SSR support.",source:"@site/docs/core/ssr.md",sourceDirName:"core",slug:"/core/ssr",permalink:"/docs/core/ssr",draft:!1,unlisted:!1,editUrl:"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/docs/core/ssr.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docSidebar",previous:{title:"Application",permalink:"/docs/core/application"},next:{title:"Plugin",permalink:"/docs/core/plugin"}},a={},p=[{value:"Usage",id:"usage",level:2},{value:"Boilerplate code",id:"boilerplate-code",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"ssr",children:"SSR"}),"\n",(0,s.jsx)(n.p,{children:"Server-side rendering (SSR) is a feature that allows you to render your application on the server and send the HTML to the client. This can be useful for SEO, faster initial page loads, and more. Sonnet JS utilizes vite core APIs to provide SSR support."}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(n.p,{children:["To get started with SSR in Sonnet JS, you need to create a new project using the ",(0,s.jsx)(n.code,{children:"create-sonnet-app"})," command. This command will scaffold a new project with SSR support."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npx create-sonnet-app\n"})}),"\n",(0,s.jsx)(n.p,{children:"You will be prompted to enter the project name, select a template, and choose whether to add TypeScript to the project. Here is an example of the prompts:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"Sonnet JS: A frontend framework\n\n\u2714 Project name: \u2026 sonnet-project\n\u2714 Select a template \u203a SSR\n\u2714 Add TypeScript? \u2026 No / Yes\n\n  cd sonnet-project\n  npm install\n  npm run dev\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This will create a new Sonnet JS project with SSR support in a directory called ",(0,s.jsx)(n.code,{children:"sonnet-project"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"boilerplate-code",children:"Boilerplate code"}),"\n",(0,s.jsx)(n.p,{children:"Here is the boilerplate code for a simple Sonnet JS counter application with SSR support. Let's try to understand what each part of the code does:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"title=server.js",children:"import fs from 'node:fs/promises';\nimport express from 'express';\n\n// Constants\nconst isProduction = process.env.NODE_ENV === 'production';\nconst port = process.env.PORT || 5174;\nconst base = process.env.BASE || '/';\n\n// Cached production assets\nconst templateHtml = isProduction\n  ? await fs.readFile('./dist/client/index.html', 'utf-8')\n  : '';\nconst ssrManifest = isProduction\n  ? await fs.readFile('./dist/client/.vite/ssr-manifest.json', 'utf-8')\n  : undefined;\n\n// Create http server\nconst app = express();\n\n// Add Vite or respective production middlewares\nlet vite;\nif (!isProduction) {\n  const { createServer } = await import('vite');\n  vite = await createServer({\n    server: { middlewareMode: true, watch: { usePolling: true } },\n    appType: 'custom',\n    base,\n  });\n  app.use(vite.middlewares);\n} else {\n  const compression = (await import('compression')).default;\n  const sirv = (await import('sirv')).default;\n  app.use(compression());\n  app.use(base, sirv('./dist/client', { extensions: [] }));\n}\n\n// Serve HTML\napp.use('*', async (req, res) => {\n  try {\n    const url = req.originalUrl.replace(base, '');\n\n    let template;\n    let render;\n    if (!isProduction) {\n      // Always read fresh template in development\n      template = await fs.readFile('./index.html', 'utf-8');\n      template = await vite.transformIndexHtml(url, template);\n      render = (await vite.ssrLoadModule('/src/entry-server.ts')).render;\n    } else {\n      template = templateHtml;\n      render = (await import('./dist/server/entry-server.js')).render;\n    }\n\n    const rendered = await render(url, ssrManifest);\n\n    const html = template\n      .replace(`\x3c!--app-head--\x3e`, rendered.head ?? '')\n      .replace(`\x3c!--app-html--\x3e`, rendered.html ?? '');\n\n    res.status(200).set({ 'Content-Type': 'text/html' }).send(html);\n  } catch (e) {\n    vite?.ssrFixStacktrace(e);\n    console.log(e.stack);\n    res.status(500).end(e.stack);\n  }\n});\n\napp.get('/', (req, res) => {\n  res.redirect(301, '/home');\n});\n\n// Start http server\napp.listen(port, () => {\n  console.log(`Server started at http://localhost:${port}`);\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"This code sets up an express server that serves the HTML for the application. It uses Vite in development mode and serves the production assets in production mode."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"title=src/entry-server.ts",children:"import App from './App';\n\nexport async function render() {\n  const html = await App().get();\n  return { html };\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This code is the entry point for the server-side rendering. It imports the ",(0,s.jsx)(n.code,{children:"App"})," component and calls the ",(0,s.jsx)(n.code,{children:"get"})," method to get the HTML for the component."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"title=src/entry-client.ts",children:"import './style.css';\nimport { createApp } from '@sonnetjs/core';\nimport App from './App';\n\nconst app = createApp();\napp.root(App);\napp.ssr();\napp.mount('#app');\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This code is the entry point for the client-side rendering. It imports the ",(0,s.jsx)(n.code,{children:"App"})," component and mounts it to the DOM."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"title=src/App.ts",children:"import { SonnetComponent, $component } from '@sonnetjs/core';\nimport Counter from './Counter';\n\nclass App extends SonnetComponent {\n  get(){\n    return /*html*/`\n      <div>\n        ${Counter().get()}\n      </div>\n    `;\n  }\n}\n\nexport default $component(App);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This code is the main component of the application. It imports the ",(0,s.jsx)(n.code,{children:"Counter"})," component and renders it inside a ",(0,s.jsx)(n.code,{children:"div"})," element."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",metastring:"title=src/Counter.ts",children:'import { SonnetComponent, $component } from \'@sonnetjs/core\';\n\nclass Counter extends SonnetComponent {\n  counter = 0;\n\n  public script() {\n    const counterButton = document.getElementById(\n      \'counter\',\n    ) as HTMLButtonElement;\n    counterButton.addEventListener(\'click\', () => {\n      this.counter += 1;\n      counterButton.innerText = `count is ${this.counter}`;\n    });\n  }\n\n  public get() {\n    return /*html*/ `\n    <div>\n      <a href="https://vitejs.dev" target="_blank">\n        <img src="https://vitejs.dev/logo.svg" class="logo" alt="Vite Logo" />\n      </a>\n      <h1>Vite</h1>\n      <div class="card">\n        <button id="counter" type="button" class="btn">count is ${this.counter}</button>\n      </div>\n      <p class="read-the-docs">Edit src/main.ts and save to test HMR.</p>\n    </div>\n    `;\n  }\n}\n\nexport default $component(Counter);\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This code is the ",(0,s.jsx)(n.code,{children:"Counter"})," component of the application. It has a counter that increments when a button is clicked."]}),"\n",(0,s.jsx)(n.admonition,{title:"Note",type:"danger",children:(0,s.jsxs)(n.p,{children:["The get method is used to render the HTML at server. So, avoid using browser-specific APIs like ",(0,s.jsx)(n.code,{children:"document"})," in this method."]})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(6540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);