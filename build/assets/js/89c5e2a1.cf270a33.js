"use strict";(self.webpackChunksonnet_docs=self.webpackChunksonnet_docs||[]).push([[6173],{8152:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>u});var a=e(4848),i=e(8453);const s={slug:"handling-forms-in-js",title:"Handling Forms in JS",authors:{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4"},tags:["javascript"]},o="Handling Forms in JS",r={permalink:"/blog/handling-forms-in-js",editUrl:"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/26-handling-forms-in-js.md",source:"@site/blog/javascript/26-handling-forms-in-js.md",title:"Handling Forms in JS",description:"Handling forms is an essential task in web development, and JavaScript provides a powerful and flexible way to handle forms. In this article, we\u2019ll discuss how to handle forms in JavaScript.",date:"2024-05-15T13:15:30.924Z",tags:[{label:"javascript",permalink:"/blog/tags/javascript"}],readingTime:5.56,hasTruncateMarker:!0,authors:[{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4",imageURL:"https://avatars.githubusercontent.com/u/58030954?v=4"}],frontMatter:{slug:"handling-forms-in-js",title:"Handling Forms in JS",authors:{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4",imageURL:"https://avatars.githubusercontent.com/u/58030954?v=4"},tags:["javascript"]},unlisted:!1,prevItem:{title:"Working with APIs in JS",permalink:"/blog/working-with-apis-in-js"},nextItem:{title:"Advance Concepts of Events in JS: Bubbling, Capturing",permalink:"/blog/advance-concepts-of-events-in-js-bubbling-capturing"}},l={authorsImageUrls:[void 0]},u=[];function c(t){const n={p:"p",...(0,i.R)(),...t.components};return(0,a.jsx)(n.p,{children:"Handling forms is an essential task in web development, and JavaScript provides a powerful and flexible way to handle forms. In this article, we\u2019ll discuss how to handle forms in JavaScript."})}function h(t={}){const{wrapper:n}={...(0,i.R)(),...t.components};return n?(0,a.jsx)(n,{...t,children:(0,a.jsx)(c,{...t})}):c(t)}},8453:(t,n,e)=>{e.d(n,{R:()=>o,x:()=>r});var a=e(6540);const i={},s=a.createContext(i);function o(t){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function r(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:o(t.components),a.createElement(s.Provider,{value:n},t.children)}}}]);