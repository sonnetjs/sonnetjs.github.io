"use strict";(self.webpackChunksonnet_docs=self.webpackChunksonnet_docs||[]).push([[5334],{6246:(t,a,e)=>{e.r(a),e.d(a,{assets:()=>u,contentTitle:()=>o,default:()=>g,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var n=e(4848),i=e(8453);const s={slug:"class-in-js",title:"Class in JS",authors:{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4"},tags:["javascript"]},o="Class in JS",r={permalink:"/blog/class-in-js",editUrl:"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/14-class-in-js.md",source:"@site/blog/javascript/14-class-in-js.md",title:"Class in JS",description:"Object-Oriented Programming (OOP) is a popular paradigm used in modern programming languages to organize code and data into reusable and modular components. JavaScript, although originally designed as a scripting language, has gained significant support for OOP. In this blog, we\u2019ll discuss the principles of OOP in JavaScript and how to use them effectively.",date:"2024-05-15T13:15:30.695Z",tags:[{label:"javascript",permalink:"/blog/tags/javascript"}],readingTime:7.005,hasTruncateMarker:!0,authors:[{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4",imageURL:"https://avatars.githubusercontent.com/u/58030954?v=4"}],frontMatter:{slug:"class-in-js",title:"Class in JS",authors:{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4",imageURL:"https://avatars.githubusercontent.com/u/58030954?v=4"},tags:["javascript"]},unlisted:!1,prevItem:{title:"Advanced Datatypes in JS",permalink:"/blog/advanced-datatypes-in-js"},nextItem:{title:"Function Binding in JS",permalink:"/blog/function-binding-in-js"}},u={authorsImageUrls:[void 0]},c=[];function l(t){const a={p:"p",...(0,i.R)(),...t.components};return(0,n.jsx)(a.p,{children:"Object-Oriented Programming (OOP) is a popular paradigm used in modern programming languages to organize code and data into reusable and modular components. JavaScript, although originally designed as a scripting language, has gained significant support for OOP. In this blog, we\u2019ll discuss the principles of OOP in JavaScript and how to use them effectively."})}function g(t={}){const{wrapper:a}={...(0,i.R)(),...t.components};return a?(0,n.jsx)(a,{...t,children:(0,n.jsx)(l,{...t})}):l(t)}},8453:(t,a,e)=>{e.d(a,{R:()=>o,x:()=>r});var n=e(6540);const i={},s=n.createContext(i);function o(t){const a=n.useContext(s);return n.useMemo((function(){return"function"==typeof t?t(a):{...a,...t}}),[a,t])}function r(t){let a;return a=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:o(t.components),n.createElement(s.Provider,{value:a},t.children)}}}]);