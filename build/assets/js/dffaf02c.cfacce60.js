"use strict";(self.webpackChunksonnet_docs=self.webpackChunksonnet_docs||[]).push([[3589],{1922:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=s(4848),t=s(8453);const o={slug:"class-in-js",title:"Class in JS",authors:{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4"},tags:["javascript"]},r="Class in JS",i={permalink:"/blog/class-in-js",editUrl:"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/14-class-in-js.md",source:"@site/blog/javascript/14-class-in-js.md",title:"Class in JS",description:"Object-Oriented Programming (OOP) is a popular paradigm used in modern programming languages to organize code and data into reusable and modular components. JavaScript, although originally designed as a scripting language, has gained significant support for OOP. In this blog, we\u2019ll discuss the principles of OOP in JavaScript and how to use them effectively.",date:"2024-05-15T13:15:30.695Z",tags:[{label:"javascript",permalink:"/blog/tags/javascript"}],readingTime:7.005,hasTruncateMarker:!0,authors:[{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4",imageURL:"https://avatars.githubusercontent.com/u/58030954?v=4"}],frontMatter:{slug:"class-in-js",title:"Class in JS",authors:{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4",imageURL:"https://avatars.githubusercontent.com/u/58030954?v=4"},tags:["javascript"]},unlisted:!1,prevItem:{title:"Advanced Datatypes in JS",permalink:"/blog/advanced-datatypes-in-js"},nextItem:{title:"Function Binding in JS",permalink:"/blog/function-binding-in-js"}},c={authorsImageUrls:[void 0]},l=[];function d(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Object-Oriented Programming (OOP) is a popular paradigm used in modern programming languages to organize code and data into reusable and modular components. JavaScript, although originally designed as a scripting language, has gained significant support for OOP. In this blog, we\u2019ll discuss the principles of OOP in JavaScript and how to use them effectively."}),"\n",(0,a.jsx)(n.h1,{id:"defining-a-class",children:"Defining a Class"}),"\n",(0,a.jsx)(n.p,{children:"The syntax for defining a class in JavaScript is as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"class MyClass {  \n  constructor(arg1, arg2) {  \n    this.property1 = arg1;  \n    this.property2 = arg2;  \n  }  \nmethod1() {  \n    // Method code here  \n  }  \n  method2() {  \n    // Method code here  \n  }  \n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Once you have defined a class, you can create an instance of the class using the ",(0,a.jsx)(n.code,{children:"**new**"})," keyword:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const myInstance = new MyClass('value1', 'value2');\n"})}),"\n",(0,a.jsx)(n.h1,{id:"properties",children:"Properties"}),"\n",(0,a.jsxs)(n.p,{children:["In JavaScript classes, properties are defined in the constructor method and are assigned to the ",(0,a.jsx)(n.code,{children:"**this**"})," keyword, which refers to the instance of the class. Here's an example of defining properties inside a class:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"class Person {  \n  constructor(name, age) {  \n    this.name = name;  \n    this.age = age;  \n  }  \nget occupation() {  \n    return 'Software Developer';  \n  }  \n}  \nconst john = new Person('John', 30);  \nconsole.log(john.occupation); // 'Software Developer'\n"})}),"\n",(0,a.jsx)(n.h1,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(n.p,{children:"In JavaScript classes, methods are functions that are defined inside the class body and are available on instances of the class. Here\u2019s an example of defining methods inside a class:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"class Person {  \n  constructor(name, age) {  \n    this.name = name;  \n    this.age = age;  \n  }  \nsayHello() {  \n    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);  \n  }  \n}  \nconst john = new Person('John', 30);  \njohn.sayHello(); // \"Hello, my name is John and I am 30 years old.\"\n"})}),"\n",(0,a.jsx)(n.h1,{id:"static-methods-and-properties",children:"Static Methods and Properties"}),"\n",(0,a.jsxs)(n.p,{children:["In JavaScript classes, static methods and properties are defined using the ",(0,a.jsx)(n.code,{children:"**static**"})," keyword. Static methods and properties are associated with the class itself, rather than with instances of the class. Here's an example of defining static methods and properties in a class:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"class Person {  \n  constructor(name, age) {  \n    this.name = name;  \n    this.age = age;  \n  }  \nsayHello() {  \n    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);  \n  }  \n  static create(name, age) {  \n    return new Person(name, age);  \n  }  \n  static defaultOccupation = 'Software Developer';  \n}  \nconsole.log(Person.defaultOccupation); // \"Software Developer\"  \nconst john = Person.create('John', 30);  \njohn.sayHello(); // \"Hello, my name is John and I am 30 years old.\"\n"})}),"\n",(0,a.jsx)(n.h1,{id:"constructor-parameters",children:"Constructor Parameters"}),"\n",(0,a.jsxs)(n.p,{children:["In JavaScript classes, the ",(0,a.jsx)(n.code,{children:"**constructor**"})," method is a special method that is called when an instance of the class is created. The ",(0,a.jsx)(n.code,{children:"**constructor**"})," method is used to initialize the instance properties of the class."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"class Person {  \n  constructor(name, age) {  \n    this.name = name;  \n    this.age = age;  \n  }  \n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["You can also use the ",(0,a.jsx)(n.code,{children:"**constructor**"})," method to perform additional setup tasks or to check the validity of the arguments. For example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"class Person {  \n  constructor(name, age) {  \n    if (typeof name !== 'string') {  \n      throw new TypeError('Name must be a string');  \n    }  \nif (typeof age !== 'number') {  \n      throw new TypeError('Age must be a number');  \n    }  \n    this.name = name;  \n    this.age = age;  \n  }  \n  sayHello() {  \n    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);  \n  }  \n}\n"})}),"\n",(0,a.jsx)(n.h1,{id:"inheritance",children:"Inheritance"}),"\n",(0,a.jsxs)(n.p,{children:["Inheritance is an important concept in object-oriented programming that allows you to create new classes based on existing classes. In JavaScript, you can use the ",(0,a.jsx)(n.code,{children:"**extends**"})," keyword to create a subclass that inherits from a superclass."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"class Animal {  \n  constructor(name) {  \n    this.name = name;  \n  }  \nspeak() {  \n    console.log(`${this.name} makes a noise.`);  \n  }  \n}  \nclass Dog extends Animal {  \n  speak() {  \n    console.log(`${this.name} barks.`);  \n  }  \n}  \nclass Cat extends Animal {  \n  speak() {  \n    console.log(`${this.name} meows.`);  \n  }  \n}  \nconst dog = new Dog('Fido');  \nconst cat = new Cat('Whiskers');  \ndog.speak(); // \"Fido barks.\"  \ncat.speak(); // \"Whiskers meows.\"\n"})}),"\n",(0,a.jsx)(n.p,{children:"Inheritance in JavaScript allows you to reuse code and create a hierarchy of classes with different levels of specificity. You can also extend from built-in class."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"class MyArray extends Array {  \n  constructor(...args) {  \n    super(...args);  \n  }  \ngetFirst() {  \n    return this[0];  \n  }  \n  getLast() {  \n    return this[this.length - 1];  \n  }  \n}  \nconst myArray = new MyArray(1, 2, 3, 4, 5);  \nconsole.log(myArray.getFirst()); // 1  \nconsole.log(myArray.getLast()); // 5  \nconsole.log(myArray instanceof Array); // true  \nconsole.log(myArray instanceof MyArray); // true\n"})}),"\n",(0,a.jsx)(n.h1,{id:"overriding-methods",children:"Overriding Methods"}),"\n",(0,a.jsx)(n.p,{children:"In object-oriented programming, method overriding is the process of defining a method in a subclass that has the same name and signature as a method in its superclass. The purpose of overriding a method is to change its implementation in the subclass to provide specialized behavior."}),"\n",(0,a.jsx)(n.p,{children:"In JavaScript, you can override a method in a subclass by simply defining a new method with the same name as the method you want to override. Here\u2019s an example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"class Animal {  \n  speak() {  \n    console.log('The animal makes a noise.');  \n  }  \n}  \nclass Dog extends Animal {  \n  speak() {  \n    console.log('The dog barks.');  \n  }  \n}  \nconst dog = new Dog();  \ndog.speak(); // \"The dog barks.\"\n"})}),"\n",(0,a.jsx)(n.h1,{id:"calling-superclass-methods",children:"Calling Superclass Methods"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"**super**"})," keyword is used in JavaScript to access and call functions or methods in a parent or superclass."]}),"\n",(0,a.jsxs)(n.p,{children:["When you define a class that extends another class, you can use the ",(0,a.jsx)(n.code,{children:"**super**"})," keyword to call the constructor and methods of the parent class. Here's an example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'class Animal {  \n  constructor(name) {  \n    this.name = name;  \n  }  \nspeak() {  \n    console.log(`${this.name} makes a noise.`);  \n  }  \n}  \nclass Dog extends Animal {  \n  constructor(name) {  \n    super(name);  \n  }  \n  speak() {  \n    super.speak();  \n    console.log(`${this.name} barks.`);  \n  }  \n}  \nconst dog = new Dog(\'Fido\');  \ndog.speak(); // "Fido makes a noise." "Fido barks."\n'})}),"\n",(0,a.jsx)(n.h1,{id:"private-and-protected-fields",children:"Private and Protected Fields"}),"\n",(0,a.jsxs)(n.p,{children:["JavaScript does not have built-in support for private and protected properties in classes, but the ",(0,a.jsx)(n.code,{children:"**#**"})," symbol can be used to denote private fields in more recent versions of JavaScript (ES2022 or later)."]}),"\n",(0,a.jsxs)(n.p,{children:["In JavaScript, protected properties are typically denoted by prefixing their names with an underscore, like ",(0,a.jsx)(n.code,{children:"**_name**"})," or ",(0,a.jsx)(n.code,{children:"**_age**"}),". This convention indicates that the property should not be accessed or modified from outside the class, but can still be accessed and modified by subclasses."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"class Person {  \n  #name;  \n  _age;  \nconstructor(name, age) {  \n    this.#name = name;  \n    this._age = age;  \n  }  \n  sayHello() {  \n    console.log(`Hello, my name is ${this.#name} and I am ${this._age} years old.`);  \n  }  \n}  \nclass Employee extends Person {  \n  #salary;  \n  constructor(name, age, salary) {  \n    super(name, age);  \n    this.#salary = salary;  \n  }  \n  sayHello() {  \n    console.log(`Hello, my name is ${this.#name} and I am ${this._age} years old. My salary is ${this.#salary}.`);  \n  }  \n}  \nconst john = new Person('John', 30);  \nconsole.log(john.#name); // This will cause a syntax error since #name is private  \nconsole.log(john._age); // \"30\" - this is technically allowed but goes against the convention of protected properties  \nconst bob = new Employee('Bob', 35, 50000);  \nconsole.log(bob.#salary); // This will cause a syntax error since #salary is private  \nbob.sayHello(); // \"Hello, my name is Bob and I am 35 years old. My salary is 50000.\"\n"})}),"\n",(0,a.jsx)(n.h1,{id:"getter-and-setter",children:"Getter and Setter"}),"\n",(0,a.jsx)(n.p,{children:"Getters and setters are methods in JavaScript classes that allow you to control access to an object\u2019s properties."}),"\n",(0,a.jsxs)(n.p,{children:["A getter is a method that gets the value of a property. It is defined using the ",(0,a.jsx)(n.code,{children:"**get**"})," keyword and can be used to access a property without directly accessing it. A setter is a method that sets the value of a property. It is defined using the ",(0,a.jsx)(n.code,{children:"**set**"})," keyword and can be used to set the value of a property using a function call. Here's an example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"class Person {  \n  constructor(name) {  \n    this.#name = name;  \n  }  \nget name() {  \n    return this.#name.toUpperCase();  \n  }  \n  set name(newName) {  \n    this.#name = newName.toLowerCase();  \n  }  \n}  \nconst person = new Person('John');  \nconsole.log(person.name); // \"JOHN\"  \nperson.name = 'Jane';  \nconsole.log(person.name); // \"jane\"\n"})}),"\n",(0,a.jsxs)(n.h1,{id:"instanceof-method",children:[(0,a.jsx)(n.code,{children:"instanceof"})," method"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"**instanceof**"})," is a built-in operator in JavaScript that allows you to check whether an object is an instance of a particular class or constructor function. It returns a boolean value indicating whether the object is an instance of the specified class."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"class Person {  \n  constructor(name) {  \n    this.name = name;  \n  }  \n}  \nclass Student extends Person {  \n  constructor(name, grade) {  \n    super(name);  \n    this.grade = grade;  \n  }  \n}  \nconst person = new Person('John');  \nconst student = new Student('Jane', 10);  \nconsole.log(person instanceof Person); // true  \nconsole.log(person instanceof Student); // false  \nconsole.log(student instanceof Person); // true  \nconsole.log(student instanceof Student); // true\n"})}),"\n",(0,a.jsx)(n.h1,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsx)(n.p,{children:"Classes in JavaScript provide a way to define objects with properties and methods. They are a powerful tool for organizing code and creating reusable components. With the ability to inherit from other classes, JavaScript classes provide a flexible and extensible programming model."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>i});var a=s(6540);const t={},o=a.createContext(t);function r(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);