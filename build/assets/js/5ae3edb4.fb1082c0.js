"use strict";(self.webpackChunksonnet_docs=self.webpackChunksonnet_docs||[]).push([[228],{2320:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=t(4848),s=t(8453);const r={slug:"datatypes-in-js-type-conversion",title:"Datatypes in JS: Type Conversion",authors:{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4"},tags:["javascript"]},o="Datatypes in JS",i={permalink:"/blog/datatypes-in-js-type-conversion",editUrl:"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/2-datatypes-in-js-type-conversion.md",source:"@site/blog/javascript/2-datatypes-in-js-type-conversion.md",title:"Datatypes in JS: Type Conversion",description:"JavaScript is a dynamically typed language, which means that the data type of a variable is determined at runtime.",date:"2024-05-15T13:15:30.508Z",tags:[{label:"javascript",permalink:"/blog/tags/javascript"}],readingTime:2.895,hasTruncateMarker:!0,authors:[{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4",imageURL:"https://avatars.githubusercontent.com/u/58030954?v=4"}],frontMatter:{slug:"datatypes-in-js-type-conversion",title:"Datatypes in JS: Type Conversion",authors:{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4",imageURL:"https://avatars.githubusercontent.com/u/58030954?v=4"},tags:["javascript"]},unlisted:!1,prevItem:{title:"Commenting and Debugging in JS",permalink:"/blog/commenting-and-debugging-in-js"},nextItem:{title:"Variables in JS: var, let, const",permalink:"/blog/variables-in-js-var-let-const"}},l={authorsImageUrls:[void 0]},c=[];function d(e){const n={code:"code",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"JavaScript is a dynamically typed language, which means that the data type of a variable is determined at runtime."}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"typeof"})," keyword is used to determine the data type of a value or variable in JavaScript. For example, ",(0,a.jsx)(n.code,{children:"typeof 42"})," will return ",(0,a.jsx)(n.code,{children:'"number"'}),". There are seven primitive data types in JavaScript:"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Number"}),": represents numeric values, including integers and floating-point numbers."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'let age = 30;  \n// toFixed()  \nlet num = 3.14159;  \nlet formattedNum = num.toFixed(2);  \nconsole.log(formattedNum); // "3.14"  \n// toPrecision()  \nlet num = 123.456;  \nlet formattedNum = num.toPrecision(4);  \nconsole.log(formattedNum); // "123.5"\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"2. String"}),": represents a sequence of characters, enclosed in single or double quotes."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'let name = "John Doe";  \n// length  \nlet str = "Hello, world!";  \nconsole.log(str.length); // 13  \n// toUpperCase(), toLowerCase()  \nlet str = "Hello, world!";  \nconsole.log(str.toUpperCase()); // "HELLO, WORLD!"  \nconsole.log(str.toLowerCase()); // "hello, world!"  \n// trim()  \nlet str = "  Hello, world!   ";  \nconsole.log(str.trim()); // Output: "Hello, world!"\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"3. Boolean"}),": represents a logical value, either true or false."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'let isStudent = true;  \n// ! (logical not)  \nconsole.log(!true); // false  \nconsole.log(!false); // true  \nconsole.log(!0); // true  \nconsole.log(!"hello"); // false  \nconsole.log(!null); // true\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"4. Undefined"}),": represents a variable that has not been assigned a value yet."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"let x;  \nconsole.log(x); // undefined\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"5. Null"}),": represents a variable that has been explicitly assigned the value of null."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"let x = null;  \nconsole.log(x); // null\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"6. Symbol"}),": represents a unique identifier."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'let firstName = Symbol("first name");  \nlet person = {  \n  [firstName]: "John",  \n  lastName: "Doe",  \n  age: 30  \n};  \nconsole.log(person[firstName]); // John\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"7. BigInt"}),": A numeric data type that represents integers larger than the maximum safe integer in JavaScript"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"let bigNumber = BigInt(Number.MAX_SAFE_INTEGER) + 1n;  \nconsole.log(bigNumber); // 9007199254740992n\n"})}),"\n",(0,a.jsxs)(n.p,{children:["8. In addition to these primitive data types, JavaScript has one non-primitive data type, which is the ",(0,a.jsx)(n.strong,{children:"Object"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'let person = {  \n  firstName: "John",  \n  lastName: "Doe",  \n  age: 30,  \n  address: {  \n    street: "123 Main St",  \n    city: "Anytown",  \n    state: "CA",  \n    zip: "12345"  \n  }  \n};  \nconsole.log(person.firstName); // John  \nconsole.log(person.address.city); // Anytown  \nperson.phone = "555-1234";  \nconsole.log(person); // { firstName: "John", lastName: "Doe", age: 30, address: { street: "123 Main St", city: "Anytown", state: "CA", zip: "12345" }, phone: "555-1234" }\n'})}),"\n",(0,a.jsxs)(n.p,{children:["In JavaScript, arrays are a type of object. Arrays are a specialized kind of object that have a numeric index and a ",(0,a.jsx)(n.code,{children:"**length**"})," property, and provide additional methods for working with ordered collections of data. Arrays can store any type of data as its elements, including objects themselves."]}),"\n",(0,a.jsxs)(n.p,{children:["Arrays in JavaScript are created using the array literal syntax, which is enclosed in square brackets ",(0,a.jsx)(n.code,{children:"**[]**"}),". Here's an example of an array:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'let fruits = ["apple", "banana", "orange"];  \nconsole.log(fruits[0]); // apple  \nconsole.log(fruits.length); // 3  \nfruits.push("grape");  \nconsole.log(fruits); // ["apple", "banana", "orange", "grape"]\n'})}),"\n",(0,a.jsx)(n.p,{children:"Since JavaScript is a dynamically typed language, variables can hold values of any data type, and their data type can change during runtime."}),"\n",(0,a.jsx)(n.p,{children:"However, it\u2019s worth noting that assigning a string to a variable that was previously holding a number is an example of implicit type conversion, as the variable\u2019s data type has been changed without an explicit conversion using a function or operator. This can sometimes lead to unexpected behavior and bugs, so it\u2019s important to use type conversions carefully and deliberately."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'let x = 12;  \nx = "hello";  \nconsole.log(x) // hello\n'})}),"\n",(0,a.jsx)(n.p,{children:"It is important to understand the different data types in JavaScript and how type conversion works, as it can affect the behavior of your code."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var a=t(6540);const s={},r=a.createContext(s);function o(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);