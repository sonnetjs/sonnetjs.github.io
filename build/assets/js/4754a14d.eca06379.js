"use strict";(self.webpackChunksonnet_docs=self.webpackChunksonnet_docs||[]).push([[1805],{5416:(t,a,e)=>{e.r(a),e.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>r});var n=e(4848),i=e(8453);const s={slug:"call-stack-and-callback-queue-in-js",title:"Call Stack and Callback Queue in JS",authors:{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4"},tags:["javascript"]},l="Call Stack and Callback Queue in JS",c={permalink:"/blog/call-stack-and-callback-queue-in-js",editUrl:"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/19-call-stack-and-callback-queue-in-js.md",source:"@site/blog/javascript/19-call-stack-and-callback-queue-in-js.md",title:"Call Stack and Callback Queue in JS",description:"JavaScript is a single-threaded language, which means it can only perform one task at a time. However, it is capable of handling multiple tasks simultaneously using the concept of Call Stack. The Call Stack is a mechanism used by the JavaScript engine to keep track of function calls. When a function is called, it is added to the top of the Call Stack, and when it returns, it is removed from the stack.",date:"2024-05-15T13:15:30.781Z",tags:[{label:"javascript",permalink:"/blog/tags/javascript"}],readingTime:3.86,hasTruncateMarker:!0,authors:[{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4",imageURL:"https://avatars.githubusercontent.com/u/58030954?v=4"}],frontMatter:{slug:"call-stack-and-callback-queue-in-js",title:"Call Stack and Callback Queue in JS",authors:{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4",imageURL:"https://avatars.githubusercontent.com/u/58030954?v=4"},tags:["javascript"]},unlisted:!1,prevItem:{title:"Iterator, Generator and Closure in JS",permalink:"/blog/iterator-generator-and-closure-in-js"},nextItem:{title:"Asynchronous Programming in JS",permalink:"/blog/asynchronous-programming-in-js"}},o={authorsImageUrls:[void 0]},r=[];function u(t){const a={p:"p",...(0,i.R)(),...t.components};return(0,n.jsx)(a.p,{children:"JavaScript is a single-threaded language, which means it can only perform one task at a time. However, it is capable of handling multiple tasks simultaneously using the concept of Call Stack. The Call Stack is a mechanism used by the JavaScript engine to keep track of function calls. When a function is called, it is added to the top of the Call Stack, and when it returns, it is removed from the stack."})}function h(t={}){const{wrapper:a}={...(0,i.R)(),...t.components};return a?(0,n.jsx)(a,{...t,children:(0,n.jsx)(u,{...t})}):u(t)}},8453:(t,a,e)=>{e.d(a,{R:()=>l,x:()=>c});var n=e(6540);const i={},s=n.createContext(i);function l(t){const a=n.useContext(s);return n.useMemo((function(){return"function"==typeof t?t(a):{...a,...t}}),[a,t])}function c(t){let a;return a=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:l(t.components),n.createElement(s.Provider,{value:a},t.children)}}}]);