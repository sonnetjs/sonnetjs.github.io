"use strict";(self.webpackChunksonnet_docs=self.webpackChunksonnet_docs||[]).push([[4324],{5463:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var o=n(4848),r=n(8453);const a={sidebar_position:2},i="Qucik Start",s={id:"getting-started/quick-start",title:"Qucik Start",description:"Let's get started with Sonnet JS by creating a simple application. In this tutorial, we will create a new Sonnet JS project, create a new component, and render it in the browser.",source:"@site/docs/getting-started/quick-start.md",sourceDirName:"getting-started",slug:"/getting-started/quick-start",permalink:"/docs/getting-started/quick-start",draft:!1,unlisted:!1,editUrl:"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/docs/getting-started/quick-start.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docSidebar",previous:{title:"Overview",permalink:"/docs/getting-started/overview"},next:{title:"Core",permalink:"/docs/category/core"}},c={},l=[{value:"Create a new Sonnet JS project",id:"create-a-new-sonnet-js-project",level:2},{value:"Boilerplate code",id:"boilerplate-code",level:2},{value:"Run the application",id:"run-the-application",level:2}];function p(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"qucik-start",children:"Qucik Start"}),"\n",(0,o.jsx)(t.p,{children:"Let's get started with Sonnet JS by creating a simple application. In this tutorial, we will create a new Sonnet JS project, create a new component, and render it in the browser."}),"\n",(0,o.jsx)(t.h2,{id:"create-a-new-sonnet-js-project",children:"Create a new Sonnet JS project"}),"\n",(0,o.jsx)(t.p,{children:"The first step is to create a new Sonnet JS project. You can do this by running the following command in your terminal:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"npx create-sonnet-app\n"})}),"\n",(0,o.jsx)(t.p,{children:"You will be prompted to enter the project name, select a template, and choose whether to add TypeScript to the project. Here is an example of the prompts:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"Sonnet JS: A frontend framework\n\n\u2714 Project name: \u2026 sonnet-project\n\u2714 Select a template \u203a Default\n\u2714 Add TypeScript? \u2026 No / Yes\n\n  cd sonnet-project\n  npm install\n  npm run dev\n"})}),"\n",(0,o.jsxs)(t.p,{children:["This will create a new Sonnet JS project in a directory called ",(0,o.jsx)(t.code,{children:"sonnet-project"}),". Once the project is created, you can navigate to the project directory by running the following command:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"cd sonnet-project\n"})}),"\n",(0,o.jsx)(t.p,{children:"Install the dependencies by running the following command:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"npm install\n"})}),"\n",(0,o.jsx)(t.h2,{id:"boilerplate-code",children:"Boilerplate code"}),"\n",(0,o.jsx)(t.p,{children:"Here is the boilerplate code for a simple Sonnet JS counter application. Let's try to understand what each part of the code does:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",metastring:"title=src/main.ts",children:"import { createApp } from 'sonnet';\nimport Counter from './Counter';\n\nconst app = createApp();\napp.root(Counter);\napp.mount('#app');\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Now let's take a look at the ",(0,o.jsx)(t.code,{children:"Counter"})," component:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-typescript",metastring:"title=src/Counter.ts",children:'import { $component, SonnetComponent } from \'@sonnetjs/core\';\n\nclass Counter extends SonnetComponent {\n  counter = 0;\n\n  public script() {\n    const counterButton = document.getElementById(\n      \'counter\',\n    ) as HTMLButtonElement;\n    counterButton.addEventListener(\'click\', () => {\n      this.counter += 1;\n      counterButton.innerText = `count is ${this.counter}`;\n    });\n  }\n\n  public get() {\n    return /*html*/ `\n    <div>\n      <a href="https://vitejs.dev" target="_blank">\n        <img src="https://vitejs.dev/logo.svg" class="logo" alt="Vite Logo" />\n      </a>\n      <h1>Vite</h1>\n      <div class="card">\n        <button id="counter" type="button" class="btn">count is ${this.counter}</button>\n      </div>\n      <p class="read-the-docs">Edit src/main.ts and save to test HMR.</p>\n    </div>\n    `;\n  }\n}\n\nexport default $component(Counter);\n'})}),"\n",(0,o.jsx)(t.h2,{id:"run-the-application",children:"Run the application"}),"\n",(0,o.jsx)(t.p,{children:"To run the application, you can run the following command in your terminal:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,o.jsx)(t.p,{children:"This will start a development server and open the application in your default browser. You should see a simple counter application with a button that increments the counter when clicked."}),"\n",(0,o.jsx)(t.p,{children:"That's it! You have successfully created a simple Sonnet JS application. You can now start building more complex applications using Sonnet JS."})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var o=n(6540);const r={},a=o.createContext(r);function i(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);