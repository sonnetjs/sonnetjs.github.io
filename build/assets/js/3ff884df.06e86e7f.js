"use strict";(self.webpackChunksonnet_docs=self.webpackChunksonnet_docs||[]).push([[648],{1957:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>r});var i=t(4848),s=t(8453);const a={slug:"scheduling-in-js",title:"Scheduling in JS",authors:{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4"},tags:["javascript"]},c="Scheduling in JS",l={permalink:"/blog/scheduling-in-js",editUrl:"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/17-scheduling-in-js.md",source:"@site/blog/javascript/17-scheduling-in-js.md",title:"Scheduling in JS",description:"JavaScript is a programming language that is widely used for building web applications. One of the important features of JavaScript is scheduling, which allows developers to execute code at a specific time or after a certain interval.",date:"2024-05-15T13:15:30.742Z",tags:[{label:"javascript",permalink:"/blog/tags/javascript"}],readingTime:1.425,hasTruncateMarker:!0,authors:[{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4",imageURL:"https://avatars.githubusercontent.com/u/58030954?v=4"}],frontMatter:{slug:"scheduling-in-js",title:"Scheduling in JS",authors:{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4",imageURL:"https://avatars.githubusercontent.com/u/58030954?v=4"},tags:["javascript"]},unlisted:!1,prevItem:{title:"Asynchronous Programming in JS",permalink:"/blog/asynchronous-programming-in-js"},nextItem:{title:"Error Handling in JS",permalink:"/blog/error-handling-in-js"}},o={authorsImageUrls:[void 0]},r=[];function d(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"JavaScript is a programming language that is widely used for building web applications. One of the important features of JavaScript is scheduling, which allows developers to execute code at a specific time or after a certain interval."}),"\n",(0,i.jsx)(n.h1,{id:"settimeout",children:"setTimeout()"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"setTimeout()"})," function is used to execute a function after a certain delay. The delay is specified in milliseconds. Here is an example of using ",(0,i.jsx)(n.code,{children:"setTimeout()"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'setTimeout(function() {  \n  console.log("Hello, World!");  \n}, 3000);\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In this example, the function ",(0,i.jsx)(n.code,{children:"console.log()"})," will be executed after a delay of 3 seconds."]}),"\n",(0,i.jsx)(n.h1,{id:"setinterval",children:"setInterval()"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"setInterval()"})," function is used to execute a function repeatedly after a certain interval. The interval is specified in milliseconds. Here is an example of using ",(0,i.jsx)(n.code,{children:"setInterval()"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'setInterval(function() {  \n  console.log("Hello, World!");  \n}, 1000);\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In this example, the function ",(0,i.jsx)(n.code,{children:"console.log()"})," will be executed every 1 second."]}),"\n",(0,i.jsx)(n.h1,{id:"cleartimeout",children:"clearTimeout()"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"clearTimeout()"})," function is used to cancel a ",(0,i.jsx)(n.code,{children:"setTimeout()"})," function. Here is an example of using ",(0,i.jsx)(n.code,{children:"clearTimeout()"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'var timeoutID = setTimeout(function() {  \n  console.log("Hello, World!");  \n}, 3000);  \nclearTimeout(timeoutID);\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In this example, the ",(0,i.jsx)(n.code,{children:"setTimeout()"})," function will be cancelled before it has a chance to execute."]}),"\n",(0,i.jsx)(n.h1,{id:"clearinterval",children:"clearInterval()"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"clearInterval()"})," function is used to cancel a ",(0,i.jsx)(n.code,{children:"setInterval()"})," function. Here is an example of using ",(0,i.jsx)(n.code,{children:"clearInterval()"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'var intervalID = setInterval(function() {  \n  console.log("Hello, World!");  \n}, 1000);  \nclearInterval(intervalID);\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In this example, the ",(0,i.jsx)(n.code,{children:"setInterval()"})," function will be cancelled and the code inside the function will no longer be executed."]}),"\n",(0,i.jsxs)(n.p,{children:["In conclusion, scheduling is an important feature of JavaScript that allows developers to execute code at a specific time or after a certain interval. The ",(0,i.jsx)(n.code,{children:"setTimeout()"})," and ",(0,i.jsx)(n.code,{children:"setInterval()"})," functions are used to achieve this functionality. Additionally, the ",(0,i.jsx)(n.code,{children:"clearTimeout()"})," and ",(0,i.jsx)(n.code,{children:"clearInterval()"})," functions are used to cancel scheduled functions."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>l});var i=t(6540);const s={},a=i.createContext(s);function c(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);