"use strict";(self.webpackChunksonnet_docs=self.webpackChunksonnet_docs||[]).push([[6963],{3818:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var s=n(4848),o=n(8453);const i={slug:"websocket-in-js",title:"WebSocket in JS",authors:{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4"},tags:["javascript"]},c="WebSocket in JS",a={permalink:"/blog/websocket-in-js",editUrl:"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/28-websocket-in-js.md",source:"@site/blog/javascript/28-websocket-in-js.md",title:"WebSocket in JS",description:"WebSocket is a protocol that allows for real-time communication between client and server over a single, long-lived connection. Unlike HTTP, which uses a request-response model, WebSocket enables bi-directional communication between the client and server in real-time.",date:"2024-05-15T13:15:30.964Z",tags:[{label:"javascript",permalink:"/blog/tags/javascript"}],readingTime:1.635,hasTruncateMarker:!0,authors:[{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4",imageURL:"https://avatars.githubusercontent.com/u/58030954?v=4"}],frontMatter:{slug:"websocket-in-js",title:"WebSocket in JS",authors:{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4",imageURL:"https://avatars.githubusercontent.com/u/58030954?v=4"},tags:["javascript"]},unlisted:!1,prevItem:{title:"Browser Data Storage in JS",permalink:"/blog/browser-data-storage-in-js"},nextItem:{title:"Working with APIs in JS",permalink:"/blog/working-with-apis-in-js"}},r={authorsImageUrls:[void 0]},l=[];function d(e){const t={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"WebSocket is a protocol that allows for real-time communication between client and server over a single, long-lived connection. Unlike HTTP, which uses a request-response model, WebSocket enables bi-directional communication between the client and server in real-time."}),"\n",(0,s.jsx)(t.p,{children:"JavaScript is a popular language for building web applications that require real-time communication, making WebSocket an important technology to learn for web developers."}),"\n",(0,s.jsx)(t.p,{children:"To use WebSocket in JS, you first need to create a WebSocket object using the WebSocket constructor, passing in the URL of the WebSocket server as a parameter. For example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"const socket = new WebSocket('ws://localhost:8080');\n"})}),"\n",(0,s.jsx)(t.p,{children:"Once you have created a WebSocket object, you need to add event listeners to handle the WebSocket events. Here are the events that we can handle:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"**open**"}),": This event is fired when the WebSocket connection is established."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"**message**"}),": This event is fired when a message is received from the WebSocket server."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"**error**"}),": This event is fired when an error occurs in the WebSocket connection."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"**close**"}),": This event is fired when the WebSocket connection is closed."]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"socket.addEventListener('open', (event) => {  \n  console.log('WebSocket connection established');  \n});  \nsocket.addEventListener('message', (event) => {  \n  console.log('Received message:', event.data);  \n});  \nsocket.addEventListener('close', (event) => {  \n  console.log('WebSocket connection closed');  \n});  \nsocket.addEventListener('error', (event) => {  \n  console.error('WebSocket error:', event);  \n});\n"})}),"\n",(0,s.jsxs)(t.p,{children:["To send a message from the client to the server, you can use the ",(0,s.jsx)(t.code,{children:"send()"})," method on the WebSocket object:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"const message = 'Hello, WebSocket!';  \nsocket.send(message);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["To receive data from the server, we need to handle the ",(0,s.jsx)(t.code,{children:"**message**"})," event of the WebSocket object. Here's an example of how to receive data from the server:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"socket.addEventListener('message', function(event) {  \n  const message = event.data;  \n  console.log('Message received: ' + message);  \n});\n"})}),"\n",(0,s.jsxs)(t.p,{children:["On the server-side, you can use libraries like ",(0,s.jsx)(t.code,{children:"ws"})," or ",(0,s.jsx)(t.code,{children:"socket.io"})," to handle WebSocket connections in Node.js."]}),"\n",(0,s.jsx)(t.p,{children:"WebSocket is a powerful technology that enables real-time communication between client and server. With JavaScript, you can easily create WebSocket connections and handle incoming messages and errors."})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>a});var s=n(6540);const o={},i=s.createContext(o);function c(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);