"use strict";(self.webpackChunksonnet_docs=self.webpackChunksonnet_docs||[]).push([[2599],{5721:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var s=n(4848),a=n(8453);const r={slug:"browser-events-in-js",title:"Browser Events in JS",authors:{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4"},tags:["javascript"]},o="Browser Events in JS",i={permalink:"/blog/browser-events-in-js",editUrl:"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/24-browser-events-in-js.md",source:"@site/blog/javascript/24-browser-events-in-js.md",title:"Browser Events in JS",description:"In JavaScript, events are actions or occurrences that happen in the browser, such as a user clicking on a button or a page finishing loading. JavaScript can listen to these events and execute code in response.",date:"2024-05-15T13:15:30.878Z",tags:[{label:"javascript",permalink:"/blog/tags/javascript"}],readingTime:5.695,hasTruncateMarker:!0,authors:[{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4",imageURL:"https://avatars.githubusercontent.com/u/58030954?v=4"}],frontMatter:{slug:"browser-events-in-js",title:"Browser Events in JS",authors:{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4",imageURL:"https://avatars.githubusercontent.com/u/58030954?v=4"},tags:["javascript"]},unlisted:!1,prevItem:{title:"Advance Concepts of Events in JS: Bubbling, Capturing",permalink:"/blog/advance-concepts-of-events-in-js-bubbling-capturing"},nextItem:{title:"Browser Environment in JS",permalink:"/blog/browser-environment-in-js"}},c={authorsImageUrls:[void 0]},u=[];function h(t){const e={p:"p",...(0,a.R)(),...t.components};return(0,s.jsx)(e.p,{children:"In JavaScript, events are actions or occurrences that happen in the browser, such as a user clicking on a button or a page finishing loading. JavaScript can listen to these events and execute code in response."})}function l(t={}){const{wrapper:e}={...(0,a.R)(),...t.components};return e?(0,s.jsx)(e,{...t,children:(0,s.jsx)(h,{...t})}):h(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>o,x:()=>i});var s=n(6540);const a={},r=s.createContext(a);function o(t){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function i(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:o(t.components),s.createElement(r.Provider,{value:e},t.children)}}}]);