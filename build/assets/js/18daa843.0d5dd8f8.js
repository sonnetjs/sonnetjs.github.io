"use strict";(self.webpackChunksonnet_docs=self.webpackChunksonnet_docs||[]).push([[9609],{9807:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var i=t(4848),s=t(8453);const o={slug:"function-binding-in-js",title:"Function Binding in JS",authors:{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4"},tags:["javascript"]},a="Function Binding in JS",c={permalink:"/blog/function-binding-in-js",editUrl:"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/13-function-binding-in-js.md",source:"@site/blog/javascript/13-function-binding-in-js.md",title:"Function Binding in JS",description:"JavaScript is a versatile language that allows developers to create complex applications with ease. One of the language\u2019s most powerful features is its ability to manipulate the behavior of functions through binding.",date:"2024-05-15T13:15:30.677Z",tags:[{label:"javascript",permalink:"/blog/tags/javascript"}],readingTime:6.77,hasTruncateMarker:!0,authors:[{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4",imageURL:"https://avatars.githubusercontent.com/u/58030954?v=4"}],frontMatter:{slug:"function-binding-in-js",title:"Function Binding in JS",authors:{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4",imageURL:"https://avatars.githubusercontent.com/u/58030954?v=4"},tags:["javascript"]},unlisted:!1,prevItem:{title:"Class in JS",permalink:"/blog/class-in-js"},nextItem:{title:"Protype in JS",permalink:"/blog/protype-in-js"}},r={authorsImageUrls:[void 0]},l=[];function h(e){const n={code:"code",h1:"h1",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"JavaScript is a versatile language that allows developers to create complex applications with ease. One of the language\u2019s most powerful features is its ability to manipulate the behavior of functions through binding."}),"\n",(0,i.jsx)(n.h1,{id:"understanding-binding",children:"Understanding Binding"}),"\n",(0,i.jsx)(n.p,{children:"In JavaScript, binding refers to the process of assigning a specific context or value to the \u2018this\u2019 keyword inside a function. By default, the \u2018this\u2019 keyword refers to the global object, but when a function is bound to a specific context or value, \u2018this\u2019 will refer to that context instead."}),"\n",(0,i.jsx)(n.p,{children:"For example, consider the following code snippet:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const person = {  \n  name: 'John',  \n  greet: function() {  \n    console.log(`Hello, my name is ${this.name}`);  \n  }  \n}  \nperson.greet(); // Output: Hello, my name is John\n"})}),"\n",(0,i.jsx)(n.p,{children:"In this example, the \u2018this\u2019 keyword inside the \u2018greet\u2019 method refers to the \u2018person\u2019 object. We can also bind the \u2018greet\u2019 method to a different context by using the \u2018bind\u2019 method, like so:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const anotherPerson = {  \n  name: 'Sarah'  \n}  \nconst greetAnotherPerson = person.greet.bind(anotherPerson);  \ngreetAnotherPerson(); // Output: Hello, my name is Sarah\n"})}),"\n",(0,i.jsx)(n.p,{children:"Here, we have bound the \u2018greet\u2019 method to the \u2018anotherPerson\u2019 object using the \u2018bind\u2019 method. This means that when we call \u2018greetAnotherPerson\u2019, the \u2018this\u2019 keyword inside the \u2018greet\u2019 method will refer to the \u2018anotherPerson\u2019 object instead of the \u2018person\u2019 object."}),"\n",(0,i.jsx)(n.h1,{id:"the-benefits-of-binding",children:"The Benefits of Binding"}),"\n",(0,i.jsx)(n.p,{children:"Binding is a powerful tool in JavaScript because it allows developers to control the behavior of functions in a more flexible way. By binding a function to a specific context, we can ensure that it behaves consistently regardless of where it is called from. This is especially useful when working with objects that have methods, as it allows us to easily reuse those methods in different contexts."}),"\n",(0,i.jsx)(n.p,{children:"Another benefit of binding is that it allows us to create new functions that inherit the behavior of existing functions. This is known as function currying and is a common technique used in functional programming. By binding some of the arguments of a function to specific values, we can create a new function that takes fewer arguments and behaves differently than the original function."}),"\n",(0,i.jsxs)(n.h1,{id:"call-method",children:[(0,i.jsx)(n.code,{children:"call"})," method"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"**call()**"})," method is a built-in JavaScript function that allows you to call a function with a specified ",(0,i.jsx)(n.code,{children:"**this**"})," value and arguments provided individually, instead of as an array (as with the ",(0,i.jsx)(n.code,{children:"**apply()**"})," method)."]}),"\n",(0,i.jsxs)(n.p,{children:["The main purpose of the ",(0,i.jsx)(n.code,{children:"**call()**"})," method is to execute a function with a specified ",(0,i.jsx)(n.code,{children:"**this**"})," value, so you can control the value of ",(0,i.jsx)(n.code,{children:"**this**"})," inside a function when it is called. By default, the ",(0,i.jsx)(n.code,{children:"**this**"})," keyword inside a function refers to the global ",(0,i.jsx)(n.code,{children:"**window**"})," object in a web browser, or to the global ",(0,i.jsx)(n.code,{children:"**global**"})," object in Node.js."]}),"\n",(0,i.jsxs)(n.p,{children:["However, by using the ",(0,i.jsx)(n.code,{children:"**call()**"})," method, you can specify a different ",(0,i.jsx)(n.code,{children:"**this**"})," value, such as an object that contains the properties and methods you want to use inside the function. This allows you to reuse a function with different objects and ensure that the function is executed in the correct context."]}),"\n",(0,i.jsxs)(n.p,{children:["In addition to specifying a ",(0,i.jsx)(n.code,{children:"**this**"})," value, the ",(0,i.jsx)(n.code,{children:"**call()**"})," method also allows you to pass in arguments to the function individually, instead of as an array (as with the ",(0,i.jsx)(n.code,{children:"**apply()**"})," method). This can be useful if you have a function that expects multiple arguments and you want to specify them individually, rather than as an array."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const person = {  \n  firstName: 'John',  \n  lastName: 'Doe',  \n  getFullName: function() {  \n    return this.firstName + ' ' + this.lastName;  \n  }  \n}  \nconst person2 = {  \n  firstName: 'Jane',  \n  lastName: 'Doe'  \n}  \nconst fullName = person.getFullName.call(person2);  \nconsole.log(fullName); // 'Jane Doe'\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function greet(greeting, punctuation) {  \n  console.log(`${greeting}, ${this.name}${punctuation}`);  \n}  \nconst person = { name: 'John' };  \nconst args = ['Hello', '!'];  \n// Call greet with person as the this value and args as the arguments  \ngreet.apply(person, args);\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"apply-method",children:[(0,i.jsx)(n.code,{children:"apply"})," method"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"**apply()**"})," method in JavaScript is used to call a function with a specified ",(0,i.jsx)(n.code,{children:"**this**"})," value and arguments provided as an array. The main purpose of this method is to execute a function in a specific context or scope, which can be useful in scenarios where you want to reuse a function with different objects and ensure that the function is executed in the correct context."]}),"\n",(0,i.jsxs)(n.p,{children:["One of the primary use cases of the ",(0,i.jsx)(n.code,{children:"**apply()**"})," method is to set the value of the ",(0,i.jsx)(n.code,{children:"**this**"})," keyword inside a function to a specific object. By passing in an object as the first argument to the ",(0,i.jsx)(n.code,{children:"**apply()**"})," method, you can set the ",(0,i.jsx)(n.code,{children:"**this**"})," keyword to that object when the function is called. This is especially useful in cases where the function is designed to work with a specific object's properties and methods."]}),"\n",(0,i.jsxs)(n.p,{children:["Another advantage of the ",(0,i.jsx)(n.code,{children:"**apply()**"})," method is that it allows you to pass in arguments to a function as an array. This can be useful if you have a function that expects multiple arguments, and you want to pass them in as an array rather than individually. The ",(0,i.jsx)(n.code,{children:"**apply()**"})," method can also be used to call a function with a variable number of arguments since you can pass in the arguments as an array, and the function can then use the ",(0,i.jsx)(n.code,{children:"**length**"})," property of the array to determine how many arguments were passed in."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function greet(greeting, punctuation) {  \n  console.log(`${greeting}, ${this.name}${punctuation}`);  \n}  \nconst person = { name: 'John' };  \nconst args = ['Hello', '!'];  \n// Call greet with person as the this value and args as the arguments  \ngreet.apply(person, args);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"call"})," method is also use to call constructor of parent"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function Animal(name) {  \n  this.name = name;  \n}  \nfunction Cat(name, color) {  \n  Animal.call(this, name);  \n  this.color = color;  \n}  \nconst myCat = new Cat('Fluffy', 'orange');  \nconsole.log(myCat.name); // Fluffy  \nconsole.log(myCat.color); // orange\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"bind-method",children:[(0,i.jsx)(n.code,{children:"bind"})," method"]}),"\n",(0,i.jsxs)(n.p,{children:["In JavaScript, the ",(0,i.jsx)(n.code,{children:"**bind()**"})," method is used to create a new function that has a specific ",(0,i.jsx)(n.code,{children:"**this**"})," value and, optionally, arguments that are pre-set. When the new function is called, the ",(0,i.jsx)(n.code,{children:"**this**"})," keyword inside the function body will be bound to the value passed as the first argument to the ",(0,i.jsx)(n.code,{children:"**bind()**"})," method."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"**bind()**"})," method is commonly used in scenarios where a function needs to be passed as a callback or event handler, but the ",(0,i.jsx)(n.code,{children:"**this**"})," value needs to be a specific object, and not the default ",(0,i.jsx)(n.code,{children:"**this**"})," value that is determined by the context of the function call. By using ",(0,i.jsx)(n.code,{children:"**bind()**"}),", you can ensure that the ",(0,i.jsx)(n.code,{children:"**this**"})," value inside the function is always what you expect it to be."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const person = {  \n  name: 'John',  \n  greet: function() {  \n    console.log(`Hello, my name is ${this.name}.`);  \n  }  \n};  \nconst person1 = {  \n name: 'Jane',  \n}  \nconst boundGreet = person.greet.bind(person1);  \n// Call the boundGreet function  \nboundGreet();\n"})}),"\n",(0,i.jsx)(n.h1,{id:"difference",children:"Difference"}),"\n",(0,i.jsx)(n.p,{children:"Here is difference between these three methods:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"**call**"}),": The ",(0,i.jsx)(n.code,{children:"**call**"})," method invokes a function with a specified ",(0,i.jsx)(n.code,{children:"**this**"})," value and arguments provided as a comma-separated list. The first argument of ",(0,i.jsx)(n.code,{children:"**call**"})," is the ",(0,i.jsx)(n.code,{children:"**this**"})," value, followed by any arguments the function requires."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"**apply**"}),": The ",(0,i.jsx)(n.code,{children:"**apply**"})," method is similar to ",(0,i.jsx)(n.code,{children:"**call**"}),", but the arguments are provided as an array. The first argument of ",(0,i.jsx)(n.code,{children:"**apply**"})," is the ",(0,i.jsx)(n.code,{children:"**this**"})," value, followed by an array of arguments."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"**bind**"}),": The ",(0,i.jsx)(n.code,{children:"**bind**"})," method creates a new function with the same body as the original function, but with a specified ",(0,i.jsx)(n.code,{children:"**this**"})," value. It returns a new function that can be called later with the provided ",(0,i.jsx)(n.code,{children:"**this**"})," value and arguments."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function greet(name) {  \n  console.log(`Hello, ${name}! My name is ${this.name}.`);  \n}  \nconst person1 = { name: 'John' };  \nconst person2 = { name: 'Alice' };  \ngreet.call(person1, 'Alice'); // Hello, Alice! My name is John.  \ngreet.apply(person2, ['Bob']); // Hello, Bob! My name is Alice.  \nconst boundGreet = greet.bind(person1);  \nboundGreet('Alice'); // Hello, Alice! My name is John.\n"})}),"\n",(0,i.jsx)(n.p,{children:"Binding is a powerful technique in JavaScript that allows us to control the behavior of functions in a flexible way. By binding functions to specific contexts, we can ensure that they behave consistently regardless of where they are called from. We can also use binding to create new functions that inherit the behavior of existing functions. By mastering the basics of binding, developers can unlock the full potential of JavaScript and create applications that are both powerful and flexible."})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var i=t(6540);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);