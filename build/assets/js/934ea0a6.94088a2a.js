"use strict";(self.webpackChunksonnet_docs=self.webpackChunksonnet_docs||[]).push([[968],{7076:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var o=e(4848),a=e(8453);const r={slug:"asynchronous-programming-in-js",title:"Asynchronous Programming in JS",authors:{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4"},tags:["javascript"]},s="Asynchronous Programming in JS",i={permalink:"/blog/asynchronous-programming-in-js",editUrl:"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/18-asynchronous-programming-in-js.md",source:"@site/blog/javascript/18-asynchronous-programming-in-js.md",title:"Asynchronous Programming in JS",description:"Asynchronous programming is a way of writing non-blocking code in JavaScript. In traditional programming, code runs sequentially from top to bottom, which means that one line of code is executed at a time. However, when dealing with long-running tasks such as network requests or file I/O, synchronous programming can lead to unresponsive applications.",date:"2024-05-15T13:15:30.761Z",tags:[{label:"javascript",permalink:"/blog/tags/javascript"}],readingTime:5.885,hasTruncateMarker:!0,authors:[{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4",imageURL:"https://avatars.githubusercontent.com/u/58030954?v=4"}],frontMatter:{slug:"asynchronous-programming-in-js",title:"Asynchronous Programming in JS",authors:{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4",imageURL:"https://avatars.githubusercontent.com/u/58030954?v=4"},tags:["javascript"]},unlisted:!1,prevItem:{title:"Call Stack and Callback Queue in JS",permalink:"/blog/call-stack-and-callback-queue-in-js"},nextItem:{title:"Scheduling in JS",permalink:"/blog/scheduling-in-js"}},c={authorsImageUrls:[void 0]},u=[];function m(n){const t={p:"p",...(0,a.R)(),...n.components};return(0,o.jsx)(t.p,{children:"Asynchronous programming is a way of writing non-blocking code in JavaScript. In traditional programming, code runs sequentially from top to bottom, which means that one line of code is executed at a time. However, when dealing with long-running tasks such as network requests or file I/O, synchronous programming can lead to unresponsive applications."})}function l(n={}){const{wrapper:t}={...(0,a.R)(),...n.components};return t?(0,o.jsx)(t,{...n,children:(0,o.jsx)(m,{...n})}):m(n)}},8453:(n,t,e)=>{e.d(t,{R:()=>s,x:()=>i});var o=e(6540);const a={},r=o.createContext(a);function s(n){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function i(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),o.createElement(r.Provider,{value:t},n.children)}}}]);