"use strict";(self.webpackChunksonnet_docs=self.webpackChunksonnet_docs||[]).push([[3713],{3602:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>i,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var s=o(4848),t=o(8453);const r={slug:"operators-and-expressions-in-js",title:"Operators and Expressions in JS",authors:{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4"},tags:["javascript"]},a="Operators and Expressions in JS",l={permalink:"/blog/operators-and-expressions-in-js",editUrl:"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/4-operators-and-expressions-in-js.md",source:"@site/blog/javascript/4-operators-and-expressions-in-js.md",title:"Operators and Expressions in JS",description:"JavaScript is a powerful programming language that allows you to create dynamic and interactive web pages. One of the key features of JavaScript is its use of operators and expressions.",date:"2024-05-15T13:15:30.540Z",tags:[{label:"javascript",permalink:"/blog/tags/javascript"}],readingTime:5.31,hasTruncateMarker:!0,authors:[{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4",imageURL:"https://avatars.githubusercontent.com/u/58030954?v=4"}],frontMatter:{slug:"operators-and-expressions-in-js",title:"Operators and Expressions in JS",authors:{name:"Talha Mujahid",title:"Software Engineer",url:"https://github.com/htmujahid",image_url:"https://avatars.githubusercontent.com/u/58030954?v=4",imageURL:"https://avatars.githubusercontent.com/u/58030954?v=4"},tags:["javascript"]},unlisted:!1,prevItem:{title:"Control Flow Statements in JS",permalink:"/blog/control-flow-statements-in-js"},nextItem:{title:"Commenting and Debugging in JS",permalink:"/blog/commenting-and-debugging-in-js"}},i={authorsImageUrls:[void 0]},c=[];function u(n){const e={code:"code",h1:"h1",p:"p",pre:"pre",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:"JavaScript is a powerful programming language that allows you to create dynamic and interactive web pages. One of the key features of JavaScript is its use of operators and expressions."}),"\n",(0,s.jsx)(e.h1,{id:"operators-in-js",children:"Operators in JS"}),"\n",(0,s.jsx)(e.p,{children:"Operators in JavaScript are used to perform various operations on values. JavaScript has several types of operators, including arithmetic, comparison, logical, assignment, bitwise, and conditional operators."}),"\n",(0,s.jsx)(e.h1,{id:"arithmetic-operators",children:"Arithmetic Operators"}),"\n",(0,s.jsx)(e.p,{children:"Arithmetic operators are used to perform mathematical calculations on numeric values. These operators include addition (+), subtraction (-), multiplication (*), division (/), and modulus (%)."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"let num1 = 10;  \nlet num2 = 20;  \n// Addition  \nlet sum = num1 + num2;  \nconsole.log(sum); // 30  \n// Subtraction  \nlet difference = num1 - num2;  \nconsole.log(difference); // -10  \n// Multiplication  \nlet product = num1 * num2;  \nconsole.log(product); // 200  \n// Division  \nlet quotient = num2 / num1;  \nconsole.log(quotient); // 2  \n// Modulo (Remainder)  \nlet remainder = num2 % num1;  \nconsole.log(remainder); // 0  \n// Increment  \nnum1++;  \nconsole.log(num1); // 11  \n// Decrement  \nnum2--;  \nconsole.log(num2); // 19\n"})}),"\n",(0,s.jsx)(e.h1,{id:"comparison-operators",children:"Comparison Operators"}),"\n",(0,s.jsxs)(e.p,{children:["Comparison operators are used to compare two values and return a Boolean value of true or false. These operators include ",(0,s.jsx)(e.code,{children:"=="}),", ",(0,s.jsx)(e.code,{children:"!="}),", ",(0,s.jsx)(e.code,{children:">"}),", ",(0,s.jsx)(e.code,{children:"<"}),", ",(0,s.jsx)(e.code,{children:">="}),", and ",(0,s.jsx)(e.code,{children:"<="}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"let num1 = 10;  \nlet num2 = 20;  \n// Equal to  \nconsole.log(num1 == num2); // false  \n// Not equal to  \nconsole.log(num1 != num2); // true  \n// Greater than  \nconsole.log(num2 > num1); // true  \n// Less than  \nconsole.log(num1 < num2); // true  \n// Greater than or equal to  \nconsole.log(num2 >= num1); // true  \n// Less than or equal to  \nconsole.log(num1 <= num2); // true\n"})}),"\n",(0,s.jsx)(e.h1,{id:"logical-operators",children:"Logical Operators"}),"\n",(0,s.jsx)(e.p,{children:"Logical operators are used to evaluate two or more expressions and return a Boolean value of true or false. These operators include &&, ||, and !."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"let num1 = 10;  \nlet num2 = 20;  \nlet num3 = 30;  \n// Logical AND  \nconsole.log(num1 < num2 && num2 < num3); // true  \n// Logical OR  \nconsole.log(num1 < num2 || num2 > num3); // true  \n// Logical NOT  \nconsole.log(!(num1 == num2)); // true\n"})}),"\n",(0,s.jsx)(e.h1,{id:"assignment-operators",children:"Assignment Operators"}),"\n",(0,s.jsxs)(e.p,{children:["Assignment operators are used to assign values to variables. These operators include ",(0,s.jsx)(e.code,{children:"="}),", ",(0,s.jsx)(e.code,{children:"+="}),", ",(0,s.jsx)(e.code,{children:"-="}),", ",(0,s.jsx)(e.code,{children:"*="}),", ",(0,s.jsx)(e.code,{children:"/="}),", ",(0,s.jsx)(e.code,{children:"%="}),", ",(0,s.jsx)(e.code,{children:"<<="}),", ",(0,s.jsx)(e.code,{children:">>="}),", ",(0,s.jsx)(e.code,{children:"&="}),", ",(0,s.jsx)(e.code,{children:"^="}),", and ",(0,s.jsx)(e.code,{children:"|="}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"let num1 = 10;  \nlet num2 = 20;  \n// Assignment  \nnum1 = num2;  \nconsole.log(num1); // 20  \n// Addition assignment  \nnum1 += num2;  \nconsole.log(num1); // 40  \n// Subtraction assignment  \nnum1 -= num2;  \nconsole.log(num1); // 20  \n// Multiplication assignment  \nnum1 *= num2;  \nconsole.log(num1); // 400  \n// Division assignment  \nnum1 /= num2;  \nconsole.log(num1); // 20  \n// Modulo (Remainder) assignment  \nnum1 %= num2;  \nconsole.log(num1); // 0\n"})}),"\n",(0,s.jsx)(e.h1,{id:"bitwise-operators",children:"Bitwise Operators"}),"\n",(0,s.jsxs)(e.p,{children:["Bitwise operators are used to perform bitwise operations on values. These operators include ",(0,s.jsx)(e.code,{children:"&"}),", ",(0,s.jsx)(e.code,{children:"|"}),", ",(0,s.jsx)(e.code,{children:"^"}),", ",(0,s.jsx)(e.code,{children:"~"}),", ",(0,s.jsx)(e.code,{children:"<<"}),", and ",(0,s.jsx)(e.code,{children:">>"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"let num1 = 10;  \nlet num2 = 20;  \n// Bitwise AND  \nconsole.log(num1 & num2); // 0  \n// Bitwise OR  \nconsole.log(num1 | num2); // 30  \n// Bitwise XOR  \nconsole.log(num1 ^ num2); // 30  \n// Bitwise NOT  \nconsole.log(~num1); // -11  \n// Left shift  \nconsole.log(num1 << 1); // 20  \n// Right shift  \nconsole.log(num1 >> 1); // 5\n"})}),"\n",(0,s.jsx)(e.h1,{id:"conditional-operator",children:"Conditional Operator"}),"\n",(0,s.jsx)(e.p,{children:"Conditional operators are used to assign a value to a variable based on a condition. The syntax for the conditional operator is as follows:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:'let age = 20;  \nlet status = (age >= 18) ? "adult" : "minor";  \nconsole.log(status); // "adult"\n'})}),"\n",(0,s.jsx)(e.h1,{id:"nullish-coalescing-operator",children:"Nullish Coalescing Operator"}),"\n",(0,s.jsx)(e.p,{children:"The Nullish Coalescing Operator (??) is used to check if a value is null or undefined, and if it is, it returns a default value instead."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"let num1 = 10;  \nlet num2 = null;  \n// Using the Nullish Coalescing Operator  \nlet result = num1 ?? 20;  \nconsole.log(result); // 10  \nresult = num2 ?? 20;  \nconsole.log(result); // 20\n"})}),"\n",(0,s.jsx)(e.h1,{id:"expressions-in-js",children:"Expressions in JS"}),"\n",(0,s.jsx)(e.p,{children:"Expressions in JavaScript are combinations of values, variables, and operators that are evaluated to produce a value. There are several types of expressions in JavaScript, including arithmetic expressions, string expressions, Boolean expressions, and object expressions."}),"\n",(0,s.jsx)(e.h1,{id:"arithmetic-expressions",children:"Arithmetic Expressions"}),"\n",(0,s.jsx)(e.p,{children:"Arithmetic expressions are expressions that use arithmetic operators to perform mathematical calculations on numeric values."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"let num1 = 10;  \nlet num2 = 20;  \n// Addition  \nlet result1 = num1 + num2;  \nconsole.log(result1); // 30  \n// Subtraction  \nlet result2 = num1 - num2;  \nconsole.log(result2); // -10  \n// Multiplication  \nlet result3 = num1 * num2;  \nconsole.log(result3); // 200  \n// Division  \nlet result4 = num1 / num2;  \nconsole.log(result4); // 0.5  \n// Modulo (Remainder)  \nlet result5 = num1 % num2;  \nconsole.log(result5); // 10\n"})}),"\n",(0,s.jsx)(e.h1,{id:"string-expressions",children:"String Expressions"}),"\n",(0,s.jsx)(e.p,{children:"String expressions are expressions that concatenate two or more strings together using the + operator."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:'let firstName = "John";  \nlet lastName = "Doe";  \n// Concatenation  \nlet fullName = firstName + " " + lastName;  \nconsole.log(fullName); // "John Doe"  \n// String Length  \nlet nameLength = fullName.length;  \nconsole.log(nameLength); // 8  \n// Accessing Characters  \nlet firstChar = fullName[0];  \nconsole.log(firstChar); // "J"  \n// Substring  \nlet firstNameSubstring = fullName.substring(0, 4);  \nconsole.log(firstNameSubstring); // "John"  \n// Replacing Characters  \nlet replacedName = fullName.replace("Doe", "Smith");  \nconsole.log(replacedName); // "John Smith"\n'})}),"\n",(0,s.jsx)(e.h1,{id:"boolean-expressions",children:"Boolean Expressions"}),"\n",(0,s.jsx)(e.p,{children:"Boolean expressions are expressions that evaluate to either true or false."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"let num1 = 10;  \nlet num2 = 20;  \n// Greater Than  \nlet greaterThan = num2 > num1;  \nconsole.log(greaterThan); // true  \n// Less Than  \nlet lessThan = num1 < num2;  \nconsole.log(lessThan); // true  \n// Greater Than or Equal To  \nlet greaterThanOrEqualTo = num1 >= num2;  \nconsole.log(greaterThanOrEqualTo); // false  \n// Less Than or Equal To  \nlet lessThanOrEqualTo = num2 <= num1;  \nconsole.log(lessThanOrEqualTo); // false  \n// Equal To  \nlet equalTo = num1 == num2;  \nconsole.log(equalTo); // false  \n// Not Equal To  \nlet notEqualTo = num1 != num2;  \nconsole.log(notEqualTo); // true\n"})}),"\n",(0,s.jsx)(e.p,{children:"Object expressions are expressions that create a new object using the new operator."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:'let person = {  \n  firstName: "John",  \n  lastName: "Doe",  \n  age: 30,  \n  hobbies: ["reading", "swimming", "hiking"],  \n  address: {  \n    street: "123 Main St",  \n    city: "Anytown",  \n    state: "CA",  \n    zip: "12345"  \n  },  \n  isStudent: false  \n};  \nconsole.log(person.firstName); // "John"  \nconsole.log(person.age); // 30  \nconsole.log(person.hobbies[1]); // "swimming"  \nconsole.log(person.address.city); // "Anytown"  \nconsole.log(person.isStudent); // false  \n// Adding a new property to the object  \nperson.email = "john.doe@example.com";  \nconsole.log(person.email); // "john.doe@example.com"  \n// Modifying an existing property of the object  \nperson.age = 35;  \nconsole.log(person.age); // 35  \n// Deleting a property of the object  \ndelete person.isStudent;  \nconsole.log(person.isStudent); // undefined\n'})}),"\n",(0,s.jsx)(e.p,{children:"Operators and expressions are essential components of JavaScript programming. By understanding how operators and expressions work in JS, you can create powerful and dynamic web pages that are sure to impress your users."})]})}function m(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(u,{...n})}):u(n)}},8453:(n,e,o)=>{o.d(e,{R:()=>a,x:()=>l});var s=o(6540);const t={},r=s.createContext(t);function a(n){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);