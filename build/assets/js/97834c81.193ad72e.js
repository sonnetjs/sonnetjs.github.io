"use strict";(self.webpackChunksonnet_docs=self.webpackChunksonnet_docs||[]).push([[6302],{7066:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>a,frontMatter:()=>p,metadata:()=>i,toc:()=>l});var o=t(4848),s=t(8453);const p={sidebar_position:2},r="Props",i={id:"core/component/props",title:"Props",description:"Props are used to pass data from a parent component to a child component. In Sonnet JS, there are multiple ways to pass props to a component.",source:"@site/docs/core/component/props.md",sourceDirName:"core/component",slug:"/core/component/props",permalink:"/docs/core/component/props",draft:!1,unlisted:!1,editUrl:"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/docs/core/component/props.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docSidebar",previous:{title:"Methods",permalink:"/docs/core/component/methods"},next:{title:"Lifecycle",permalink:"/docs/core/component/lifecycle"}},c={},l=[{value:"Built-in Props",id:"built-in-props",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h1,{id:"props",children:"Props"}),"\n",(0,o.jsx)(e.p,{children:"Props are used to pass data from a parent component to a child component. In Sonnet JS, there are multiple ways to pass props to a component."}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsxs)(e.strong,{children:["Using the ",(0,o.jsx)(e.code,{children:"props"})," attribute"]}),": You can pass props to a component by setting the ",(0,o.jsx)(e.code,{children:"props"})," attribute on the component instance. The ",(0,o.jsx)(e.code,{children:"props"})," attribute is an object that contains key-value pairs of props."]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",metastring:'title="MyComponent.ts"',children:"import { SonnetComponent, $component } from 'sonnet';\n\nclass MyComponent extends SonnetComponent {\n  props: { title: string };\n\n  constructor(props: { title: string }) {\n    super();\n    this.props = props;\n  }\n\n  get() {\n    return `\n      <div>\n        <h1>${this.props.title}</h1>\n      </div>\n    `;\n  }\n}\n\nconst myComponent = $component(MyComponent);\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",metastring:'title="App.ts"',children:"import { SonnetComponent, $component } from 'sonnet';\nimport MyComponent from './MyComponent';\n\nclass App extends SonnetComponent {\n  get() {\n    return `\n      <div>\n        ${myComponent({ title: 'Hello, World!' }).get()}\n      </div>\n    `;\n  }\n}\n\nexport default $component(App);\n"})}),"\n",(0,o.jsxs)(e.ol,{start:"2",children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsxs)(e.strong,{children:["Using the ",(0,o.jsx)(e.code,{children:"props"})," method"]}),": You can pass props to a component by defining a ",(0,o.jsx)(e.code,{children:"props"})," method that returns an object containing the props. The ",(0,o.jsx)(e.code,{children:"props"})," method is called whenever the component is rendered."]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",metastring:'title="MyComponent.ts"',children:"import { SonnetComponent, $component } from 'sonnet';\n\nclass MyComponent extends SonnetComponent {\n  _props: { title: string };\n\n  props(props?: { title: string }) {\n    if(props) {\n      this._props = props;\n      return this;\n    }\n    return this._props;\n  }\n\n  get() {\n    return `\n      <div>\n        <h1>${this.props().title}</h1>\n      </div>\n    `;\n  }\n}\n\nexport default $component(MyComponent);\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",metastring:'title="App.ts"',children:"import { SonnetComponent, $component } from 'sonnet';\n\nclass App extends SonnetComponent {\n  get() {\n    return `\n      <div>\n        ${MyComponent().props({ title: 'Hello, World!' }).get()}\n      </div>\n    `;\n  }\n}\n"})}),"\n",(0,o.jsxs)(e.ol,{start:"3",children:["\n",(0,o.jsx)(e.li,{children:"You can also pass props directly to your get method. This is useful in case, when component does not need to store props for later use."}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",metastring:'title="MyComponent.ts"',children:"import { SonnetComponent, $component } from 'sonnet';\n\nclass MyComponent extends SonnetComponent {\n  get(props: { title: string }) {\n    return `\n      <div>\n        <h1>${props.title}</h1>\n      </div>\n    `;\n  }\n}\n\nexport default $component(MyComponent);\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",metastring:'title="App.ts"',children:"import { SonnetComponent, $component } from 'sonnet';\n\nclass App extends SonnetComponent {\n  get() {\n    return `\n      <div>\n        ${MyComponent().get({ title: 'Hello, World!' })}\n      </div>\n    `;\n  }\n}\n\nexport default $component(App);\n"})}),"\n",(0,o.jsxs)(e.ol,{start:"4",children:["\n",(0,o.jsx)(e.li,{children:"Another approach can be using separate method to set individual props."}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",metastring:'title="MyComponent.ts"',children:"import { SonnetComponent, $component } from 'sonnet';\n\nclass MyComponent extends SonnetComponent {\n  title: string;\n\n  setTitle(title: string) {\n    this.title = title;\n    return this;\n  }\n\n  get() {\n    return `\n      <div>\n        <h1>${this.title}</h1>\n      </div>\n    `;\n  }\n}\n\nexport default $component(MyComponent);\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",metastring:'title="App.ts"',children:"import { SonnetComponent, $component } from 'sonnet';\n\nclass App extends SonnetComponent {\n  get() {\n    return `\n      <div>\n        ${MyComponent().setTitle('Hello, World').get()}\n      </div>\n    `;\n  }\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"built-in-props",children:"Built-in Props"}),"\n",(0,o.jsx)(e.p,{children:"Here are some of the built-in props that are available in SonnetComponent:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"children"}),": The children prop is used to pass child components to a parent component. It can be a single child or an array of children."]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",metastring:'title="MyComponent.ts"',children:"import { SonnetComponent, $component } from 'sonnet';\n\nclass MyComponent extends SonnetComponent {\n\n  get() {\n    return `\n      <div>\n        ${this._children}\n      </div>\n    `;\n  }\n}\n\nexport default $component(MyComponent);\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",metastring:'title="App.ts"',children:"import { SonnetComponent, $component } from 'sonnet';\n\nclass App extends SonnetComponent {\n  get() {\n    return `\n      <div>\n        ${MyComponent().children([\n          ChildComponent1().get()\n        ]).get()}\n      </div>\n    `;\n  }\n}\n\nexport default $component(App);\n"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"index"}),": The index prop is used to pass the index of a child component to a parent component. It is useful when rendering a list of child components."]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",metastring:'title="MyComponent.ts"',children:"import { SonnetComponent, $component } from 'sonnet';\n\nclass MyComponent extends SonnetComponent {\n\n  get() {\n    return `\n      <div>\n        ${this._index}\n      </div>\n    `;\n  }\n}\n\nexport default $component(MyComponent);\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",metastring:'title="App.ts"',children:"import { SonnetComponent, $component } from 'sonnet';\n\nclass App extends SonnetComponent {\n  get() {\n    return `\n      <div>\n        ${MyComponent().index(1).get()}\n      </div>\n    `;\n  }\n}\n\nexport default $component(App);\n"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"id"}),": The id prop is used to pass the id of a child component to a parent component. It is useful when you want to manipulate a specific child component from the parent component."]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",metastring:'title="MyComponent.ts"',children:"import { SonnetComponent, $component } from 'sonnet';\n\nclass MyComponent extends SonnetComponent {\n\n  get() {\n    return `\n      <div>\n        ${this._id}\n      </div>\n    `;\n  }\n}\n\nexport default $component(MyComponent);\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",metastring:'title="App.ts"',children:"import { SonnetComponent, $component } from 'sonnet';\n\nclass App extends SonnetComponent {\n  get() {\n    return `\n      <div>\n        ${MyComponent().id(1).get()}\n      </div>\n    `;\n  }\n}\n\nexport default $component(App);\n"})})]})}function a(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>i});var o=t(6540);const s={},p=o.createContext(s);function r(n){const e=o.useContext(p);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),o.createElement(p.Provider,{value:e},n.children)}}}]);