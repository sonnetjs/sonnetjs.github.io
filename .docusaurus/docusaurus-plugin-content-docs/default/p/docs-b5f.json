{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docSidebar":[{"type":"category","label":"Getting Started","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Overview","href":"/docs/getting-started/overview","docId":"getting-started/overview","unlisted":false},{"type":"link","label":"Quick Start","href":"/docs/getting-started/quick-start","docId":"getting-started/quick-start","unlisted":false}],"href":"/docs/category/getting-started"},{"type":"category","label":"Core","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Installation","href":"/docs/core/installation","docId":"core/installation","unlisted":false},{"type":"category","label":"Component","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/docs/core/component/introduction","docId":"core/component/introduction","unlisted":false},{"type":"link","label":"Methods","href":"/docs/core/component/methods","docId":"core/component/methods","unlisted":false},{"type":"link","label":"Props","href":"/docs/core/component/props","docId":"core/component/props","unlisted":false},{"type":"link","label":"Lifecycle","href":"/docs/core/component/lifecycle","docId":"core/component/lifecycle","unlisted":false}],"href":"/docs/category/component"},{"type":"link","label":"Application","href":"/docs/core/application","docId":"core/application","unlisted":false},{"type":"link","label":"SSR","href":"/docs/core/ssr","docId":"core/ssr","unlisted":false},{"type":"link","label":"Plugin","href":"/docs/core/plugin","docId":"core/plugin","unlisted":false}],"href":"/docs/category/core"},{"type":"category","label":"Sonnet DOM","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"HTML","href":"/docs/dom/html","docId":"dom/html","unlisted":false},{"type":"link","label":"Sonnet DOM","href":"/docs/category/sonnet-dom","className":"hidden","docId":"dom/index","unlisted":false},{"type":"link","label":"MathML","href":"/docs/dom/mathml","docId":"dom/mathml","unlisted":false},{"type":"link","label":"SVG","href":"/docs/dom/svg","docId":"dom/svg","unlisted":false}],"href":"/docs/category/sonnet-dom"},{"type":"category","label":"Routing","collapsible":false,"collapsed":false,"items":[{"type":"link","label":"Setup","href":"/docs/routing/setup","docId":"routing/setup","unlisted":false},{"type":"link","label":"History","href":"/docs/routing/history","docId":"routing/history","unlisted":false},{"type":"link","label":"Router","href":"/docs/routing/router","docId":"routing/router","unlisted":false},{"type":"link","label":"Advanced","href":"/docs/routing/Advanced","docId":"routing/Advanced","unlisted":false}],"href":"/docs/category/routing"}]},"docs":{"core/application":{"id":"core/application","title":"Application","description":"The application instance is the main entry point for a Sonnet JS application. It is created using the createApp function and is responsible for managing the lifecycle of the application. The application instance is used to mount components, handle events, and manage the state of the application.","sidebar":"docSidebar"},"core/component/introduction":{"id":"core/component/introduction","title":"Introduction","description":"A component is a reusable piece of UI that can be composed with other components to create complex user interfaces. Components in Sonnet JS are created extending the SonnetComponent class, which provides a simple and intuitive API for building UI components.","sidebar":"docSidebar"},"core/component/lifecycle":{"id":"core/component/lifecycle","title":"Lifecycle","description":"Sonnet JS components lifecycle is bit different from other frameworks. There are not typical lifecycle methods like componentDidMount, componentDidUpdate, etc. Instead, Sonnet JS handles all this stuff in a different way. In Sonnet JS, lifecycle is maintained at app level instead of component level. What it means is that component is rendered (mounted) only once (single page environment). As long as the page is not changed, the component will not be re-rendered. This is the reason why there is no need for lifecycle methods like componentDidMount, componentDidUpdate, etc.","sidebar":"docSidebar"},"core/component/methods":{"id":"core/component/methods","title":"Methods","description":"Methods are functions that are defined inside a class and are used to perform some action or computation. In Sonnet JS, methods are used to define the behavior of a component, such as handling interactivity, fetching data, or updating the UI.","sidebar":"docSidebar"},"core/component/props":{"id":"core/component/props","title":"Props","description":"Props are used to pass data from a parent component to a child component. In Sonnet JS, there are multiple ways to pass props to a component.","sidebar":"docSidebar"},"core/installation":{"id":"core/installation","title":"Installation","description":"Requirements","sidebar":"docSidebar"},"core/plugin":{"id":"core/plugin","title":"Plugin","description":"Sonnet JS provides a plugin system that allows you to extend the core functionality of the framework. Plugins can be used to add new features, modify existing features, or integrate third-party libraries. This guide will show you how to create and use plugins in Sonnet JS.","sidebar":"docSidebar"},"core/ssr":{"id":"core/ssr","title":"SSR","description":"Server-side rendering (SSR) is a feature that allows you to render your application on the server and send the HTML to the client. This can be useful for SEO, faster initial page loads, and more. Sonnet JS utilizes vite core APIs to provide SSR support.","sidebar":"docSidebar"},"dom/html":{"id":"dom/html","title":"HTML","description":"Sonnet HTML is a library that provides a set of utilities for working with HTML elements.","sidebar":"docSidebar"},"dom/index":{"id":"dom/index","title":"Sonnet DOM","description":"Sonnet DOM is a library that provides a set of utilities for working with the DOM in Sonnet JS. It provides a different way to work with the DOM compared to traditional DOM manipulation. You can use Sonnet DOM outside of Sonnet JS, but it is designed to work seamlessly with Sonnet JS. You can think it as a type-safe way to work with the DOM.","sidebar":"docSidebar"},"dom/mathml":{"id":"dom/mathml","title":"MathML","description":"MathML is a markup language for describing mathematical notation and capturing both its structure and content. It aims to be a universal format for representing mathematics on the web, and is supported by most modern web browsers. Sonnet MathML is a library that provides a set of utilities for working with MathML elements.","sidebar":"docSidebar"},"dom/svg":{"id":"dom/svg","title":"SVG","description":"Sonnet SVG is a library that provides a set of utilities for working with SVG elements. It makes it easy and intuitive to create SVG elements in a type-safe way.","sidebar":"docSidebar"},"getting-started/overview":{"id":"getting-started/overview","title":"Overview","description":"Sonnet JS is a ligtweight, fast and easy to use JavaScript framework for building modern web applications. It is more or less a way to structure your Vanilla JS code in a way that is more maintainable and scalable. It is not a full-fledged framework like Angular or React, but it provides a solid foundation for building modern web applications. The goal of Sonnet JS is to provide a simple and easy to use framework that allows you to build modern web applications without having to learn a lot of new concepts or technologies.","sidebar":"docSidebar"},"getting-started/quick-start":{"id":"getting-started/quick-start","title":"Quick Start","description":"Let's get started with Sonnet JS by creating a simple application. In this tutorial, we will create a new Sonnet JS project, create a new component, and render it in the browser.","sidebar":"docSidebar"},"routing/Advanced":{"id":"routing/Advanced","title":"Advanced","description":"This section covers some advanced topics related to routing in Sonnet JS.","sidebar":"docSidebar"},"routing/history":{"id":"routing/history","title":"History","description":"The History class is used to manage the browser history in Sonnet JS. It provides a simple and easy-to-use API for interacting with the browser history, including navigating to different URLs, listening for changes to the history stack, and programmatically manipulating the history stack.","sidebar":"docSidebar"},"routing/router":{"id":"routing/router","title":"Router","description":"The Router class is used to manage the routing in Sonnet JS. It provides a simple and easy-to-use API for defining and managing routes in your application, including matching URLs to routes, rendering components based on the matched route, and navigating between routes. it provides createRouter() funcion to create instance of router class.","sidebar":"docSidebar"},"routing/setup":{"id":"routing/setup","title":"Setup","description":"Routing in one of the most important parts of any web application. It is the mechanism that allows you to map URLs to controllers and actions. This is a very important concept to understand because it is the foundation of how web applications work. Sonnet JS provides a very simple and easy to use routing system that allows you to define routes using a simple and easy to understand syntax.","sidebar":"docSidebar"}}}}