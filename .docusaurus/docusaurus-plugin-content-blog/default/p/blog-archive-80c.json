{"archive":{"blogPosts":[{"id":"browser-data-storage-in-js","metadata":{"permalink":"/blog/browser-data-storage-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/29-browser-data-storage-in-js.md","source":"@site/blog/javascript/29-browser-data-storage-in-js.md","title":"Browser Data Storage in JS","description":"JavaScript provides various options for storing data in the browser. These storage options are used to store data temporarily or permanently. In this article, we will explore different ways of storing data in the browser using JavaScript.","date":"2024-05-15T13:15:30.998Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":2.89,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"browser-data-storage-in-js","title":"Browser Data Storage in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"nextItem":{"title":"WebSocket in JS","permalink":"/blog/websocket-in-js"}},"content":"JavaScript provides various options for storing data in the browser. These storage options are used to store data temporarily or permanently. In this article, we will explore different ways of storing data in the browser using JavaScript.\n<!-- truncate -->\n\n## Cookies\n\nCookies are small pieces of data that are stored in the browser. Cookies can be used to store user preferences, login information, and other data that needs to be persisted. Cookies can be set with an expiration date, after which they are automatically deleted.\n\nCookies can be created and accessed using the `document.cookie` property in JavaScript.\n\n```js\n// Setting a Cookie  \ndocument.cookie = 'key=value';  \n// Retrieving a Cookie  \nlet username = document.cookie.split('=')[1]; // get the value after the '=' sign\n```\n\n## Local Storage\n\nLocal Storage is a type of storage that allows storing data in the browser permanently. The data stored in Local Storage remains even after the browser is closed. It can be used to store user preferences, login information, and other data that needs to be persisted.\n\nLocal Storage is implemented using the `localStorage` object in JavaScript. Data can be stored in Local Storage using the `setItem()` method and retrieved using the `getItem()` method.\n\n```js\n// Storing Data in Local Storage  \nlocalStorage.setItem('key', 'value');  \n// Retrieving Data from Local Storage  \nconst value = localStorage.getItem('key');\n```\n\n## Session Storage\n\nSession Storage is similar to Local Storage but it stores data only for the duration of the session. Session Storage is cleared when the browser is closed or the session ends. It is useful for storing data that needs to be accessed during a session, such as shopping cart items or form data.\n\nSession Storage is implemented using the `sessionStorage` object in JavaScript. Data can be stored in Session Storage using the `setItem()` method and retrieved using the `getItem()` method.\n\n```js\n// Storing Data in Session Storage  \nsessionStorage.setItem('key', 'value');  \n// Retrieving Data from Session Storage  \nconst value = sessionStorage.getItem('key');\n```\n\n## IndexedDB\n\nTo use IndexedDB, you need to first open a connection to a database. Here’s an example of opening a database connection:\n\n```js\nlet request = indexedDB.open(\"myDatabase\", 1);  \nrequest.onerror = function(event) {  \n  // handle errors  \n};  \nrequest.onupgradeneeded = function(event) {  \n  let db = event.target.result;  \n  let objectStore = db.createObjectStore(\"users\", { keyPath: \"id\" });  \n  // create indexes if needed  \n};  \nrequest.onsuccess = function(event) {  \n  let db = event.target.result;  \n  // use the database  \n};\n```\n\nOnce you have opened a connection to the database, you can create object stores to store your data. Here’s an example of adding a record to an object store:\n\n```js\nlet transaction = db.transaction([\"users\"], \"readwrite\");  \nlet objectStore = transaction.objectStore(\"users\");  \nlet user = { id: 1, username: \"John\" };  \nlet request = objectStore.add(user);  \nrequest.onerror = function(event) {  \n  // handle errors  \n};  \nrequest.onsuccess = function(event) {  \n  // record added successfully  \n};\n```\n\nTo retrieve data from an object store, you can use the `**objectStore.get()**` method:\n\n```js\nlet transaction = db.transaction([\"users\"], \"readonly\");  \nlet objectStore = transaction.objectStore(\"users\");  \nlet request = objectStore.get(1);  \nrequest.onerror = function(event) {  \n  // handle errors  \n};  \nrequest.onsuccess = function(event) {  \n  let user = request.result;  \n  // use the user object  \n};\n```\n\nIn conclusion, JavaScript provides various options for storing data in the browser. Local Storage and Session Storage can be used to store data permanently or temporarily, respectively. Cookies are another option for storing data in the browser. The choice of storage option depends on the type of data that needs to be persisted and the duration for which it needs to be persisted."},{"id":"websocket-in-js","metadata":{"permalink":"/blog/websocket-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/28-websocket-in-js.md","source":"@site/blog/javascript/28-websocket-in-js.md","title":"WebSocket in JS","description":"WebSocket is a protocol that allows for real-time communication between client and server over a single, long-lived connection. Unlike HTTP, which uses a request-response model, WebSocket enables bi-directional communication between the client and server in real-time.","date":"2024-05-15T13:15:30.964Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":1.635,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"websocket-in-js","title":"WebSocket in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Browser Data Storage in JS","permalink":"/blog/browser-data-storage-in-js"},"nextItem":{"title":"Working with APIs in JS","permalink":"/blog/working-with-apis-in-js"}},"content":"WebSocket is a protocol that allows for real-time communication between client and server over a single, long-lived connection. Unlike HTTP, which uses a request-response model, WebSocket enables bi-directional communication between the client and server in real-time.\n<!-- truncate -->\n\nJavaScript is a popular language for building web applications that require real-time communication, making WebSocket an important technology to learn for web developers.\n\nTo use WebSocket in JS, you first need to create a WebSocket object using the WebSocket constructor, passing in the URL of the WebSocket server as a parameter. For example:\n\n```js\nconst socket = new WebSocket('ws://localhost:8080');\n```\n\nOnce you have created a WebSocket object, you need to add event listeners to handle the WebSocket events. Here are the events that we can handle:\n\n*   `**open**`: This event is fired when the WebSocket connection is established.\n*   `**message**`: This event is fired when a message is received from the WebSocket server.\n*   `**error**`: This event is fired when an error occurs in the WebSocket connection.\n*   `**close**`: This event is fired when the WebSocket connection is closed.\n\n```js\nsocket.addEventListener('open', (event) => {  \n  console.log('WebSocket connection established');  \n});  \nsocket.addEventListener('message', (event) => {  \n  console.log('Received message:', event.data);  \n});  \nsocket.addEventListener('close', (event) => {  \n  console.log('WebSocket connection closed');  \n});  \nsocket.addEventListener('error', (event) => {  \n  console.error('WebSocket error:', event);  \n});\n```\n\nTo send a message from the client to the server, you can use the `send()` method on the WebSocket object:\n\n```js\nconst message = 'Hello, WebSocket!';  \nsocket.send(message);\n```\n\nTo receive data from the server, we need to handle the `**message**` event of the WebSocket object. Here's an example of how to receive data from the server:\n\n```js\nsocket.addEventListener('message', function(event) {  \n  const message = event.data;  \n  console.log('Message received: ' + message);  \n});\n```\n\nOn the server-side, you can use libraries like `ws` or `socket.io` to handle WebSocket connections in Node.js.\n\nWebSocket is a powerful technology that enables real-time communication between client and server. With JavaScript, you can easily create WebSocket connections and handle incoming messages and errors."},{"id":"working-with-apis-in-js","metadata":{"permalink":"/blog/working-with-apis-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/27-working-with-apis-in-js.md","source":"@site/blog/javascript/27-working-with-apis-in-js.md","title":"Working with APIs in JS","description":"Working with APIs in JavaScript involves making requests to an external server to retrieve or send data. In this blog post, we will discuss the basics of working with APIs in JavaScript, including how to make API requests using different methods and handling responses.","date":"2024-05-15T13:15:30.944Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":5.025,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"working-with-apis-in-js","title":"Working with APIs in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"WebSocket in JS","permalink":"/blog/websocket-in-js"},"nextItem":{"title":"Handling Forms in JS","permalink":"/blog/handling-forms-in-js"}},"content":"Working with APIs in JavaScript involves making requests to an external server to retrieve or send data. In this blog post, we will discuss the basics of working with APIs in JavaScript, including how to make API requests using different methods and handling responses.\n<!-- truncate -->\n\nFetch Request\n=============\n\nFetch API is a modern interface that allows us to make HTTP requests in JavaScript using the fetch() method. It provides a more flexible and powerful alternative to the older XMLHttpRequest (XHR) object.\n\nFetch Syntax\n============\n\nThe basic syntax of fetch() method is as follows:\n\n```js\nfetch(url, options);\n```\n\nHere, url is the URL of the resource which you want to fetch and options is an optional object that can include properties like method, headers, body, mode, cache, credentials, redirect, referrer, integrity, and keepalive.\n\nFetch Example\n=============\n\nHere is an example of fetching data from a URL and parsing the response as JSON:\n\n```js\nfetch('<https://jsonplaceholder.typicode.com/users>')  \n  .then(response => response.json())  \n  .then(data => console.log(data))  \n  .catch(error => console.error(error));\n```\n\nThis code sends a GET request to the given URL and returns a Promise that resolves to the response object. The response.json() method parses the response as JSON and returns another Promise that resolves to the parsed data.\n\nFetch Options\n=============\n\nThe fetch() method can accept a second argument, an options object, which can be used to customize the request. Some of the most common options are:\n\n*   method: HTTP method to use for the request (GET, POST, PUT, DELETE, etc.)\n*   headers: an object containing any headers to include in the request\n*   body: the data to send with the request\n*   mode: the mode of the request (cors, no-cors, same-origin, navigate)\n*   cache: the cache mode of the request (default, reload, no-cache)\n*   credentials: the authentication credentials to include (omit, same-origin, include)\n*   redirect: the mode of the redirect (follow, error, manual)\n*   referrer: the referrer of the request\n*   integrity: the integrity hash of the resource\n*   keepalive: a boolean indicating whether or not to send keepalive packets for the request\n\nBasic Usage\n===========\n\nTo make a simple GET request using the Fetch API, you can use the `**fetch()**` method:\n\n```js\nfetch('<https://api.example.com/data>')  \n  .then(response => {  \n    if (!response.ok) {  \n      throw new Error('Network response was not ok');  \n    }  \n    return response.json();  \n  })  \n  .then(data => {  \n    console.log(data);  \n  })  \n  .catch(error => {  \n    console.error('There was a problem with the fetch operation:', error);  \n  });\n```\n\nRequest Options\n===============\n\nThe `**fetch()**` method also accepts an optional second parameter, which is an options object that allows you to configure the request. Here's an example:\n\n```js\nfetch('<https://api.example.com/data>', {  \n  method: 'POST',  \n  headers: {  \n    'Content-Type': 'application/json'  \n  },  \n  body: JSON.stringify({  \n    name: 'John Doe',  \n    email: 'johndoe@example.com'  \n  })  \n})  \n  .then(response => {  \n    if (!response.ok) {  \n      throw new Error('Network response was not ok');  \n    }  \n    return response.json();  \n  })  \n  .then(data => {  \n    console.log(data);  \n  })  \n  .catch(error => {  \n    console.error('There was a problem with the fetch operation:', error);  \n  });\n```\n\nResponse Options\n================\n\nThe `**Response**` object returned by `**fetch()**` provides several methods for reading the response body as different types of data. For example, you can use the `**text()**` method to read the response body as text, the `**blob()**` method to read it as a Blob object, and the `**arrayBuffer()**` method to read it as an ArrayBuffer.\n\n```js\nfetch('<https://api.example.com/data>')  \n  .then(response => {  \n    if (!response.ok) {  \n      throw new Error('Network response was not ok');  \n    }  \n    return response.text();  \n  })  \n  .then(text => {  \n    console.log(text);  \n  })  \n  .catch(error => {  \n    console.error('There was a problem with the fetch operation:', error);  \n  });\n```\n\n`XMLHTTPRequest`\n================\n\nThe `**XMLHttpRequest**` object is a built-in browser API that allows us to send HTTP requests and receive responses. Here's an example of making a GET request using `**XMLHttpRequest**`:\n\n```js\nconst xhr = new XMLHttpRequest();  \nxhr.open('GET', '<https://jsonplaceholder.typicode.com/todos/1>');  \nxhr.onload = function() {  \n  if (xhr.status === 200) {  \n    console.log(JSON.parse(xhr.response));  \n  } else {  \n    console.log('Request failed. Status code: ' + xhr.status);  \n  }  \n};  \nxhr.send();\n```\n\nHere’s an example of making a POST request using XMLHttpRequest:\n\n```js\nconst xhr = new XMLHttpRequest();  \nconst url = '<https://jsonplaceholder.typicode.com/posts>';  \nconst data = JSON.stringify({  \n  title: 'foo',  \n  body: 'bar',  \n  userId: 1  \n});  \nxhr.open('POST', url);  \nxhr.setRequestHeader('Content-Type', 'application/json');  \nxhr.onload = function() {  \n  if (xhr.status === 201) {  \n    console.log(JSON.parse(xhr.response));  \n  } else {  \n    console.log('Request failed. Status code: ' + xhr.status);  \n  }  \n};  \nxhr.send(data);\n```\n\nThe XMLHttpRequest object has a number of methods and properties that allow you to configure and send requests, and handle responses. Here’s an overview of some of the most commonly used methods and properties:\n\n**Methods:**\n\n*   `**open(method, url[, async[, user[, password]]])**`: Initializes a new request, setting the HTTP method, URL, and other optional parameters.\n*   `**send([body])**`: Sends the request to the server. The optional `**body**` parameter allows you to send data along with the request.\n*   `**abort()**`: Aborts the current request.\n*   `**setRequestHeader(header, value)**`: Sets a request header.\n\n**Properties:**\n\n*   `**onload**`: A callback function that is called when the response has been received.\n*   `**readyState**`: The current state of the request.\n*   `**response**`: The response body, as an ArrayBuffer, Blob, Document, JSON object, or string, depending on the `**responseType**` property.\n*   `**responseType**`: The expected type of the response.\n*   `**status**`: The HTTP status code of the response.\n*   `**statusText**`: The HTTP status text of the response.\n\nBy using these methods and properties, you can send requests to a server, receive responses, and manipulate the data as needed in your application.\n\nBoth Fetch API and XMLHttpRequest (XHR) are used to make HTTP requests in JavaScript. Fetch API is a newer and more modern API, while XHR has been around for a longer time and is considered a legacy API. Fetch API has a simpler syntax and provides a more flexible and powerful interface for making requests, handling responses, and working with data in JSON format. It also supports streaming and has built-in support for CORS. On the other hand, XHR provides more granular control over the request and response, allowing for low-level manipulation of the data. It also supports older browsers and has wider browser support. Overall, both Fetch API and XHR have their strengths and weaknesses, and the choice between them depends on the specific use case and the developer’s preferences."},{"id":"handling-forms-in-js","metadata":{"permalink":"/blog/handling-forms-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/26-handling-forms-in-js.md","source":"@site/blog/javascript/26-handling-forms-in-js.md","title":"Handling Forms in JS","description":"Handling forms is an essential task in web development, and JavaScript provides a powerful and flexible way to handle forms. In this article, we’ll discuss how to handle forms in JavaScript.","date":"2024-05-15T13:15:30.924Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":5.56,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"handling-forms-in-js","title":"Handling Forms in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Working with APIs in JS","permalink":"/blog/working-with-apis-in-js"},"nextItem":{"title":"Advance Concepts of Events in JS: Bubbling, Capturing","permalink":"/blog/advance-concepts-of-events-in-js-bubbling-capturing"}},"content":"Handling forms is an essential task in web development, and JavaScript provides a powerful and flexible way to handle forms. In this article, we’ll discuss how to handle forms in JavaScript.\n<!-- truncate -->\n\nGetting Form Elements\n=====================\n\nThe first step in handling forms is to get the form elements. You can get the form elements using the `getElementById` method, which returns the element with the specified ID.\n\n```js\nconst form = document.getElementById('myForm');\n```\n\nOnce you have the form element, you can get the input elements using the `querySelectorAll` method, which returns a NodeList of all the matching elements.\n\n```js\nconst inputs = form.querySelectorAll('input');\n```\n\nHandling Form Submission\n========================\n\nHandling form submission is the most important part of handling forms. You can handle form submission using the `submit` event, which is fired when the user submits the form.\n\n```js\nform.addEventListener('submit', (event) => {  \n  event.preventDefault(); // Prevents the form from submitting  \n// Your code to handle form submission  \n});\n```\n\nValidating Form Input\n=====================\n\nValidating form input is crucial to ensure that the data submitted by the user is valid. You can validate form input using the `checkValidity` method, which returns `true` if the input is valid and `false` if it is not.\n\n```js\n// Check if all inputs are valid  \nconst isValid = inputs.every((input) => input.checkValidity());\n```\n\nAccessing Form Data\n===================\n\nTo access the data submitted by the user, you can use the `FormData` API, which provides a way to create a new `FormData` object from a form element.\n\n```js\nconst formData = new FormData(form);\n```\n\nOnce you have the `FormData` object, you can access the form data using the `get` method.\n\n```js\nconst username = formData.get('username');  \nconst password = formData.get('password');\n```\n\nReading Text Files\n==================\n\nTo read a text file in JavaScript, we can use the `FileReader` object. This object provides methods for reading files and handling the contents of the file. Here is an example code snippet that demonstrates how to read a text file using `FileReader`:\n\n```js\nconst fileInput = document.querySelector('input[type=\"file\"]');  \nfileInput.addEventListener('change', (event) => {  \n  const file = event.target.files[0];  \n  const reader = new FileReader();  \n  reader.onload = () => {  \n    console.log(reader.result);  \n  };  \n  reader.readAsText(file);  \n});\n```\n\nIn this example, we first select the file input element using `querySelector`. We then add an event listener to the input element that listens for the `change` event. When the event is triggered, we retrieve the selected file using `event.target.files[0]`. We then create a new instance of `FileReader` and assign it to the `reader` variable.\n\nWe then define an `onload` event handler for the `reader` object. This event handler is called when the file has been successfully read. In this example, we simply log the contents of the file to the console using `console.log(reader.result)`.\n\nFinally, we call the `readAsText` method of the `reader` object to read the contents of the file as text.\n\nReading Binary Files\n====================\n\nReading binary files is a bit more complex than reading text files. Binary files need to be read as an `ArrayBuffer` object, which is a low-level representation of binary data in JavaScript. Here is an example code snippet that demonstrates how to read a binary file using `FileReader`:\n\n```js\nconst fileInput = document.querySelector('input[type=\"file\"]');  \nfileInput.addEventListener('change', (event) => {  \n  const file = event.target.files[0];  \n  const reader = new FileReader();  \n  reader.onload = () => {  \n    const buffer = reader.result;  \n    console.log(new Uint8Array(buffer));  \n  };  \n  reader.readAsArrayBuffer(file);  \n});\n```\n\nIn this example, we use the same basic structure as before, but instead of calling `readAsText`, we call `readAsArrayBuffer`. When the file has been successfully read, the `onload` event handler is called, and we retrieve the contents of the file as an `ArrayBuffer` object using `reader.result`.\n\nWe then create a new `Uint8Array` object from the `ArrayBuffer` object, which allows us to access the binary data in a more meaningful way. We log the contents of this array to the console using `console.log(new Uint8Array(buffer))`.\n\nBlob\n====\n\nIn JavaScript, a Blob (Binary Large Object) is an object that represents a file-like object of immutable, raw data. Blobs represent data that isn’t necessarily in a JavaScript-native format, such as images or other binary data.\n\nA Blob can be created by instantiating the `**Blob**` constructor or by using the `**Blob()**` constructor on a typed array. Here is an example of how to create a new Blob using the `**Blob()**` constructor:\n\n```js\nconst myBlob = new Blob([\"Hello, world!\"], { type: \"text/plain\" });\n```\n\nIn this example, we create a new Blob that contains the string “Hello, world!” and set the type of the Blob to “text/plain”. The resulting Blob can be used in various ways, such as downloading or uploading a file.\n\nOnce a Blob is created, it can be used to create a URL that can be used as the `**src**` attribute of an image or the `**href**` attribute of a link. Here is an example of how to create a URL from a Blob:\n\n```js\nconst url = URL.createObjectURL(myBlob);\n```\n\nIt’s important to note that Blobs are immutable, meaning their content cannot be modified once they are created. However, you can create a new Blob that contains the modified data and use that instead.\n\nRevoking a URL created from a Blob is necessary to free up memory used by the URL and make the underlying Blob eligible for garbage collection. When you create a URL from a Blob using `**createObjectURL()**`, a reference is created to the Blob's data. If you don't revoke the URL, the reference will persist even after the Blob is no longer needed, preventing the Blob's data from being garbage collected and potentially leading to memory leaks.\n\n```js\nconst url = URL.createObjectURL(myBlob);  \n// Use the URL...  \nURL.revokeObjectURL(url);\n```\n\nHere’s an example of how to get a file from a form input and pass it into a Blob:\n\n```js\n// Get the file input element from the form  \nconst inputElement = document.getElementById(\"fileInput\");  \n// Get the selected file from the input element  \nconst file = inputElement.files[0];  \n// Create a new FileReader  \nconst reader = new FileReader();  \n// Set the onload event handler for the FileReader  \nreader.onload = function() {  \n  // When the FileReader has loaded the file, create a Blob from the result  \n  const blob = new Blob([reader.result], { type: file.type });  \n    \n  // Use the Blob for whatever purpose you need  \n  console.log(blob);  \n};  \n// Read the file as an ArrayBuffer  \nreader.readAsArrayBuffer(file);\n```\n\nIn conclusion, handling forms in JavaScript is an essential skill for web developers. By following the tips and techniques outlined in this article, you can handle forms effectively and efficiently. Reading files in JavaScript is a powerful feature that allows us to create more dynamic and interactive web applications. By using the `FileReader` object, we can easily read and manipulate files in both text and binary formats."},{"id":"advance-concepts-of-events-in-js-bubbling-capturing","metadata":{"permalink":"/blog/advance-concepts-of-events-in-js-bubbling-capturing","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/25-advance-concepts-of-events-in-js-bubbling-capturing.md","source":"@site/blog/javascript/25-advance-concepts-of-events-in-js-bubbling-capturing.md","title":"Advance Concepts of Events in JS: Bubbling, Capturing","description":"Events in JavaScript are a fundamental part of building interactive web applications. They allow us to respond to user actions, such as clicking a button or scrolling the page. In addition to handling events, it is important to understand the concepts of event propagation: bubbling and capturing. In this article, we will dive into these concepts and learn how they can be used to handle events in more advanced ways.","date":"2024-05-15T13:15:30.900Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":5.275,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"advance-concepts-of-events-in-js-bubbling-capturing","title":"Advance Concepts of Events in JS: Bubbling, Capturing","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Handling Forms in JS","permalink":"/blog/handling-forms-in-js"},"nextItem":{"title":"Browser Events in JS","permalink":"/blog/browser-events-in-js"}},"content":"Events in JavaScript are a fundamental part of building interactive web applications. They allow us to respond to user actions, such as clicking a button or scrolling the page. In addition to handling events, it is important to understand the concepts of event propagation: bubbling and capturing. In this article, we will dive into these concepts and learn how they can be used to handle events in more advanced ways.\n<!-- truncate -->\n\nEvent Propagation\n=================\n\nEvent propagation refers to the order in which events are handled as they “propagate” through the document object model (DOM) tree. The DOM tree is a hierarchical structure that represents the structure of an HTML document. When an event is triggered on an element, it can either be handled first by that element and then “bubble” up the DOM tree, or it can be handled first at the top of the tree and then “capture” down the tree to the element that triggered the event.\n\nBubbling\n========\n\nBubbling is the default method of event propagation in JavaScript. When an event is triggered on an element, it is first handled by that element, and then “bubbles” up the DOM tree, triggering the event handlers of its parent elements until it reaches the top of the tree (the document object). This means that if an element has multiple event listeners for the same event, they will be triggered in the order of their parent-child relationship.\n\nHere is an example of how bubbling works:\n\n```js\n<body>  \n  <div>  \n    <button>Click me</button>  \n  </div>  \n</body>\n```\n\n```js\ndocument.querySelector('button').addEventListener('click', function(event) {  \n  console.log('Button clicked');  \n});  \ndocument.querySelector('div').addEventListener('click', function(event) {  \n  console.log('Div clicked');  \n});  \ndocument.querySelector('body').addEventListener('click', function(event) {  \n  console.log('Body clicked');  \n});\n```\n\nIn this example, we have a button element inside a div element inside the body element. When the user clicks the button, the click event is triggered on the button element and then bubbles up to the div element and finally to the body element. As a result, the event handlers for the body, div, and button elements are all triggered, in that order.\n\nCapturing\n=========\n\nCapturing is the opposite of bubbling. When an event is triggered on an element, it is first handled by the top-level element (the document object) and then “captures” down the DOM tree, triggering the event handlers of its child elements until it reaches the element that triggered the event. This means that if an element has multiple event listeners for the same event, they will be triggered in the order of their child-parent relationship.\n\nHere is an example of how capturing works:\n\n```js\n<body>  \n  <div id=\"parent\">  \n    <button id=\"child\">Click me</button>  \n  </div>  \n</body>\n```\n\n```js\nconst parent = document.getElementById('parent');  \nconst child = document.getElementById('child');  \nparent.addEventListener('click', function(event) {  \n  console.log('Parent clicked');  \n}, true);  \nchild.addEventListener('click', function(event) {  \n  console.log('Child clicked');  \n}, true);\n```\n\nIn this example, if you click on the “Click me” button, the parent event handler will be called first, and then the child event handler will be called. This is because the event captures down the DOM tree from the root element to its child element.\n\nStopping Event Propagation\n==========================\n\nSometimes you may want to stop an event from propagating any further up or down the DOM tree. You can do this using the `**stopPropagation**` method of the event object:\n\n```js\n<body>  \n  <div id=\"parent\">  \n    <button id=\"child\">Click me</button>  \n  </div>  \n</body>\n```\n\n```js\nconst parent = document.getElementById('parent');  \nconst child = document.getElementById('child');  \nparent.addEventListener('click', function(event) {  \n  console.log('Parent clicked');  \n});  \nchild.addEventListener('click', function(event) {  \n  console.log('Child clicked');  \n  event.stopPropagation();  \n});\n```\n\nIn this example, if you click on the “Click me” button, only the child event handler will be called. This is because the parent event handler stops the event from propagating any further up the DOM tree.\n\nEvent Delegation\n================\n\nEvent delegation is a technique used in JavaScript to handle events efficiently, especially for situations where there are many elements with similar behavior. Instead of adding event listeners to each individual element, we add a single event listener to a parent element, which then handles the events for all the child elements.\n\nThis technique takes advantage of the fact that events “bubble up” the DOM hierarchy. When an event occurs on an element, it will first trigger any event listeners attached to that element. Then, the event will “bubble up” to the parent element, triggering any event listeners attached to it. This process continues up the DOM hierarchy until it reaches the root element.\n\nWith event delegation, we can add a single event listener to the parent element, and then use the `**event.target**` property to identify the child element that actually triggered the event. We can then apply the appropriate behavior based on the target element.\n\nFor example, let’s say we have a list of items that each have a delete button, and we want to remove an item when its delete button is clicked. Instead of adding an event listener to each individual delete button, we can add a single event listener to the parent element (the list), and use event delegation to identify which delete button was clicked:\n\n```js\n<ul id=\"list\">  \n  <li>  \n    Item 1 <button class=\"delete-btn\">Delete</button>  \n  </li>  \n  <li>  \n    Item 2 <button class=\"delete-btn\">Delete</button>  \n  </li>  \n  <li>  \n    Item 3 <button class=\"delete-btn\">Delete</button>  \n  </li>  \n</ul>\n```\n\n```js\nconst list = document.getElementById('list');  \nlist.addEventListener('click', (event) => {  \n  if (event.target.classList.contains('delete-btn')) {  \n    const listItem = event.target.closest('li');  \n    listItem.remove();  \n  }  \n});\n```\n\nIn this example, we add a single event listener to the `**list**` element. When a click event occurs, we check if the clicked element has the class `**delete-btn**`. If it does, we use the `**closest**` method to find the nearest `**li**` ancestor element and remove it from the DOM.\n\nEvent delegation has several advantages over adding event listeners to each individual element:\n\n1.  It reduces the amount of event listeners needed, which can improve performance and reduce memory usage.\n2.  It allows you to handle events for dynamically created elements, as you only need to add the event listener to a parent element that exists in the DOM.\n3.  It simplifies your code, as you don’t need to add and remove event listeners whenever elements are added or removed from the DOM.\n\nUnderstanding Bubbling and Capturing is important for handling events in JavaScript. While Bubbling is the default behavior, Capturing can be useful in some scenarios. It is also important to know how to stop the propagation of an event if we don’t want it to affect other elements in the DOM"},{"id":"browser-events-in-js","metadata":{"permalink":"/blog/browser-events-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/24-browser-events-in-js.md","source":"@site/blog/javascript/24-browser-events-in-js.md","title":"Browser Events in JS","description":"In JavaScript, events are actions or occurrences that happen in the browser, such as a user clicking on a button or a page finishing loading. JavaScript can listen to these events and execute code in response.","date":"2024-05-15T13:15:30.878Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":5.695,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"browser-events-in-js","title":"Browser Events in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Advance Concepts of Events in JS: Bubbling, Capturing","permalink":"/blog/advance-concepts-of-events-in-js-bubbling-capturing"},"nextItem":{"title":"Browser Environment in JS","permalink":"/blog/browser-environment-in-js"}},"content":"In JavaScript, events are actions or occurrences that happen in the browser, such as a user clicking on a button or a page finishing loading. JavaScript can listen to these events and execute code in response.\n<!-- truncate -->\n\nThere are many types of events in JavaScript, including:\n\n*   Mouse events: click, hover, mouseover, etc.\n*   Keyboard events: keypress, keydown, keyup\n*   Form events: submit, change, reset\n*   Window events: load, resize, scroll\n\n`addEventListener` and `removeEventListener` in JS\n==================================================\n\n`**addEventListener**` and `**removeEventListener**` are two methods in JavaScript that allow us to add and remove event listeners to HTML elements.\n\nAn event listener is a function that gets executed when an event occurs on an HTML element, like a click or a key press. When you add an event listener to an element using `**addEventListener**`, you specify which event to listen for and which function should be executed when that event occurs.\n\n`**addEventListener**` takes two arguments:\n\n1.  The type of the event to listen for (e.g. `**click**`, `**mouseover**`, `**keydown**`)\n2.  The function that should be executed when the event occurs\n\n`**removeEventListener**` is used to remove an event listener from an element. It takes the same two arguments as `**addEventListener**`: the type of the event to remove and the function that should no longer be executed when that event occurs.\n\nMouse Events in JS\n==================\n\nIn JavaScript, you can handle mouse events using event listeners. Mouse events occur when the user interacts with the mouse, such as clicking a button, moving the cursor over an element, or scrolling the page. There are several mouse events that you can handle in JavaScript, such as click, double click, mouse over, mouse out, mouse down, and mouse up.\n\nAdding Mouse Event Listeners\n============================\n\nTo add a mouse event listener to an element, you can use the `**addEventListener**` method. This method takes two parameters: the type of event to listen for (such as \"click\" or \"mouseover\"), and a callback function to be executed when the event occurs. Here's an example:\n\n```js\n// Get a reference to an element in the document  \nconst button = document.querySelector('#my-button');  \n// Add a click event listener to the element  \nbutton.addEventListener('click', function() {  \n  console.log('The button was clicked.');  \n});\n```\n\nIn this example, we add a click event listener to a button element. When the button is clicked, the callback function logs a message to the console.\n\nMouse Event Types\n=================\n\nHere are some of the most commonly used mouse events in JavaScript:\n\n*   `**click**`: Occurs when the mouse button is clicked on an element.\n*   `**dblclick**`: Occurs when the mouse button is double-clicked on an element.\n*   `**mouseover**`: Occurs when the mouse pointer is moved over an element.\n*   `**mouseout**`: Occurs when the mouse pointer leaves an element.\n*   `**mousedown**`: Occurs when the mouse button is pressed down on an element.\n*   `**mouseup**`: Occurs when the mouse button is released on an element.\n*   `**mousemove**`: Occurs when the mouse pointer is moved over an element.\n\nYou can add event listeners for these events using the `**addEventListener**` method, just as we did in the previous example.\n\nEvent Object\n============\n\nWhen a mouse event occurs, an event object is created that contains information about the event, such as the position of the mouse pointer and the element that triggered the event. This event object is passed as an argument to the event listener function.\n\nHere’s an example of how you can access the event object in a mouse event listener:\n\n```js\n// Get a reference to an element in the document  \nconst element = document.querySelector('#my-element');  \n// Add a mouseover event listener to the element  \nelement.addEventListener('mouseover', function(event) {  \n  // Log the event object to the console  \n  console.log(event);  \n});\n```\n\nIn JavaScript, when you attach an event listener to an element, the event object that is passed to the event handler function has two important properties: `**currentTarget**` and `**target**`.\n\nThe `**currentTarget**` property refers to the element on which the event listener was attached. This property will always refer to the same element, regardless of which child element actually triggered the event.\n\nThe `**target**` property, on the other hand, refers to the element that actually triggered the event. This property will be different depending on which child element was clicked or interacted with.\n\n```js\n<div class=\"parent\">  \n  <button class=\"child\">Click me!</button>  \n</div>  \n<script>  \n  const parent = document.querySelector('.parent');  \n  parent.addEventListener('click', function(event) {  \n    console.log('currentTarget:', event.currentTarget); // <div class=\"parent\">...</div>  \n    console.log('target:', event.target); // <button class=\"child\">Click me!</button>  \n  });  \n</script>\n```\n\nKeyboard Events in JS\n=====================\n\nKeyboard events in JavaScript are events that are triggered when a user interacts with their keyboard. These events allow us to respond to the user’s input and provide interactivity to our web applications.\n\nThere are three types of keyboard events in JavaScript: `**keydown**`, `**keyup**`, and `**keypress**`. Each event is triggered at a different point during the user's interaction with the keyboard.\n\n`keydown` Event\n===============\n\nThe `**keydown**` event is triggered when a key is pressed down. This event occurs before the character is inputted into the document. It is useful for detecting when the user first starts typing a character. The `**keydown**` event is also useful for detecting non-character keys such as the arrow keys, backspace, and delete keys.\n\nHere is an example of adding a `**keydown**` event listener to an input element:\n\n```js\nconst input = document.querySelector('input');  \ninput.addEventListener('keydown', function(event) {  \n  console.log('Key pressed:', event.key);  \n});\n```\n\n`keyup` Event\n=============\n\nThe `**keyup**` event is triggered when a key is released. This event occurs after the character is inputted into the document. It is useful for detecting when the user has finished typing a character. The `**keyup**` event is also useful for detecting non-character keys such as the arrow keys, backspace, and delete keys.\n\nHere is an example of adding a `**keyup**` event listener to an input element:\n\n```js\nconst input = document.querySelector('input');  \ninput.addEventListener('keyup', function(event) {  \n  console.log('Key released:', event.key);  \n});\n```\n\n`keypress` Event\n================\n\nThe `**keypress**` event is triggered when a key is pressed down and then released. This event occurs after the character is inputted into the document. It is useful for detecting when the user types a printable character such as a letter, number, or symbol.\n\nHere is an example of adding a `**keypress**` event listener to an input element:\n\n```js\nconst input = document.querySelector('input');  \ninput.addEventListener('keypress', function(event) {  \n  console.log('Key pressed and released:', event.key);  \n});\n```\n\nPreventing Default Behavior\n===========================\n\nIn some cases, we may want to prevent the default behavior of a keyboard event. For example, we may want to prevent the Enter key from submitting a form or the Tab key from changing the focus to the next element. To do this, we can call the `**preventDefault**` method on the `**event**` object passed to the\n\nIn conclusion, how to handle browser events in JavaScript, including mouse and keyboard events are important concept when working with browsers. `addEventListener` and `removeEventListener` are methods to perform specific action on any browser event."},{"id":"browser-environment-in-js","metadata":{"permalink":"/blog/browser-environment-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/23-browser-environment-in-js.md","source":"@site/blog/javascript/23-browser-environment-in-js.md","title":"Browser Environment in JS","description":"JavaScript is a programming language that is widely used for developing web applications. It is a client-side scripting language that runs in the browser. In this document, we will discuss the browser environment in JS.","date":"2024-05-15T13:15:30.863Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":8.67,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"browser-environment-in-js","title":"Browser Environment in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Browser Events in JS","permalink":"/blog/browser-events-in-js"},"nextItem":{"title":"Module in JS: Import, Export","permalink":"/blog/module-in-js-import-export"}},"content":"JavaScript is a programming language that is widely used for developing web applications. It is a client-side scripting language that runs in the browser. In this document, we will discuss the browser environment in JS.\n<!-- truncate -->\n\n**What is Browser Environment?**\n\nBrowser environment refers to the environment in which the JavaScript code runs in a web browser. It is different from the server-side environment because the code is executed on the client-side. The browser environment provides a set of objects and APIs that can be used to manipulate the DOM (Document Object Model), handle events, and interact with the user.\n\n**How JavaScript Runs in Web Browsers?**\n\nWhen a web page is loaded in a browser, the browser creates a Document Object Model (DOM) for the page. The DOM is a hierarchical representation of the HTML elements in the page. Each HTML element is represented as a node in the DOM tree, and each node has properties and methods that can be accessed and manipulated using JavaScript.\n\nJavaScript is executed by the browser’s JavaScript engine, which is responsible for parsing and executing the JavaScript code in the page. The JavaScript engine runs in a separate thread from the browser’s rendering engine, which is responsible for rendering the HTML and CSS in the page.\n\nBOM (Browser Object Model)\n==========================\n\nThe Browser Object Model (BOM) is a set of JavaScript objects that provide an interface for interacting with the browser window. The BOM is not a part of the JavaScript language itself, but it is implemented by all major web browsers.\n\nHere are some of the most commonly used objects in the BOM:\n\n*   `**window**`: The `**window**` object represents the browser window and provides access to the browser's methods and properties.\n*   `**document**`: The `**document**` object represents the current web page and provides access to the page's DOM.\n*   `**location**`: The `**location**` object represents the current URL of the web page and provides methods for navigating to other URLs.\n*   `**navigator**`: The `**navigator**` object provides information about the browser and the user's system.\n*   `**screen**`: The `**screen**` object provides information about the user's screen size and resolution.\n\nHere’s an example of how to use the `**window**` object to display an alert message:\n\n```js\nwindow.alert('Hello, world!');\n```\n\nDOM (Document Object Model)\n===========================\n\nThe Document Object Model (DOM) is a hierarchical representation of the HTML elements in a web page. Each HTML element is represented as a node in the DOM tree, and each node has properties and methods that can be accessed and manipulated using JavaScript.\n\nHere’s an example of how to manipulate the DOM using JavaScript:\n\n```js\n// Get the element with the ID \"myElement\"  \nvar element = document.getElementById(\"myElement\");  \n// Change the text of the element  \nelement.innerText = \"Hello, World!\";\n```\n\nDOM Tree\n========\n\nThe DOM tree is a hierarchical structure that represents the HTML document. It consists of elements, attributes, and text nodes. JavaScript can traverse and manipulate the DOM tree using a variety of methods and properties. Developers can use these methods and properties to create dynamic web applications that respond to user input and interaction.\n\nThe DOM (Document Object Model) tree is a hierarchical representation of the HTML or XML document, where each element in the document is represented by a node in the tree. The DOM tree is used by web browsers to render the web pages and allows developers to access and manipulate the content and structure of the web page using JavaScript. Let’s take a look at an example of the DOM tree.\n\nConsider the following HTML code:\n\n```js\n<!DOCTYPE html>  \n<html>  \n  <head>  \n    <title>DOM Tree Example</title>  \n  </head>  \n  <body>  \n    <div id=\"container\">  \n      <h1>Welcome to my website</h1>  \n      <p>This is a paragraph</p>  \n      <ul>  \n        <li>Item 1</li>  \n        <li>Item 2</li>  \n        <li>Item 3</li>  \n      </ul>  \n    </div>  \n  </body>  \n</html>\n```\n\nStructure of DOM\n================\n\nThe DOM tree is a hierarchical structure that starts with the `**document**` node at the top. The `**document**` node represents the entire HTML document and is the parent node of all other nodes in the tree.\n\nThe `**document**` node has one child node, the `**html**` node. The `**html**` node represents the HTML content of the web page and is the parent node of all other nodes in the tree.\n\nThe `**html**` node has two child nodes, the `**head**` node and the `**body**` node. The `**head**` node represents the head section of the web page and contains metadata such as the page title and links to CSS stylesheets. The `**body**` node represents the body section of the web page and contains the visible content of the page.\n\nThe `**head**` and `**body**` nodes can have child nodes, which represent the HTML elements in the web page. Each HTML element is represented as a node in the DOM tree, and each node has properties and methods that can be accessed and manipulated using JavaScript.\n\nThe corresponding DOM tree for this HTML code would look like this:\n\n```js\nhtml  \n├── head  \n│   └── title  \n│       └── \"DOM Tree Example\"  \n└── body  \n    └── div#container  \n        ├── h1  \n        │   └── \"Welcome to my website\"  \n        ├── p  \n        │   └── \"This is a paragraph\"  \n        └── ul  \n            ├── li  \n            │   └── \"Item 1\"  \n            ├── li  \n            │   └── \"Item 2\"  \n            └── li  \n                └── \"Item 3\"\n```\n\nSelecting DOM Elements in JS\n============================\n\nJavaScript is a powerful scripting language that can be used to manipulate the Document Object Model (DOM) of a webpage. One of the key tasks in working with the DOM is selecting specific elements from the HTML document.\n\n**Selecting Elements by ID**\n\nThe most common way to select an element from the DOM is by its ID. To select an element by ID, use the `getElementById` method. This method takes the ID of the element as a parameter and returns the element object.\n\n```js\nlet element = document.getElementById(\"myElement\");\n```\n\n**Selecting Elements by Class Name**\n\nYou can also select elements by their class name using the `getElementsByClassName` method. This method returns an array-like object containing all the elements that have the specified class name.\n\n```js\nlet elements = document.getElementsByClassName(\"myClass\");\n```\n\n**Selecting Elements by Tag Name**\n\nAnother way to select elements from the DOM is by their tag name. The `getElementsByTagName` method returns an array-like object containing all the elements with the specified tag name.\n\n```js\nlet elements = document.getElementsByTagName(\"div\");\n```\n\n**Selecting Elements with CSS Selectors**\n\nCSS selectors can also be used to select elements from the DOM. The `querySelector` and `querySelectorAll` methods can be used to select elements using CSS selectors.\n\n```js\nlet element = document.querySelector(\"#myElement .myClass\");  \nlet elements = document.querySelectorAll(\"div.myClass\");\n```\n\nSelecting DOM elements in JS is a fundamental task that every web developer should know. With the above examples, you can now easily select any element from the DOM using JS.\n\nTypes of Nodes in the DOM Tree\n==============================\n\nHere are the main types of nodes in the DOM:\n\n1.  **Element Node:** represents an HTML element, such as `**<div>**`, `**<p>**`, or `**<img>**`. Element nodes have properties that correspond to their attributes, such as `**id**`, `**class**`, `**src**`, and so on.\n\n```js\n// Create a new div element  \nconst myDiv = document.createElement('div');  \n// Set attributes for the div element  \nmyDiv.setAttribute('id', 'myDiv');  \nmyDiv.setAttribute('class', 'myClass');  \n// Add text content to the div element  \nmyDiv.textContent = 'This is a div element.';  \n// Append the div element to the document body  \ndocument.body.appendChild(myDiv);\n```\n\n**2\\. Text Node**: represents the text content of an HTML element. Text nodes are usually the children of element nodes.\n\n```js\n// Create a new text node  \nconst myText = document.createTextNode('This is a text node.');  \n// Append the text node to an existing element  \nconst myDiv = document.getElementById('myDiv');  \nmyDiv.appendChild(myText);\n```\n\n**3\\. Attribute Node**: represents an attribute of an HTML element, such as `**id**`, `**class**`, or `**src**`. Attribute nodes are part of element nodes.\n\n```js\n// Get an existing element and its attributes  \nconst myDiv = document.getElementById('myDiv');  \nconst myId = myDiv.getAttribute('id');  \nconst myClass = myDiv.getAttribute('class');  \n// Set a new attribute value  \nmyDiv.setAttribute('class', 'newClass');\n```\n\n**4\\. Comment Node**: represents a comment in an HTML document. Comment nodes can be used to add notes or reminders to the code without affecting the rendering of the page.\n\n```js\n// Create a new comment node  \nconst myComment = document.createComment('This is a comment.');  \n// Append the comment node to an existing element  \nconst myDiv = document.getElementById('myDiv');  \nmyDiv.appendChild(myComment);\n```\n\n**5\\. Document Node:** represents the entire HTML document. It is the root of the tree structure.\n\n```js\n// Get the document object  \nconst myDoc = document;  \n// Output the name and public ID of the document type  \nconsole.log(myDocType.name); // Outputs \"html\"  \nconsole.log(myDocType.publicId); // Outputs the public ID of the document type\n```\n\n**6\\. Document Type Node**: represents the document type declaration, which specifies the version of HTML or XML that the document conforms to.\n\n```js\n// Get the document type declaration  \nconst myDocType = document.doctype;  \n// Output the name and public ID of the document type  \nconsole.log(myDocType.name); // Outputs \"html\"  \nconsole.log(myDocType.publicId); // Outputs the public ID of the document type\n```\n\n**7\\. Document Fragment Node**: represents a container for a group of nodes. Document fragment nodes can be used to create and manipulate groups of nodes before adding them to the document.\n\n```js\n// Create a new document fragment  \nconst myFrag = document.createDocumentFragment();  \n// Create new elements and append them to the fragment  \nconst myDiv1 = document.createElement('div');  \nmyDiv1.textContent = 'This is div 1.';  \nmyFrag.appendChild(myDiv1);  \nconst myDiv2 = document.createElement('div');  \nmyDiv2.textContent = 'This is div 2.';  \nmyFrag.appendChild(myDiv2);  \n// Append the fragment to an existing element  \nconst myContainer = document.getElementById('myContainer');  \nmyContainer.appendChild(myFrag);\n```\n\nStyle and Class\n===============\n\nIn JavaScript, you can manipulate the style and classes of HTML elements in the DOM using the `**style**` and `**classList**` properties, respectively.\n\n```js\n// Get a reference to the HTML element  \nconst myElement = document.getElementById('myElement');  \n// Change the background color of the element  \nmyElement.style.backgroundColor = 'red';  \n// Set multiple CSS styles on the element  \nmyElement.style.cssText = 'background-color: red; color: white; font-size: 16px;';  \n// Get the value of a specific CSS style  \nconst backgroundColor = myElement.style.backgroundColor;  \n// Add a CSS class to the element  \nmyElement.classList.add('myClass');  \n// Remove a CSS class from the element  \nmyElement.classList.remove('myClass');  \n// Check if the element has the CSS class  \nif (myElement.classList.contains('myClass')) {  \n  // Do something  \n}  \n// Toggle the CSS class on the element  \nmyElement.classList.toggle('myClass');\n```\n\nIn conclusion, the browser environment in JS provides a powerful set of tools that can be used to create dynamic and interactive web applications. Understanding the browser environment is essential for any web developer who wants to create engaging and responsive user experiences."},{"id":"module-in-js-import-export","metadata":{"permalink":"/blog/module-in-js-import-export","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/22-module-in-js-import-export.md","source":"@site/blog/javascript/22-module-in-js-import-export.md","title":"Module in JS: Import, Export","description":"JavaScript modules are a way of organizing code into reusable, self-contained components that can be easily imported and exported between different parts of an application. They provide a mechanism for encapsulating code and avoiding naming collisions, making it easier to build and maintain large-scale applications. In this blog post, we’ll dive deeper into the concept of modules in JavaScript.","date":"2024-05-15T13:15:30.841Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":4.04,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"module-in-js-import-export","title":"Module in JS: Import, Export","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Browser Environment in JS","permalink":"/blog/browser-environment-in-js"},"nextItem":{"title":"Proxy in JS","permalink":"/blog/proxy-in-js"}},"content":"JavaScript modules are a way of organizing code into reusable, self-contained components that can be easily imported and exported between different parts of an application. They provide a mechanism for encapsulating code and avoiding naming collisions, making it easier to build and maintain large-scale applications. In this blog post, we’ll dive deeper into the concept of modules in JavaScript.\n<!-- truncate -->\n\nThe module system in JavaScript\n===============================\n\nJavaScript modules were introduced in ECMAScript 6 (ES6) and are now a standard feature of modern JavaScript. The module system in JavaScript allows us to define modules, which are self-contained units of code that can be imported and used in other parts of an application. Each module has its own private scope, which means that variables, functions, and classes defined in a module are not accessible from outside the module unless they are explicitly exported.\n\nModules can be defined in two ways: using the `**import**` and `**export**` keywords or using the `**CommonJS**` module system.\n\nUsing `import` and `export`\n===========================\n\nExporting a Module\n------------------\n\nTo make a variable, function or object available to other files, we need to export it. We can use the `export` keyword to do so. For example,\n\n```js\n// greet.js  \nexport function sayHello(name) {  \n  console.log(`Hello, ${name}!`);  \n}  \nexport let message = \"Welcome to our website\";\n```\n\nImporting a Module\n------------------\n\nTo use the exported variable, function or object in another file, we need to import it. We can use the `import` keyword to do so. For example,\n\n```js\n// main.js  \nimport { sayHello, message } from './greet.js';  \nsayHello('Lily'); // Output: Hello, Lily!  \nconsole.log(message); // Output: Welcome to our website\n```\n\nWe can also import everything from a module using the `*` character. For example,\n\n```js\n// main.js  \nimport * as greetings from './greet.js';  \ngreetings.sayHello('Lily'); // Output: Hello, Lily!  \nconsole.log(greetings.message); // Output: Welcome to our website\n```\n\nDynamic Import\n--------------\n\nDynamic import is a new feature in JavaScript that allows us to load modules on-demand or asynchronously. This can be useful when we have a large application with many modules, and we don’t want to load all of them at once. Instead, we can load only the modules that are needed at a particular time. To use dynamic import, we can use the `import()` function. For example,\n\n```js\n// main.js  \nimport('./greet.js')  \n  .then(module => {  \n    module.sayHello('Lily'); // Output: Hello, Lily!  \n    console.log(module.message); // Output: Welcome to our website  \n  })  \n  .catch(err => {  \n    console.log('Failed to load module:', err);  \n  });\n```\n\nDefault Export\n--------------\n\nWe can also have a default export in a module. We use the `export default` syntax to do so. For example,\n\n```js\n// greet.js  \nexport default function(name) {  \n  console.log(`Hello, ${name}!`);  \n}\n```\n\nIn this case, we don’t need to use curly braces while importing the default export. For example,\n\n```js\n// main.js  \nimport sayHello from './greet.js';  \nsayHello('Lily'); // Output: Hello, Lily!\n```\n\nUsing `CommonJS`\n================\n\nThe `**CommonJS**` module system is an older, but still widely used module system in Node.js. It allows us to define modules using the `**module.exports**` and `**require**` keywords. With `**module.exports**`, we can export variables, functions, and classes from our module. With `**require**`, we can import variables, functions, and classes from other modules.\n\nHere’s an example of how to define and use modules using the `**CommonJS**` module system:\n\n```js\n// Math.js  \nconst add = (a, b) => a + b;  \nconst subtract = (a, b) => a - b;  \nmodule.exports = { add, subtract };\n```\n\n```js\n// App.js  \nconst { add, subtract } = require('./Math.js');  \nconsole.log(add(2, 3)); // Output: 5  \nconsole.log(subtract(5, 2)); // Output: 3\n```\n\nAdvantages of using modules\n===========================\n\nUsing modules in JavaScript has several advantages, including:\n\nEncapsulation\n-------------\n\nModules provide a way of encapsulating code, which means that variables, functions, and classes defined in a module are not accessible from outside the module unless they are explicitly exported. This helps to prevent naming collisions and makes it easier to build and maintain large-scale applications.\n\nReusability\n-----------\n\nModules can be easily imported and exported between different parts of an application, making it easy to reuse code across multiple files and projects. This can save a lot of time and effort when building complex applications.\n\nDependency management\n---------------------\n\nModules can be used to manage dependencies between different parts of an application. By importing only the specific functions or classes that are needed from a module, we can reduce the amount of code that needs to be loaded, which can improve application performance.\n\nIn conclusion, JavaScript modules provide a way of organizing code into reusable, self-contained components that can be easily imported and exported between different parts of an application. They provide a mechanism for encapsulating code and avoiding naming collisions, making it easier to build and maintain large-scale applications. By using modules, we can improve the reusability, encapsulation, and dependency management of our code, which can lead to more efficient and maintainable applications."},{"id":"proxy-in-js","metadata":{"permalink":"/blog/proxy-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/21-proxy-in-js.md","source":"@site/blog/javascript/21-proxy-in-js.md","title":"Proxy in JS","description":"JavaScript Proxy is a powerful feature that was introduced in ECMAScript 6 (ES6) that allows us to intercept and customize operations performed on objects. It allows us to define custom behavior for fundamental operations like object property access, assignment, and deletion. In this blog post, we’ll dive deeper into the concept of proxies in JavaScript.","date":"2024-05-15T13:15:30.822Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":4.1,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"proxy-in-js","title":"Proxy in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Module in JS: Import, Export","permalink":"/blog/module-in-js-import-export"},"nextItem":{"title":"Iterator, Generator and Closure in JS","permalink":"/blog/iterator-generator-and-closure-in-js"}},"content":"JavaScript Proxy is a powerful feature that was introduced in ECMAScript 6 (ES6) that allows us to intercept and customize operations performed on objects. It allows us to define custom behavior for fundamental operations like object property access, assignment, and deletion. In this blog post, we’ll dive deeper into the concept of proxies in JavaScript.\n<!-- truncate -->\n\nWhat is a Proxy?\n================\n\nA proxy is an object that wraps an existing object and intercepts operations performed on the wrapped object. It acts as a middleman between the code and the original object, allowing us to modify its behavior without modifying the object itself.\n\nCreating a Proxy\n================\n\nTo create a Proxy, you need to use the `Proxy` constructor. The `Proxy` constructor takes two arguments: the target object and a handler object. The target object is the object that you want to wrap with the Proxy, and the handler object is an object that defines the behavior of the Proxy.\n\n```js\nlet target = {};  \nlet handler = {};  \nlet proxy = new Proxy(target, handler);\n```\n\nHandler object\n==============\n\nThe handler object is used to define the behavior of the Proxy. It is an object that contains one or more methods called traps. The traps are called when certain operations are performed on the Proxy.\n\nTrap methods\n============\n\nThe following are the available trap methods:\n\n*   `get(target, property, receiver)`: This trap is called when a property of the Proxy is accessed.\n*   `set(target, property, value, receiver)`: This trap is called when a property of the Proxy is set.\n*   `apply(target, thisArg, argumentsList)`: This trap is called when the Proxy is called as a function.\n*   `construct(target, argumentsList, newTarget)`: This trap is called when the Proxy is used with the `new` keyword.\n*   `has(target, property)`: This trap is called when the `in` operator is used on the Proxy.\n*   `deleteProperty(target, property)`: This trap is called when a property of the Proxy is deleted.\n*   `getOwnPropertyDescriptor(target, property)`: This trap is called when the `Object.getOwnPropertyDescriptor()` method is called on the Proxy.\n*   `defineProperty(target, property, descriptor)`: This trap is called when the `Object.defineProperty()` method is called on the Proxy.\n*   `getPrototypeOf(target)`: This trap is called when the `Object.getPrototypeOf()` method is called on the Proxy.\n*   `setPrototypeOf(target, prototype)`: This trap is called when the `Object.setPrototypeOf()` method is called on the Proxy.\n\nExamples\n========\n\nLet’s take an example to understand how to create a proxy:\n\n```js\nlet target = {  \n    name: \"John\",  \n    age: 30  \n};  \nlet handler = {  \n    get: function(target, prop, receiver) {  \n        console.log(`Getting ${prop}`);  \n        return target[prop];  \n    },  \n    set: function(target, prop, value) {  \n        console.log(`Setting ${prop} to ${value}`);  \n        target[prop] = value;  \n    }  \n};  \nlet proxy = new Proxy(target, handler);  \nconsole.log(proxy.name); // Getting name, John  \nproxy.age = 40; // Setting age to 40  \nconsole.log(proxy.age); // Getting age, 40\n```\n\nAnother example where the Proxy is used for validation:\n\n```js\nlet user = {  \n    name: \"\",  \n    age: 0  \n};  \nlet handler = {  \n    set: function(target, prop, value) {  \n        if (prop === \"age\" && (!Number.isInteger(value) || value < 0)) {  \n            throw new TypeError(\"Age must be a positive integer\");  \n        }  \n        target[prop] = value;  \n    }  \n};  \nlet proxy = new Proxy(user, handler);  \nproxy.name = \"John\";  \nproxy.age = 30;  \nconsole.log(proxy); // {name: \"John\", age: 30}  \nproxy.age = -1; // Throws TypeError: Age must be a positive integer\n```\n\nCommon use cases of Proxies\n===========================\n\nValidation\n==========\n\nOne of the most common use cases for proxies is input validation. Proxies can be used to define rules for valid data types and formats for object properties, and any attempts to set properties that violate these rules can be blocked or thrown an error.\n\n```js\nlet target = {};  \nlet handler = {  \n    set: function(target, property, value, receiver) {  \n        if (typeof value !== 'string') {  \n            throw new Error('Only string values are allowed');  \n        }  \n        target[property] = value;  \n        return true;  \n    }  \n};  \nlet proxy = new Proxy(target, handler);  \nproxy.name = \"John\"; // Allowed  \nproxy.age = 30; // Throws an error\n```\n\nPerformance optimization\n========================\n\nAnother common use case for proxies is performance optimization. For example, suppose you have a large object that is frequently accessed, and you want to cache its properties to improve performance. You can use a proxy to intercept property access and cache the values to avoid repeated access to the object.\n\n```js\nlet target = { /* Large object */ };  \nlet cache = {};  \nlet handler = {  \n    get: function(target, property, receiver) {  \n        if (!(property in cache)) {  \n            cache[property] = target[property];  \n        }  \n        return cache[property];  \n    }  \n};  \nlet proxy = new Proxy(target, handler);  \nconsole.log(proxy.property1); // The value is cached  \nconsole.log(proxy.property2); // The value is cached\n```\n\nProxies are a powerful feature in JavaScript that allows you to intercept and customize certain operations that are performed on another object. They provide a way to implement custom behavior for fundamental language operations that is not possible with normal JavaScript objects. Proxies can be used for a variety of purposes such as validation, logging, and caching."},{"id":"iterator-generator-and-closure-in-js","metadata":{"permalink":"/blog/iterator-generator-and-closure-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/20-iterator-generator-and-closure-in-js.md","source":"@site/blog/javascript/20-iterator-generator-and-closure-in-js.md","title":"Iterator, Generator and Closure in JS","description":"JavaScript is a versatile language that supports several powerful features that make it easier to write efficient, reusable, and modular code. In this blog post, we’ll take a closer look at three such features — iterators, generators, and closures.","date":"2024-05-15T13:15:30.801Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":3.75,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"iterator-generator-and-closure-in-js","title":"Iterator, Generator and Closure in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Proxy in JS","permalink":"/blog/proxy-in-js"},"nextItem":{"title":"Call Stack and Callback Queue in JS","permalink":"/blog/call-stack-and-callback-queue-in-js"}},"content":"JavaScript is a versatile language that supports several powerful features that make it easier to write efficient, reusable, and modular code. In this blog post, we’ll take a closer look at three such features — iterators, generators, and closures.\n<!-- truncate -->\n\nIterator\n========\n\nIterators are objects that allow you to traverse through a collection of data. In JavaScript, iterators are implemented using the **Symbol.iterator** method. This method returns an object with a **next()** method. The **next()** method returns an object with two properties — **value** and **done**. The **value** property is the next value in the collection and the **done** property is a boolean that indicates whether the end of the collection has been reached.\n\nHere is an example of how to use an iterator in JavaScript:\n\n```js\nconst arr = [1, 2, 3];  \nconst iterator = arr[Symbol.iterator]();  \nconsole.log(iterator.next()); // { value: 1, done: false }  \nconsole.log(iterator.next()); // { value: 2, done: false }  \nconsole.log(iterator.next()); // { value: 3, done: false }  \nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\nere’s an example of how to implement an iterator for an array of values:\n\n```js\nlet arr = [1, 2, 3, 4];  \nlet myIterator = {  \n  [Symbol.iterator]() {  \n    let i = 0;  \n    return {  \n      next() {  \n        if (i < arr.length) {  \n          return { value: arr[i++], done: false };  \n        } else {  \n          return { value: undefined, done: true };  \n        }  \n      }  \n    };  \n  }  \n};  \nfor (let value of myIterator) {  \n  console.log(value);  \n}\n```\n\nGenerator\n=========\n\nGenerators are functions that allow you to define an iterative algorithm by writing a single function that can maintain its own state. In JavaScript, generators are defined using the **function\\\\*()** syntax. The **yield** keyword is used to indicate a pause in the generator, and the **next()** method is used to continue the generator from where it left off.\n\nHere is an example of how to use a generator in JavaScript:\n\n```js\nfunction* countFrom(n) {  \n  while (true) {  \n    yield n++;  \n  }  \n}  \nconst counter = countFrom(1);  \nconsole.log(counter.next()); // { value: 1, done: false }  \nconsole.log(counter.next()); // { value: 2, done: false }  \nconsole.log(counter.next()); // { value: 3, done: false }\n```\n\nGenerators are useful when you need to iterate through a large collection of data or when you need to maintain a specific state throughout the iteration process. They are also useful for creating custom iterable objects.\n\nClosure\n=======\n\nOne of the most common uses of closures is to create private variables and methods. By defining variables and functions inside another function, they are not accessible from the outside, but they can still be used by functions defined within the outer function.\n\nClosures are formed when a function is defined inside another function. The inner function has access to the outer function’s variables and parameters even after the outer function has returned. This allows for some interesting and powerful programming techniques.\n\nHere is an example of a closure in JavaScript:\n\n```js\nfunction outerFunction() {  \n  let outerVariable = \"I am outside!\";  \nfunction innerFunction() {  \n    console.log(outerVariable);  \n  }  \n  return innerFunction;  \n}  \nlet inner = outerFunction();  \ninner(); // \"I am outside!\"\n```\n\nThis is just one example of how closures can be used in JavaScript. They are a powerful tool for creating modular and encapsulated code.\n\nAnother common use of closures is to create factory functions. A factory function is a function that returns another function, and the returned function can be customized with parameters.\n\nHere is an example of a factory function that creates functions to add a given value to a number:\n\n```js\nfunction createAdder(value) {  \n  return function(number) {  \n    return number + value;  \n  }  \n}  \nlet add5 = createAdder(5);  \nlet add10 = createAdder(10);  \nconsole.log(add5(2)); // 7  \nconsole.log(add10(2)); // 12\n```\n\nClosures can also be used to create iterators. An iterator is an object that returns a sequence of values, typically used in a loop.\n\nHere is an example of an iterator created using a closure:\n\n```js\nfunction createCounter() {  \n  let count = 0;  \nreturn function() {  \n    count++;  \n    return count;  \n  }  \n}  \nlet counter = createCounter();  \nconsole.log(counter()); // Output: 1  \nconsole.log(counter()); // Output: 2  \nconsole.log(counter()); // Output: 3\n```\n\nWhen `counter` is called, it returns a new value each time, starting with 1. This allows for easy iteration over a sequence of numbers without the need for a traditional loop.\n\nIn conclusion, closures are a powerful tool in JavaScript for creating modular and encapsulated code. They allow for private variables and methods, factory functions, and iterators. Understanding closures is an important part of learning advanced JavaScript programming techniques."},{"id":"call-stack-and-callback-queue-in-js","metadata":{"permalink":"/blog/call-stack-and-callback-queue-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/19-call-stack-and-callback-queue-in-js.md","source":"@site/blog/javascript/19-call-stack-and-callback-queue-in-js.md","title":"Call Stack and Callback Queue in JS","description":"JavaScript is a single-threaded language, which means it can only perform one task at a time. However, it is capable of handling multiple tasks simultaneously using the concept of Call Stack. The Call Stack is a mechanism used by the JavaScript engine to keep track of function calls. When a function is called, it is added to the top of the Call Stack, and when it returns, it is removed from the stack.","date":"2024-05-15T13:15:30.781Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":3.86,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"call-stack-and-callback-queue-in-js","title":"Call Stack and Callback Queue in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Iterator, Generator and Closure in JS","permalink":"/blog/iterator-generator-and-closure-in-js"},"nextItem":{"title":"Asynchronous Programming in JS","permalink":"/blog/asynchronous-programming-in-js"}},"content":"JavaScript is a single-threaded language, which means it can only perform one task at a time. However, it is capable of handling multiple tasks simultaneously using the concept of Call Stack. The Call Stack is a mechanism used by the JavaScript engine to keep track of function calls. When a function is called, it is added to the top of the Call Stack, and when it returns, it is removed from the stack.\n<!-- truncate -->\n\nCall Stack\n==========\n\nConsider the following code example:\n\n```js\nfunction firstFunction() {  \n  console.log(\"This is the first function.\");  \n}  \nfunction secondFunction() {  \n  firstFunction();  \n  console.log(\"This is the second function.\");  \n}  \nsecondFunction();\n```\n\nWhen `secondFunction()` is called, it first calls `firstFunction()`, which is added to the top of the Call Stack. Once `firstFunction()` completes its execution, it is removed from the stack, and `secondFunction()` continues its execution, adding itself to the top of the stack. Finally, when `secondFunction()` completes its execution, it is removed from the stack.\n\nRecursion\n=========\n\nRecursion is a powerful programming technique that can be used to solve complex problems. Recursion is a technique in programming where a function calls itself repeatedly until it reaches a base condition. Recursion is an essential concept in JavaScript and is widely used in various programming scenarios.\n\n**Direct Recursion**: This is the most common type of recursion, in which a function calls itself directly.\n\n```js\nfunction factorial(n) {  \n  if (n === 0) {  \n    return 1;  \n  } else {  \n    return n * factorial(n - 1);  \n  }  \n}  \nconsole.log(factorial(5));\n```\n\n**Indirect Recursion**: In this type of recursion, multiple functions call each other in a circular manner.\n\n```js\nfunction fib1(num) {  \n  if (num <= 1) {  \n    return num;  \n  } else {  \n    return fib2(num - 1) + fib1(num - 2);  \n  }  \n}  \nfunction fib2(num) {  \n  if (num <= 1) {  \n    return num;  \n  } else {  \n    return fib1(num - 1) + fib2(num - 2);  \n  }  \n}  \nconsole.log(fib1(6)); // 8\n```\n\nRecursion should be used with caution, as it can lead to stack overflow errors if not implemented correctly.\n\nCallback Queue\n==============\n\nThe Callback Queue is a data structure that holds a queue of functions to be executed. When a function is invoked and its operation is asynchronous, it is added to the Callback Queue instead of blocking the execution of other code. This means that while the asynchronous operation is in progress, other code can continue to execute without interruption.\n\n```js\n// Example of adding a function to the Callback Queue  \nsetTimeout(function(){  \n  console.log(\"This function is added to the Callback Queue\");  \n}, 0);\n```\n\nThe Callback Queue maintains the order in which the functions are added. The first function to be added to the queue will be the first to be executed when the Call Stack is empty. This ensures that the functions are executed in the order they were added to the Callback Queue.\n\nEvent Loop\n==========\n\nThe Event Loop is a process that constantly checks the Callback Queue for functions to execute. If the Call Stack is empty, it dequeues the first function in the Callback Queue and adds it to the Call Stack for execution.\n\n```js\n// Example of the Event Loop  \nfunction firstFunction(){  \n  console.log(\"This is the first function\");  \n  setTimeout(function(){  \n    console.log(\"This is the second function\");  \n  }, 0);  \n  console.log(\"This is the third function\");  \n}  \nfirstFunction();\n```\n\nThe Call Stack is a data structure that keeps track of the functions that are currently being executed. When a function is called, it is added to the Call Stack. When a function completes its execution, it is removed from the Call Stack.\n\nHow they work together\n======================\n\nWhen an asynchronous operation is triggered, a function (the callback function) is added to the Callback Queue. The Event Loop constantly checks the Callback Queue for the next function to execute. Once the Call Stack is emptied, the Event Loop dequeues the first function in the Callback Queue and adds it to the Call Stack for execution.\n\n```js\n// Example of how the Callback Queue and Event Loop work together  \nconsole.log(\"Start\");  \nsetTimeout(function() {  \n  console.log(\"This is the first function\");  \n}, 3000);  \nsetTimeout(function() {  \n  console.log(\"This is the second function\");  \n}, 1000);  \nconsole.log(\"End\");\n```\n\nThis allows JavaScript to handle asynchronous operations without blocking the execution of other code.\n\nIn conclusion, the Call Stack is used to keep track of function calls, while Recursion is a technique in programming where a function calls itself repeatedly. The Callback Queue is a data structure that holds a queue of functions to be executed, while the Event Loop is a process that constantly checks the Callback Queue for functions to execute. These concepts allow JavaScript to handle multiple tasks simultaneously without blocking the execution of other code."},{"id":"asynchronous-programming-in-js","metadata":{"permalink":"/blog/asynchronous-programming-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/18-asynchronous-programming-in-js.md","source":"@site/blog/javascript/18-asynchronous-programming-in-js.md","title":"Asynchronous Programming in JS","description":"Asynchronous programming is a way of writing non-blocking code in JavaScript. In traditional programming, code runs sequentially from top to bottom, which means that one line of code is executed at a time. However, when dealing with long-running tasks such as network requests or file I/O, synchronous programming can lead to unresponsive applications.","date":"2024-05-15T13:15:30.761Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":5.885,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"asynchronous-programming-in-js","title":"Asynchronous Programming in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Call Stack and Callback Queue in JS","permalink":"/blog/call-stack-and-callback-queue-in-js"},"nextItem":{"title":"Scheduling in JS","permalink":"/blog/scheduling-in-js"}},"content":"Asynchronous programming is a way of writing non-blocking code in JavaScript. In traditional programming, code runs sequentially from top to bottom, which means that one line of code is executed at a time. However, when dealing with long-running tasks such as network requests or file I/O, synchronous programming can lead to unresponsive applications.\n<!-- truncate -->\n\nBackground\n==========\n\nAsynchronous programming is necessary in JavaScript for several reasons, especially when it comes to web development.\n\nFirstly, many web applications need to perform I/O operations, such as reading and writing data to databases or making HTTP requests to external APIs. These operations can take a long time to complete, especially if the network connection is slow or the server is under heavy load. If we execute these operations synchronously, they will block the main thread of execution, making the entire application unresponsive until the operation is complete. Asynchronous programming allows us to execute these operations in the background, without blocking the main thread, making the application more responsive and performant.\n\nSecondly, JavaScript runs on a single thread, which means that it can only execute one task at a time. Asynchronous programming allows us to break up long-running tasks into smaller, asynchronous tasks, which can be executed simultaneously. For example, we can load several images in the background while the main thread is handling user input. This approach makes the application appear more responsive and improves the user experience.\n\nFinally, JavaScript is frequently used to build real-time applications, such as chat applications or online multiplayer games. In these applications, it is essential to update the UI in real-time, based on data received from the server. Asynchronous programming allows us to receive and process data in the background, without blocking the main thread, and then update the UI when the data is ready. This approach enables real-time updates and improves the overall user experience.\n\nIn asynchronous programming, we execute tasks without blocking the main thread of execution, allowing for multiple tasks to run simultaneously. JavaScript provides several mechanisms for implementing asynchronous programming, including callbacks, promises, and the newer async/await syntax.\n\nCallback\n========\n\nCallbacks are the oldest mechanism for implementing asynchronous programming in JavaScript. They are functions that are passed as arguments to other functions and executed once a particular task is complete. Callbacks allow developers to handle asynchronous operations by providing a way to execute code once a particular task has finished. However, as the complexity of the codebase increases, callbacks can become challenging to manage, leading to callback hell, where the code becomes nested and difficult to read.\n\n```js\nfunction add(a, b) {  \n  return a + b;  \n}  \nfunction multiply(a, b, callback) {  \n  const result = callback(a, b);  \n  console.log(result);  \n}  \nmultiply(3, 4, add); // Output: 7\n```\n\n`setTimeOut` is an asynchronous function which creates a separate thread to perform function which is happening inside callback of this function.\n\n```js\nfunction fetchData(callback) {  \n  // Simulate a delay of 2 seconds (2000 milliseconds)  \n  setTimeout(function() {  \n    const data = {  \n      name: \"John Doe\",  \n      age: 30,  \n      city: \"New York\"  \n    };  \n    callback(data);  \n  }, 2000);  \nconsole.log(\"Fetching data...\");  \n}  \nfunction displayData(data) {  \n  // Log the data to the console  \n  console.log(data);  \n}  \n// Fetch the data and display it using the displayData callback function  \nfetchData(displayData);  \n// Fetching data...  \n// {name: \"John Doe\", age: 30, city: \"New York\"}\n```\n\nCallback Hell\n=============\n\nCallback hell is a term used to describe deeply nested and difficult-to-read code that arises from using multiple levels of callbacks in JavaScript. Here’s an example of callback hell:\n\n```js\nfunction operation1(callback1) {  \n  // First level of nesting  \n  setTimeout(function() {  \n    console.log('Operation 1');  \n    callback1();  \n  }, 1000);  \n}  \nfunction operation2(callback2) {  \n  // Second level of nesting  \n  setTimeout(function() {  \n    console.log('Operation 2');  \n    callback2();  \n  }, 1000);  \n}  \nfunction operation3(callback3) {  \n  // Third level of nesting  \n  setTimeout(function() {  \n    console.log('Operation 3');  \n    callback3();  \n  }, 1000);  \n}  \noperation1(function() {  \n  operation2(function() {  \n    operation3(function() {  \n      console.log('All operations completed!');  \n    });  \n  });  \n});\n```\n\nPromise\n=======\n\nPromises were introduced in ECMAScript 6 as an alternative to callbacks. A promise is an object representing the eventual completion or failure of an asynchronous operation. They provide a more flexible and expressive way to write asynchronous code than callbacks, as they allow developers to chain multiple asynchronous operations and handle errors in a more structured and easy-to-read manner. Promises are easier to manage than callbacks, but they still require a fair amount of boilerplate code.\n\n```js\nfunction fetchData() {  \n  return new Promise(function(resolve, reject) {  \n    // Simulate a delay of 2 seconds (2000 milliseconds)  \n    setTimeout(function() {  \n      const data = {  \n        name: \"John Doe\",  \n        age: 30,  \n        city: \"New York\"  \n      };  \nif (data) {  \n        resolve(data);  \n      } else {  \n        reject(\"Error fetching data.\");  \n      }  \n    }, 2000);  \n  });  \n}  \nfetchData()  \n  .then(function(data) {  \n    console.log(data);  \n  })  \n  .catch(function(error) {  \n    console.log(error);  \n  });\n```\n\nPromise Chaining\n================\n\nPromise chaining is a technique for managing multiple asynchronous operations in a specific order using Promises. It involves returning a Promise from a `**then()**` callback function, which can then be chained with another `**then()**` function.\n\nWhen chaining Promises, each `**then()**` callback function is executed after the previous Promise has resolved. The result of the previous Promise is passed as an argument to the `**then()**` callback function, which can then return a new Promise to continue the chain.\n\nBy chaining Promises together, we can perform a series of asynchronous operations in a specific order, without having to nest multiple callback functions within each other (known as “callback hell”). This makes the code easier to read and maintain.\n\n```js\nfunction fetchUserData() {  \n  return new Promise(function(resolve, reject) {  \n    setTimeout(function() {  \n      const userData = {  \n        name: \"John Doe\",  \n        age: 30,  \n        city: \"New York\"  \n      };  \nif (userData) {  \n        resolve(userData);  \n      } else {  \n        reject(\"Error fetching user data.\");  \n      }  \n    }, 2000);  \n  });  \n}  \nfunction fetchOrdersData(userId) {  \n  return new Promise(function(resolve, reject) {  \n    setTimeout(function() {  \n      const ordersData = {  \n        id: \"123456\",  \n        userId: userId,  \n        items: [\"item1\", \"item2\", \"item3\"],  \n        totalPrice: 100  \n      };  \n      if (ordersData) {  \n        resolve(ordersData);  \n      } else {  \n        reject(\"Error fetching orders data.\");  \n      }  \n    }, 2000);  \n  });  \n}  \nfetchUserData()  \n  .then(function(userData) {  \n    console.log(userData);  \n    return fetchOrdersData(userData.id);  \n  })  \n  .then(function(ordersData) {  \n    console.log(ordersData);  \n  })  \n  .catch(function(error) {  \n    console.log(error);  \n  });\n```\n\n`async` / `await`\n=================\n\nThe async/await syntax, introduced in ECMAScript 2017, provides a cleaner and more concise way of working with promises. Async/await is built on top of promises, and it allows developers to write asynchronous code that looks more like synchronous code. Async/await uses the keywords `**async**` and `**await**` to manage promises, making it easier to handle errors and write cleaner code. It is quickly becoming the preferred way of handling asynchronous programming in JavaScript.\n\n```js\nfunction fetchData() {  \n  return new Promise(function(resolve, reject) {  \n    // Simulate a delay of 2 seconds (2000 milliseconds)  \n    setTimeout(function() {  \n      const data = {  \n        name: \"John Doe\",  \n        age: 30,  \n        city: \"New York\"  \n      };  \nif (data) {  \n        resolve(data);  \n      } else {  \n        reject(\"Error fetching data.\");  \n      }  \n    }, 2000);  \n  });  \n}  \nasync function getData() {  \n  try {  \n    const data = await fetchData();  \n    console.log(data);  \n  } catch (error) {  \n    console.log(error);  \n  }  \n}  \ngetData();\n```\n\nIn conclusion, asynchronous programming is a powerful technique that allows JavaScript to handle long-running tasks without disrupting the user experience. By using callbacks, promises, and async/await, developers can write more efficient and maintainable code, resulting in better performing applications."},{"id":"scheduling-in-js","metadata":{"permalink":"/blog/scheduling-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/17-scheduling-in-js.md","source":"@site/blog/javascript/17-scheduling-in-js.md","title":"Scheduling in JS","description":"JavaScript is a programming language that is widely used for building web applications. One of the important features of JavaScript is scheduling, which allows developers to execute code at a specific time or after a certain interval.","date":"2024-05-15T13:15:30.742Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":1.425,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"scheduling-in-js","title":"Scheduling in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Asynchronous Programming in JS","permalink":"/blog/asynchronous-programming-in-js"},"nextItem":{"title":"Error Handling in JS","permalink":"/blog/error-handling-in-js"}},"content":"JavaScript is a programming language that is widely used for building web applications. One of the important features of JavaScript is scheduling, which allows developers to execute code at a specific time or after a certain interval.\n<!-- truncate -->\n\nsetTimeout()\n============\n\nThe `setTimeout()` function is used to execute a function after a certain delay. The delay is specified in milliseconds. Here is an example of using `setTimeout()`:\n\n```js\nsetTimeout(function() {  \n  console.log(\"Hello, World!\");  \n}, 3000);\n```\n\nIn this example, the function `console.log()` will be executed after a delay of 3 seconds.\n\nsetInterval()\n=============\n\nThe `setInterval()` function is used to execute a function repeatedly after a certain interval. The interval is specified in milliseconds. Here is an example of using `setInterval()`:\n\n```js\nsetInterval(function() {  \n  console.log(\"Hello, World!\");  \n}, 1000);\n```\n\nIn this example, the function `console.log()` will be executed every 1 second.\n\nclearTimeout()\n==============\n\nThe `clearTimeout()` function is used to cancel a `setTimeout()` function. Here is an example of using `clearTimeout()`:\n\n```js\nvar timeoutID = setTimeout(function() {  \n  console.log(\"Hello, World!\");  \n}, 3000);  \nclearTimeout(timeoutID);\n```\n\nIn this example, the `setTimeout()` function will be cancelled before it has a chance to execute.\n\nclearInterval()\n===============\n\nThe `clearInterval()` function is used to cancel a `setInterval()` function. Here is an example of using `clearInterval()`:\n\n```js\nvar intervalID = setInterval(function() {  \n  console.log(\"Hello, World!\");  \n}, 1000);  \nclearInterval(intervalID);\n```\n\nIn this example, the `setInterval()` function will be cancelled and the code inside the function will no longer be executed.\n\nIn conclusion, scheduling is an important feature of JavaScript that allows developers to execute code at a specific time or after a certain interval. The `setTimeout()` and `setInterval()` functions are used to achieve this functionality. Additionally, the `clearTimeout()` and `clearInterval()` functions are used to cancel scheduled functions."},{"id":"error-handling-in-js","metadata":{"permalink":"/blog/error-handling-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/16-error-handling-in-js.md","source":"@site/blog/javascript/16-error-handling-in-js.md","title":"Error Handling in JS","description":"JavaScript is a programming language that is widely used for creating dynamic and interactive web pages. Like other programming languages, it is important to handle errors that may occur during the execution of JavaScript code.","date":"2024-05-15T13:15:30.724Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":5.07,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"error-handling-in-js","title":"Error Handling in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Scheduling in JS","permalink":"/blog/scheduling-in-js"},"nextItem":{"title":"Advanced Datatypes in JS","permalink":"/blog/advanced-datatypes-in-js"}},"content":"JavaScript is a programming language that is widely used for creating dynamic and interactive web pages. Like other programming languages, it is important to handle errors that may occur during the execution of JavaScript code.\n<!-- truncate -->\n\nTypes of Errors in JS\n=====================\n\nThere are three types of errors that can occur in JavaScript code:\n\n1.  **Syntax Errors**: These are errors that occur when there is a mistake in the syntax of the code. For example, missing semicolons or brackets can cause syntax errors.\n2.  **Runtime Errors**: These are errors that occur during the execution of the code. For example, trying to access an undefined variable can cause a runtime error.\n3.  **Logical Errors**: These are errors that occur when the code does not do what it is supposed to do. For example, a function that returns the wrong value.\n\nError Handling Techniques in JS\n===============================\n\nThere are several techniques that can be used to handle errors in JavaScript code:\n\nTry-Catch Statement\n===================\n\nIn JavaScript, the try-catch statement is used to handle exceptions or errors that may occur in a block of code. The try block contains the code that may cause an exception, and the catch block handles the exception if it is thrown.\n\nHere’s the basic syntax of the try-catch statement in JavaScript:\n\n```js\ntry {  \n  // code that may cause an exception  \n} catch (error) {  \n  // code to handle the exception  \n}\n```\n\nThe `**try**` block contains the code that may cause an exception. If an exception is thrown, JavaScript will jump out of the `**try**` block and into the `**catch**` block. The `**catch**` block takes an error object as a parameter, which contains information about the exception that was thrown.\n\nHere’s an example that demonstrates the use of the try-catch statement in JavaScript:\n\n```js\njavascriptCopy code  \nfunction divide(a, b) {  \n  try {  \n    if (b === 0) {  \n      throw new Error('Cannot divide by zero');  \n    }  \n    return a / b;  \n  } catch (error) {  \n    console.log(error.message);  \n    return null;  \n  }  \n}  \nconsole.log(divide(10, 5)); // Output: 2  \nconsole.log(divide(10, 0)); // Output: Cannot divide by zero, null\n```\n\nWhen an exception is thrown and caught using a `**catch**` block, the `**catch**` block receives an `**error**` object that contains information about the exception that was thrown. The `**error**` object has several properties that you can use to get more information about the exception. Some of the most commonly used properties are:\n\n*   `**message**`: A string that contains a description of the exception.\n*   `**name**`: A string that contains the name of the exception. This is usually the name of the constructor function that was used to create the exception.\n*   `**stack**`: A string that contains a stack trace of the call stack at the time the exception was thrown. This can be useful for debugging purposes.\n\nHere is an example that demonstrates how to use the `**error**` object to handle an exception:\n\n```js\ntry {  \n  // Some code that might throw an exception  \n} catch (error) {  \n  console.error('An error occurred:', error.message);  \n  console.error('Error name:', error.name);  \n  console.error('Stack trace:', error.stack);  \n}\n```\n\nThrow Statement\n===============\n\nIn JavaScript, the `**throw**` statement is used to throw an exception. When an exception is thrown, the JavaScript interpreter immediately stops executing the current function and looks for the nearest exception handling code to catch and handle the exception.\n\nThe basic syntax for the `**throw**` statement is as follows:\n\n```js\nthrow expression;\n```\n\nThe `**expression**` can be any value or object that represents the exception that you want to throw. For example, you can throw a string, a number, an object, or an error.\n\nHere is an example that demonstrates how to use the `**throw**` statement to throw a custom error message:\n\n```js\nfunction divide(a, b) {  \n  if (b === 0) {  \n    throw 'Cannot divide by zero';  \n  }  \n  return a / b;  \n}  \nconsole.log(divide(10, 0)); // Throws \"Cannot divide by zero\" exception\n```\n\nFinally Block\n=============\n\nThe `**finally**` block is a part of a `**try...catch**` statement in JavaScript. It is used to execute code that should always run, regardless of whether an exception was thrown or not. The `**finally**` block is optional, but if it is present, it is always executed, even if there is no `**catch**` block.\n\nHere’s an example:\n\n```js\ntry {  \n  // Code that may throw an exception  \n  // ...  \n} catch (error) {  \n  // Code to handle the exception  \n  // ...  \n} finally {  \n  // Code that should always run  \n  // ...  \n}\n```\n\nIn this example, the `**try**` block contains code that may throw an exception. If an exception is thrown, the `**catch**` block is executed to handle it. If there is no exception, the `**catch**` block is skipped.\n\nRegardless of whether an exception was thrown or not, the code in the `**finally**` block is always executed. This can be useful for performing cleanup tasks, such as closing files or releasing resources.\n\nHere’s an example of how you could use the `**finally**` block:\n\n```js\nfunction divide(a, b) {  \n  try {  \n    return a / b;  \n  } catch (error) {  \n    console.error('An error occurred:', error);  \n  } finally {  \n    console.log('Division operation completed');  \n  }  \n}  \nconsole.log(divide(10, 2));  // Output: 5  \nconsole.log(divide(10, 0));  // Output: Infinity\n```\n\nCustom Error Class\n==================\n\nIn JavaScript, you can create custom error classes by extending the built-in `**Error**` class. This can be useful when you want to create specific types of errors for your application that have their own unique properties and behaviors. Here's an example of how you can create a custom error class:\n\n```js\nclass MyError extends Error {  \n  constructor(message, code) {  \n    super(message);  \n    this.code = code;  \n    this.name = 'MyError';  \n  }  \n}\n```\n\nHere’s an example of how you can use this custom error class:\n\n```js\nfunction myFunction() {  \n  throw new MyError('An error occurred', 500);  \n}  \ntry {  \n  myFunction();  \n} catch (error) {  \n  console.error(error.name);    // Output: \"MyError\"  \n  console.error(error.message); // Output: \"An error occurred\"  \n  console.error(error.code);    // Output: 500  \n}\n```\n\nIn conclusion, error handling is an important part of writing JavaScript code. By using techniques such as try-catch statements, throw statements, and finally blocks, you can effectively handle errors that may occur during the execution of your code."},{"id":"advanced-datatypes-in-js","metadata":{"permalink":"/blog/advanced-datatypes-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/15-advanced-datatypes-in-js.md","source":"@site/blog/javascript/15-advanced-datatypes-in-js.md","title":"Advanced Datatypes in JS","description":"JavaScript is an object-oriented programming language that has been around for quite some time now. It allows developers to create complex applications with ease. While working with JavaScript, developers often come across data types that are not commonly found in other programming languages. In this blog post, we will explore some of the advanced data types in JavaScript, including Map, Set, and Date.","date":"2024-05-15T13:15:30.712Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":5.345,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"advanced-datatypes-in-js","title":"Advanced Datatypes in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Error Handling in JS","permalink":"/blog/error-handling-in-js"},"nextItem":{"title":"Class in JS","permalink":"/blog/class-in-js"}},"content":"JavaScript is an object-oriented programming language that has been around for quite some time now. It allows developers to create complex applications with ease. While working with JavaScript, developers often come across data types that are not commonly found in other programming languages. In this blog post, we will explore some of the advanced data types in JavaScript, including Map, Set, and Date.\n<!-- truncate -->\n\nMap\n===\n\nIn JavaScript, the `**Map**` data type is an object that allows you to store key-value pairs, where the key and value can be of any data type. Unlike regular objects, `**Map**` maintains the order of key-value pairs and provides various methods to access and manipulate the data.\n\nHere is an example of how to create a new `**Map**` object:\n\n```js\nconst myMap = new Map();\n```\n\nYou can add new key-value pairs to a `**Map**` using the `**set()**` method:\n\n```js\nmyMap.set('key1', 'value1');  \nmyMap.set(2, 'value2');  \nmyMap.set(true, 'value3');\n```\n\nYou can also chain the `**set()**` method to add multiple key-value pairs in a single line:\n\n```js\nmyMap.set('key4', 'value4').set('key5', 'value5');\n```\n\nTo access the value of a key in a `**Map**`, you can use the `**get()**` method:\n\n```js\nconsole.log(myMap.get('key1')); // displays 'value1'  \nconsole.log(myMap.get(2)); // displays 'value2'  \nconsole.log(myMap.get(true)); // displays 'value3'\n```\n\nYou can check if a key exists in a `**Map**` using the `**has()**` method:\n\n```js\nconsole.log(myMap.has('key1')); // displays true  \nconsole.log(myMap.has('key3')); // displays false\n```\n\nYou can also remove a key-value pair from a `**Map**` using the `**delete()**` method:\n\n```js\nmyMap.delete('key1');  \nconsole.log(myMap.has('key1')); // displays false\n```\n\n`**Map**` objects have a `**size**` property that returns the number of key-value pairs in the map:\n\n```js\nconsole.log(myMap.size); // displays 5\n```\n\nOne of the most powerful features of `**Map**` is the ability to use any data type as keys. For example, you can use objects, arrays, or even functions as keys:\n\n```js\nconst myObj = {name: 'John', age: 30};  \nconst myFunc = () => console.log('Hello!');  \nmyMap.set(myObj, 'value6');  \nmyMap.set(myFunc, 'value7');  \nconsole.log(myMap.get(myObj)); // displays 'value6'  \nconsole.log(myMap.get(myFunc)); // displays 'value7'\n```\n\nOverall, the `**Map**` data type is a versatile and powerful tool for storing and manipulating key-value pairs in JavaScript.\n\nSet\n===\n\nIn JavaScript, the `**Set**` data type is an object that allows you to store unique values of any data type, whether primitive values or object references. Unlike arrays, `**Set**` maintains the order of elements and ensures that each element is unique.\n\nHere is an example of how to create a new `**Set**` object:\n\n```js\nconst mySet = new Set();\n```\n\nYou can add elements to a `**Set**` using the `**add()**` method:\n\n```js\nmySet.add('value1');  \nmySet.add(2);  \nmySet.add(true);\n```\n\nYou can also chain the `**add()**` method to add multiple elements in a single line:\n\n```js\nmySet.add('value4').add('value5');\n```\n\nTo access elements in a `**Set**`, you can use the `**has()**` method:\n\n```js\nconsole.log(mySet.has('value1')); // displays true  \nconsole.log(mySet.has(2)); // displays true  \nconsole.log(mySet.has(false)); // displays false\n```\n\nYou can remove elements from a `**Set**` using the `**delete()**` method:\n\n```js\nmySet.delete('value1');  \nconsole.log(mySet.has('value1')); // displays false\n```\n\n`**Set**` objects have a `**size**` property that returns the number of elements in the set:\n\n```js\nconsole.log(mySet.size); // displays 4\n```\n\nOne of the most powerful features of `**Set**` is the ability to use any data type as elements. For example, you can use objects, arrays, or even functions as elements:\n\n```js\nconst myObj = {name: 'John', age: 30};  \nconst myFunc = () => console.log('Hello!');  \nmySet.add(myObj);  \nmySet.add(myFunc);  \nconsole.log(mySet.has(myObj)); // displays true  \nconsole.log(mySet.has(myFunc)); // displays true\n```\n\nYou can also iterate through the elements of a `**Set**` using the `**forEach()**` method or a `**for...of**` loop:\n\n```js\nmySet.forEach((value) => console.log(value));  \n// displays 'value4', 'value5', {name: 'John', age: 30}, and the function myFunc  \nfor (const value of mySet) {  \n  console.log(value);  \n}  \n// same as above\n```\n\nOverall, the `**Set**` data type is a useful tool for storing and manipulating unique elements of any data type in JavaScript.\n\nDate\n====\n\nIn JavaScript, the `**Date**` data type is used to represent dates and times. The `**Date**` object is based on a time value that is the number of milliseconds since January 1, 1970, 00:00:00 UTC (Coordinated Universal Time).\n\nHere is an example of how to create a new `**Date**` object:\n\n```js\nconst currentDate = new Date();\n```\n\nThis will create a `**Date**` object representing the current date and time.\n\nYou can also create a `**Date**` object by passing a specific date and time as a string to the `**Date**` constructor. The string must be in a format recognized by the `**Date.parse()**` method. For example:\n\n```js\nconst specificDate = new Date('March 10, 2023 10:30:00');\n```\n\nThis will create a `**Date**` object representing the date and time March 10, 2023 at 10:30:00 AM.\n\nOnce you have a `**Date**` object, you can use various methods to get or set specific parts of the date and time. Here are some examples:\n\n```js\nconst currentDate = new Date();  \n// get the year  \nconst year = currentDate.getFullYear(); // returns 2023  \n// get the month (0-indexed)  \nconst month = currentDate.getMonth(); // returns 2 (March)  \n// get the day of the month  \nconst day = currentDate.getDate(); // returns 10  \n// get the day of the week (0-indexed, with Sunday being 0)  \nconst dayOfWeek = currentDate.getDay(); // returns 5 (Friday)  \n// get the hour  \nconst hour = currentDate.getHours(); // returns 10  \n// get the minutes  \nconst minutes = currentDate.getMinutes(); // returns 45  \n// get the seconds  \nconst seconds = currentDate.getSeconds(); // returns 30  \n// get the milliseconds  \nconst milliseconds = currentDate.getMilliseconds(); // returns 0\n```\n\nYou can also set specific parts of the date and time using methods like `**setFullYear()**`, `**setMonth()**`, `**setDate()**`, `**setHours()**`, `**setMinutes()**`, `**setSeconds()**`, and `**setMilliseconds()**`.\n\n```js\ncurrentDate.setFullYear(2024); // set the year to 2024\n```\n\nYou can also use the `**getTime()**` method to get the number of milliseconds since January 1, 1970, 00:00:00 UTC, and the `**setTime()**` method to set the date and time based on a specified number of milliseconds.\n\n```js\nconst timestamp = currentDate.getTime(); // get the number of milliseconds since 1970  \nconst newDate = new Date();  \nnewDate.setTime(timestamp); // set the date and time based on the timestamp\n```\n\nIn addition, the `**Date**` object provides various methods for formatting and parsing dates and times. For example, the `**toLocaleString()**` method returns a string representation of the date and time in a specific locale format.\n\n```js\nconst currentDate = new Date();  \nconst formattedDate = currentDate.toLocaleString('en-US'); // returns \"3/10/2023, 10:45:30 AM\"\n```\n\nOverall, the `**Date**` data type in JavaScript provides a powerful and flexible way to work with dates and times in your code."},{"id":"class-in-js","metadata":{"permalink":"/blog/class-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/14-class-in-js.md","source":"@site/blog/javascript/14-class-in-js.md","title":"Class in JS","description":"Object-Oriented Programming (OOP) is a popular paradigm used in modern programming languages to organize code and data into reusable and modular components. JavaScript, although originally designed as a scripting language, has gained significant support for OOP. In this blog, we’ll discuss the principles of OOP in JavaScript and how to use them effectively.","date":"2024-05-15T13:15:30.695Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":7.005,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"class-in-js","title":"Class in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Advanced Datatypes in JS","permalink":"/blog/advanced-datatypes-in-js"},"nextItem":{"title":"Function Binding in JS","permalink":"/blog/function-binding-in-js"}},"content":"Object-Oriented Programming (OOP) is a popular paradigm used in modern programming languages to organize code and data into reusable and modular components. JavaScript, although originally designed as a scripting language, has gained significant support for OOP. In this blog, we’ll discuss the principles of OOP in JavaScript and how to use them effectively.\n<!-- truncate -->\n\nDefining a Class\n================\n\nThe syntax for defining a class in JavaScript is as follows:\n\n```js\nclass MyClass {  \n  constructor(arg1, arg2) {  \n    this.property1 = arg1;  \n    this.property2 = arg2;  \n  }  \nmethod1() {  \n    // Method code here  \n  }  \n  method2() {  \n    // Method code here  \n  }  \n}\n```\n\nOnce you have defined a class, you can create an instance of the class using the `**new**` keyword:\n\n```js\nconst myInstance = new MyClass('value1', 'value2');\n```\n\nProperties\n==========\n\nIn JavaScript classes, properties are defined in the constructor method and are assigned to the `**this**` keyword, which refers to the instance of the class. Here's an example of defining properties inside a class:\n\n```js\nclass Person {  \n  constructor(name, age) {  \n    this.name = name;  \n    this.age = age;  \n  }  \nget occupation() {  \n    return 'Software Developer';  \n  }  \n}  \nconst john = new Person('John', 30);  \nconsole.log(john.occupation); // 'Software Developer'\n```\n\nMethods\n=======\n\nIn JavaScript classes, methods are functions that are defined inside the class body and are available on instances of the class. Here’s an example of defining methods inside a class:\n\n```js\nclass Person {  \n  constructor(name, age) {  \n    this.name = name;  \n    this.age = age;  \n  }  \nsayHello() {  \n    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);  \n  }  \n}  \nconst john = new Person('John', 30);  \njohn.sayHello(); // \"Hello, my name is John and I am 30 years old.\"\n```\n\nStatic Methods and Properties\n=============================\n\nIn JavaScript classes, static methods and properties are defined using the `**static**` keyword. Static methods and properties are associated with the class itself, rather than with instances of the class. Here's an example of defining static methods and properties in a class:\n\n```\nclass Person {  \n  constructor(name, age) {  \n    this.name = name;  \n    this.age = age;  \n  }  \nsayHello() {  \n    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);  \n  }  \n  static create(name, age) {  \n    return new Person(name, age);  \n  }  \n  static defaultOccupation = 'Software Developer';  \n}  \nconsole.log(Person.defaultOccupation); // \"Software Developer\"  \nconst john = Person.create('John', 30);  \njohn.sayHello(); // \"Hello, my name is John and I am 30 years old.\"\n```\n\nConstructor Parameters\n======================\n\nIn JavaScript classes, the `**constructor**` method is a special method that is called when an instance of the class is created. The `**constructor**` method is used to initialize the instance properties of the class.\n\n```\nclass Person {  \n  constructor(name, age) {  \n    this.name = name;  \n    this.age = age;  \n  }  \n}\n```\n\nYou can also use the `**constructor**` method to perform additional setup tasks or to check the validity of the arguments. For example:\n\n```\nclass Person {  \n  constructor(name, age) {  \n    if (typeof name !== 'string') {  \n      throw new TypeError('Name must be a string');  \n    }  \nif (typeof age !== 'number') {  \n      throw new TypeError('Age must be a number');  \n    }  \n    this.name = name;  \n    this.age = age;  \n  }  \n  sayHello() {  \n    console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);  \n  }  \n}\n```\n\nInheritance\n===========\n\nInheritance is an important concept in object-oriented programming that allows you to create new classes based on existing classes. In JavaScript, you can use the `**extends**` keyword to create a subclass that inherits from a superclass.\n\n```\nclass Animal {  \n  constructor(name) {  \n    this.name = name;  \n  }  \nspeak() {  \n    console.log(`${this.name} makes a noise.`);  \n  }  \n}  \nclass Dog extends Animal {  \n  speak() {  \n    console.log(`${this.name} barks.`);  \n  }  \n}  \nclass Cat extends Animal {  \n  speak() {  \n    console.log(`${this.name} meows.`);  \n  }  \n}  \nconst dog = new Dog('Fido');  \nconst cat = new Cat('Whiskers');  \ndog.speak(); // \"Fido barks.\"  \ncat.speak(); // \"Whiskers meows.\"\n```\n\nInheritance in JavaScript allows you to reuse code and create a hierarchy of classes with different levels of specificity. You can also extend from built-in class.\n\n```\nclass MyArray extends Array {  \n  constructor(...args) {  \n    super(...args);  \n  }  \ngetFirst() {  \n    return this[0];  \n  }  \n  getLast() {  \n    return this[this.length - 1];  \n  }  \n}  \nconst myArray = new MyArray(1, 2, 3, 4, 5);  \nconsole.log(myArray.getFirst()); // 1  \nconsole.log(myArray.getLast()); // 5  \nconsole.log(myArray instanceof Array); // true  \nconsole.log(myArray instanceof MyArray); // true\n```\n\nOverriding Methods\n==================\n\nIn object-oriented programming, method overriding is the process of defining a method in a subclass that has the same name and signature as a method in its superclass. The purpose of overriding a method is to change its implementation in the subclass to provide specialized behavior.\n\nIn JavaScript, you can override a method in a subclass by simply defining a new method with the same name as the method you want to override. Here’s an example:\n\n```\nclass Animal {  \n  speak() {  \n    console.log('The animal makes a noise.');  \n  }  \n}  \nclass Dog extends Animal {  \n  speak() {  \n    console.log('The dog barks.');  \n  }  \n}  \nconst dog = new Dog();  \ndog.speak(); // \"The dog barks.\"\n```\n\nCalling Superclass Methods\n==========================\n\nThe `**super**` keyword is used in JavaScript to access and call functions or methods in a parent or superclass.\n\nWhen you define a class that extends another class, you can use the `**super**` keyword to call the constructor and methods of the parent class. Here's an example:\n\n```\nclass Animal {  \n  constructor(name) {  \n    this.name = name;  \n  }  \nspeak() {  \n    console.log(`${this.name} makes a noise.`);  \n  }  \n}  \nclass Dog extends Animal {  \n  constructor(name) {  \n    super(name);  \n  }  \n  speak() {  \n    super.speak();  \n    console.log(`${this.name} barks.`);  \n  }  \n}  \nconst dog = new Dog('Fido');  \ndog.speak(); // \"Fido makes a noise.\" \"Fido barks.\"\n```\n\nPrivate and Protected Fields\n============================\n\nJavaScript does not have built-in support for private and protected properties in classes, but the `**#**` symbol can be used to denote private fields in more recent versions of JavaScript (ES2022 or later).\n\nIn JavaScript, protected properties are typically denoted by prefixing their names with an underscore, like `**_name**` or `**_age**`. This convention indicates that the property should not be accessed or modified from outside the class, but can still be accessed and modified by subclasses.\n\n```\nclass Person {  \n  #name;  \n  _age;  \nconstructor(name, age) {  \n    this.#name = name;  \n    this._age = age;  \n  }  \n  sayHello() {  \n    console.log(`Hello, my name is ${this.#name} and I am ${this._age} years old.`);  \n  }  \n}  \nclass Employee extends Person {  \n  #salary;  \n  constructor(name, age, salary) {  \n    super(name, age);  \n    this.#salary = salary;  \n  }  \n  sayHello() {  \n    console.log(`Hello, my name is ${this.#name} and I am ${this._age} years old. My salary is ${this.#salary}.`);  \n  }  \n}  \nconst john = new Person('John', 30);  \nconsole.log(john.#name); // This will cause a syntax error since #name is private  \nconsole.log(john._age); // \"30\" - this is technically allowed but goes against the convention of protected properties  \nconst bob = new Employee('Bob', 35, 50000);  \nconsole.log(bob.#salary); // This will cause a syntax error since #salary is private  \nbob.sayHello(); // \"Hello, my name is Bob and I am 35 years old. My salary is 50000.\"\n```\n\nGetter and Setter\n=================\n\nGetters and setters are methods in JavaScript classes that allow you to control access to an object’s properties.\n\nA getter is a method that gets the value of a property. It is defined using the `**get**` keyword and can be used to access a property without directly accessing it. A setter is a method that sets the value of a property. It is defined using the `**set**` keyword and can be used to set the value of a property using a function call. Here's an example:\n\n```\nclass Person {  \n  constructor(name) {  \n    this.#name = name;  \n  }  \nget name() {  \n    return this.#name.toUpperCase();  \n  }  \n  set name(newName) {  \n    this.#name = newName.toLowerCase();  \n  }  \n}  \nconst person = new Person('John');  \nconsole.log(person.name); // \"JOHN\"  \nperson.name = 'Jane';  \nconsole.log(person.name); // \"jane\"\n```\n\n`instanceof` method\n===================\n\n`**instanceof**` is a built-in operator in JavaScript that allows you to check whether an object is an instance of a particular class or constructor function. It returns a boolean value indicating whether the object is an instance of the specified class.\n\n```\nclass Person {  \n  constructor(name) {  \n    this.name = name;  \n  }  \n}  \nclass Student extends Person {  \n  constructor(name, grade) {  \n    super(name);  \n    this.grade = grade;  \n  }  \n}  \nconst person = new Person('John');  \nconst student = new Student('Jane', 10);  \nconsole.log(person instanceof Person); // true  \nconsole.log(person instanceof Student); // false  \nconsole.log(student instanceof Person); // true  \nconsole.log(student instanceof Student); // true\n```\n\nConclusion\n==========\n\nClasses in JavaScript provide a way to define objects with properties and methods. They are a powerful tool for organizing code and creating reusable components. With the ability to inherit from other classes, JavaScript classes provide a flexible and extensible programming model."},{"id":"function-binding-in-js","metadata":{"permalink":"/blog/function-binding-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/13-function-binding-in-js.md","source":"@site/blog/javascript/13-function-binding-in-js.md","title":"Function Binding in JS","description":"JavaScript is a versatile language that allows developers to create complex applications with ease. One of the language’s most powerful features is its ability to manipulate the behavior of functions through binding.","date":"2024-05-15T13:15:30.677Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":6.77,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"function-binding-in-js","title":"Function Binding in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Class in JS","permalink":"/blog/class-in-js"},"nextItem":{"title":"Protype in JS","permalink":"/blog/protype-in-js"}},"content":"JavaScript is a versatile language that allows developers to create complex applications with ease. One of the language’s most powerful features is its ability to manipulate the behavior of functions through binding.\n<!-- truncate -->\n\nUnderstanding Binding\n=====================\n\nIn JavaScript, binding refers to the process of assigning a specific context or value to the ‘this’ keyword inside a function. By default, the ‘this’ keyword refers to the global object, but when a function is bound to a specific context or value, ‘this’ will refer to that context instead.\n\nFor example, consider the following code snippet:\n\n```js\nconst person = {  \n  name: 'John',  \n  greet: function() {  \n    console.log(`Hello, my name is ${this.name}`);  \n  }  \n}  \nperson.greet(); // Output: Hello, my name is John\n```\n\nIn this example, the ‘this’ keyword inside the ‘greet’ method refers to the ‘person’ object. We can also bind the ‘greet’ method to a different context by using the ‘bind’ method, like so:\n\n```js\nconst anotherPerson = {  \n  name: 'Sarah'  \n}  \nconst greetAnotherPerson = person.greet.bind(anotherPerson);  \ngreetAnotherPerson(); // Output: Hello, my name is Sarah\n```\n\nHere, we have bound the ‘greet’ method to the ‘anotherPerson’ object using the ‘bind’ method. This means that when we call ‘greetAnotherPerson’, the ‘this’ keyword inside the ‘greet’ method will refer to the ‘anotherPerson’ object instead of the ‘person’ object.\n\nThe Benefits of Binding\n=======================\n\nBinding is a powerful tool in JavaScript because it allows developers to control the behavior of functions in a more flexible way. By binding a function to a specific context, we can ensure that it behaves consistently regardless of where it is called from. This is especially useful when working with objects that have methods, as it allows us to easily reuse those methods in different contexts.\n\nAnother benefit of binding is that it allows us to create new functions that inherit the behavior of existing functions. This is known as function currying and is a common technique used in functional programming. By binding some of the arguments of a function to specific values, we can create a new function that takes fewer arguments and behaves differently than the original function.\n\n`call` method\n=============\n\nThe `**call()**` method is a built-in JavaScript function that allows you to call a function with a specified `**this**` value and arguments provided individually, instead of as an array (as with the `**apply()**` method).\n\nThe main purpose of the `**call()**` method is to execute a function with a specified `**this**` value, so you can control the value of `**this**` inside a function when it is called. By default, the `**this**` keyword inside a function refers to the global `**window**` object in a web browser, or to the global `**global**` object in Node.js.\n\nHowever, by using the `**call()**` method, you can specify a different `**this**` value, such as an object that contains the properties and methods you want to use inside the function. This allows you to reuse a function with different objects and ensure that the function is executed in the correct context.\n\nIn addition to specifying a `**this**` value, the `**call()**` method also allows you to pass in arguments to the function individually, instead of as an array (as with the `**apply()**` method). This can be useful if you have a function that expects multiple arguments and you want to specify them individually, rather than as an array.\n\n```js\nconst person = {  \n  firstName: 'John',  \n  lastName: 'Doe',  \n  getFullName: function() {  \n    return this.firstName + ' ' + this.lastName;  \n  }  \n}  \nconst person2 = {  \n  firstName: 'Jane',  \n  lastName: 'Doe'  \n}  \nconst fullName = person.getFullName.call(person2);  \nconsole.log(fullName); // 'Jane Doe'\n```\n\n```js\nfunction greet(greeting, punctuation) {  \n  console.log(`${greeting}, ${this.name}${punctuation}`);  \n}  \nconst person = { name: 'John' };  \nconst args = ['Hello', '!'];  \n// Call greet with person as the this value and args as the arguments  \ngreet.apply(person, args);\n```\n\n`apply` method\n==============\n\nThe `**apply()**` method in JavaScript is used to call a function with a specified `**this**` value and arguments provided as an array. The main purpose of this method is to execute a function in a specific context or scope, which can be useful in scenarios where you want to reuse a function with different objects and ensure that the function is executed in the correct context.\n\nOne of the primary use cases of the `**apply()**` method is to set the value of the `**this**` keyword inside a function to a specific object. By passing in an object as the first argument to the `**apply()**` method, you can set the `**this**` keyword to that object when the function is called. This is especially useful in cases where the function is designed to work with a specific object's properties and methods.\n\nAnother advantage of the `**apply()**` method is that it allows you to pass in arguments to a function as an array. This can be useful if you have a function that expects multiple arguments, and you want to pass them in as an array rather than individually. The `**apply()**` method can also be used to call a function with a variable number of arguments since you can pass in the arguments as an array, and the function can then use the `**length**` property of the array to determine how many arguments were passed in.\n\n```js\nfunction greet(greeting, punctuation) {  \n  console.log(`${greeting}, ${this.name}${punctuation}`);  \n}  \nconst person = { name: 'John' };  \nconst args = ['Hello', '!'];  \n// Call greet with person as the this value and args as the arguments  \ngreet.apply(person, args);\n```\n\nThe `call` method is also use to call constructor of parent\n\n```js\nfunction Animal(name) {  \n  this.name = name;  \n}  \nfunction Cat(name, color) {  \n  Animal.call(this, name);  \n  this.color = color;  \n}  \nconst myCat = new Cat('Fluffy', 'orange');  \nconsole.log(myCat.name); // Fluffy  \nconsole.log(myCat.color); // orange\n```\n\n`bind` method\n=============\n\nIn JavaScript, the `**bind()**` method is used to create a new function that has a specific `**this**` value and, optionally, arguments that are pre-set. When the new function is called, the `**this**` keyword inside the function body will be bound to the value passed as the first argument to the `**bind()**` method.\n\nThe `**bind()**` method is commonly used in scenarios where a function needs to be passed as a callback or event handler, but the `**this**` value needs to be a specific object, and not the default `**this**` value that is determined by the context of the function call. By using `**bind()**`, you can ensure that the `**this**` value inside the function is always what you expect it to be.\n\n```js\nconst person = {  \n  name: 'John',  \n  greet: function() {  \n    console.log(`Hello, my name is ${this.name}.`);  \n  }  \n};  \nconst person1 = {  \n name: 'Jane',  \n}  \nconst boundGreet = person.greet.bind(person1);  \n// Call the boundGreet function  \nboundGreet();\n```\n\nDifference\n==========\n\nHere is difference between these three methods:\n\n1.  `**call**`: The `**call**` method invokes a function with a specified `**this**` value and arguments provided as a comma-separated list. The first argument of `**call**` is the `**this**` value, followed by any arguments the function requires.\n2.  `**apply**`: The `**apply**` method is similar to `**call**`, but the arguments are provided as an array. The first argument of `**apply**` is the `**this**` value, followed by an array of arguments.\n3.  `**bind**`: The `**bind**` method creates a new function with the same body as the original function, but with a specified `**this**` value. It returns a new function that can be called later with the provided `**this**` value and arguments.\n\n```js\nfunction greet(name) {  \n  console.log(`Hello, ${name}! My name is ${this.name}.`);  \n}  \nconst person1 = { name: 'John' };  \nconst person2 = { name: 'Alice' };  \ngreet.call(person1, 'Alice'); // Hello, Alice! My name is John.  \ngreet.apply(person2, ['Bob']); // Hello, Bob! My name is Alice.  \nconst boundGreet = greet.bind(person1);  \nboundGreet('Alice'); // Hello, Alice! My name is John.\n```\n\nBinding is a powerful technique in JavaScript that allows us to control the behavior of functions in a flexible way. By binding functions to specific contexts, we can ensure that they behave consistently regardless of where they are called from. We can also use binding to create new functions that inherit the behavior of existing functions. By mastering the basics of binding, developers can unlock the full potential of JavaScript and create applications that are both powerful and flexible."},{"id":"protype-in-js","metadata":{"permalink":"/blog/protype-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/12-protype-in-js.md","source":"@site/blog/javascript/12-protype-in-js.md","title":"Protype in JS","description":"JavaScript is an object-oriented programming (OOP) language that uses prototypes instead of classes for creating objects. Prototypes are a fundamental concept in JavaScript and understanding them is essential in creating efficient and effective code.","date":"2024-05-15T13:15:30.649Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":4.325,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"protype-in-js","title":"Protype in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Function Binding in JS","permalink":"/blog/function-binding-in-js"},"nextItem":{"title":"Regex Expressions in JS","permalink":"/blog/regex-expressions-in-js"}},"content":"JavaScript is an object-oriented programming (OOP) language that uses prototypes instead of classes for creating objects. Prototypes are a fundamental concept in JavaScript and understanding them is essential in creating efficient and effective code.\n<!-- truncate -->\n\nWhat is a Prototype?\n====================\n\nA prototype is an object that is associated with every constructor function in JavaScript that acts as a blueprint for creating new objects. When a new object is created using a constructor function, the prototype of the constructor function is set as the prototype of the new object. In other words, the prototype is like a template for the object, defining its properties and methods.\n\nPrototype Chain\n===============\n\nThe prototype chain is a series of links between objects. When a property is accessed on an object, JavaScript first looks for the property on the object itself. If the property is not found, JavaScript looks at the object’s prototype. If the property is not found on the prototype, JavaScript looks at the prototype’s prototype, and so on, until the property is found or until the end of the prototype chain is reached (which is the Object.prototype).\n\nThis concept of the prototype chain is essential to JavaScript programming, and understanding how it works is crucial. It allows developers to create complex and powerful code by building objects that are linked together in a chain of prototypes.\n\nCreating Prototypes\n===================\n\nPrototypes can be created in several ways in JavaScript. One way to create a prototype is to use the constructor function syntax:\n\n```js\nfunction Car(make, model, year) {  \n    this.make = make;  \n    this.model = model;  \n    this.year = year;  \n}  \nCar.prototype.getInfo = function() {  \n    return this.make + ' ' + this.model + ' (' + this.year + ')';  \n};\n```\n\nYou can initiate different instances of Car.\n\n```js\nconst car1 = new Car('Abc', 'Xyz', '2000');  \nconst car2 = new Car('Def', 'Uvw', '2020');  \ncar1.getInfo(); // Abc Xyz 2000\n```\n\nUsing Prototypes\n================\n\nAnother way is to use the object literal syntax. For example, let’s say we want to create a prototype object for a car:\n\n```js\nlet carPrototype = {  \n    make: 'Honda',  \n    model: 'Civic',  \n    year: 2021,  \n    getInfo: function() {  \n        return this.make + ' ' + this.model + ' (' + this.year + ')';  \n    }  \n};\n```\n\nOnce a prototype is created, it can be used to create new objects. To create a new object using a prototype, you can use the `Object.create()` method:\n\n```js\nlet myCar = Object.create(carPrototype);\n```\n\nIn this example, `myCar` is a new object that has `carPrototype` as its prototype. We can then access the properties and methods of `carPrototype` through `myCar`:\n\n```js\nconsole.log(myCar.make); // 'Honda'  \nconsole.log(myCar.model); // 'Civic'  \nconsole.log(myCar.year); // 2021  \nconsole.log(myCar.getInfo()); // 'Honda Civic (2021)'\n```\n\nModifying Prototypes\n====================\n\nPrototypes can be modified at runtime, which means that changes made to a prototype will affect all objects that are created using that prototype. For example, you can add a new property to a prototype like this:\n\n```js\ncarPrototype.color = 'red';\n```\n\nAll objects that are created using `carPrototype` will now have a `color` property with a value of `'red'`.\n\nRelated Methods\n===============\n\n1.  `Object.getPrototypeOf`\n\n```js\nconst person = {  \n  firstName: 'John',  \n  lastName: 'Doe',  \n  getFullName() {  \n    return `${this.firstName} ${this.lastName}`;  \n  }  \n};  \nconst john = Object.create(person);  \nconsole.log(Object.getPrototypeOf(john) === person); // true\n```\n\n1.  `Object.setPrototypeOf`\n\n```js\nconst person = {  \n  firstName: 'John',  \n  lastName: 'Doe',  \n  getFullName() {  \n    return `${this.firstName} ${this.lastName}`;  \n  }  \n};  \nconst john = {};  \nObject.setPrototypeOf(john, person);  \nconsole.log(john.getFullName()); // John Doe\n```\n\n1.  `Object.prototype.isPrototypeOf()`\n\n```js\nconst person = {  \n  firstName: 'John',  \n  lastName: 'Doe',  \n  getFullName() {  \n    return `${this.firstName} ${this.lastName}`;  \n  }  \n};  \nconst john = Object.create(person);  \nconsole.log(person.isPrototypeOf(john)); // true\n```\n\n1.  `Object.prototype.hasOwnProperty()`\n\n```js\nconst person = {  \n  firstName: 'John',  \n  lastName: 'Doe',  \n  getFullName() {  \n    return `${this.firstName} ${this.lastName}`;  \n  }  \n};  \nconst john = Object.create(person);  \njohn.age = 25;  \nconsole.log(john.hasOwnProperty('age')); // true  \nconsole.log(john.hasOwnProperty('getFullName')); // false\n```\n\n1.  `Object.prototype.toString()`\n\n```js\nconst person = {  \n  firstName: 'John',  \n  lastName: 'Doe',  \n  getFullName() {  \n    return `${this.firstName} ${this.lastName}`;  \n  }  \n};  \nconsole.log(person.toString()); // [object Object]\n```\n\n1.  `Object.getOwnPropertyNames()`\n\n```js\nconst person = {  \n  firstName: 'John',  \n  lastName: 'Doe',  \n  getFullName() {  \n    return `${this.firstName} ${this.lastName}`;  \n  }  \n};  \nconst john = Object.create(person);  \njohn.age = 25;  \nconsole.log(Object.getOwnPropertyNames(john)); // [\"age\"]\n```\n\n1.  `Object.defineProperties()`\n\n```js\nconst person = {};  \nObject.defineProperties(person, {  \n  firstName: {  \n    value: 'John',  \n    writable: true,  \n    enumerable: true,  \n    configurable: true  \n  },  \n  lastName: {  \n    value: 'Doe',  \n    writable: true,  \n    enumerable: true,  \n    configurable: true  \n  },  \n  fullName: {  \n    get() {  \n      return `${this.firstName} ${this.lastName}`;  \n    },  \n    enumerable: true,  \n    configurable: true  \n  }  \n});  \nconsole.log(person.fullName); // \"John Doe\"\n```\n\n```js\nconst person = {  \n  firstName: 'John',  \n  lastName: 'Doe'  \n};  \nconsole.log(person.propertyIsEnumerable('firstName')); // true  \nconsole.log(person.propertyIsEnumerable('toString')); // false\n```\n\n1.  `Object.prototype.propertyIsEnumerable()`\n2.  `Object.getOwnPropertyDescriptors()`\n\n```js\nconst person = {  \n  firstName: 'John',  \n  lastName: 'Doe'  \n};  \nObject.defineProperty(person, 'age', {  \n  value: 25,  \n  writable: true,  \n  enumerable: true,  \n  configurable: true  \n});  \nconst descriptors = Object.getOwnPropertyDescriptors(person);  \nconsole.log(descriptors.firstName); // { value: 'John', writable: true, enumerable: true, configurable: true }  \nconsole.log(descriptors.age); // { value: 25, writable: true, enumerable: true, configurable: true }\n```\n\nPrototypes are a fundamental concept in JavaScript and are essential in creating efficient and effective code. By understanding the prototype chain and how to create and use prototypes, you can take your JavaScript programming skills to the next level. With prototypes, you can create powerful objects that are linked together in a chain, providing a flexible and scalable way to build complex applications."},{"id":"regex-expressions-in-js","metadata":{"permalink":"/blog/regex-expressions-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/11-regex-expressions-in-js.md","source":"@site/blog/javascript/11-regex-expressions-in-js.md","title":"Regex Expressions in JS","description":"JavaScript is a programming language that supports regular expressions (regex). A regular expression is a sequence of characters that specifies a search pattern. With regex, we can search and manipulate text data in a more efficient and flexible way. In this document, we will explore how to use regular expressions in JavaScript.","date":"2024-05-15T13:15:30.641Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":5.01,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"regex-expressions-in-js","title":"Regex Expressions in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Protype in JS","permalink":"/blog/protype-in-js"},"nextItem":{"title":"Object Methods in JS","permalink":"/blog/object-methods-in-js"}},"content":"JavaScript is a programming language that supports regular expressions (regex). A regular expression is a sequence of characters that specifies a search pattern. With regex, we can search and manipulate text data in a more efficient and flexible way. In this document, we will explore how to use regular expressions in JavaScript.\n<!-- truncate -->\n\n**Flags:**\n\n*   `**g**`: Global match. This flag indicates that the regular expression should match all occurrences in the input string, rather than just the first one.\n*   `**i**`: Case-insensitive match. This flag indicates that the regular expression should match regardless of the casing of the input string.\n*   `**m**`: Multiline match. This flag indicates that the regular expression should match across multiple lines of the input string.\n\n**Patterns:**\n\n1.  Matching any character: `**.**`\n2.  Matching any digit: `**\\\\d**`\n3.  Matching any non-digit: `**\\\\D**`\n4.  Matching any whitespace character: `**\\\\s**`\n5.  Matching any non-whitespace character: `**\\\\S**`\n6.  Matching any word character: `**\\\\w**`\n7.  Matching any non-word character: `**\\\\W**`\n8.  Matching a specific number of characters: `**{n}**`\n9.  Matching zero or more occurrences: **``**\n10.  Matching one or more occurrences: `**+**`\n11.  Matching zero or one occurrence: `**?**`\n12.  Matching the start of a string: `**^**`\n13.  Matching the end of a string: `**$**`\n14.  Matching a range of characters: `**[abc]**`\n15.  Matching any character not in a range: `**[^abc]**`\n16.  Matching any character in a range of characters: `**[a-z]**`\n17.  Matching any character not in a range of characters: `**[^a-z]**`\n18.  Matching any character except newline: `**[\\\\s\\\\S]**`\n19.  Matching a specific character: `**\\**`\n20.  Matching a specific word boundary: `**\\\\b**`\n21.  Matching a negative word boundary: `**\\\\B**`\n22.  Capturing a group of characters: `**( )**`\n23.  Non-capturing a group of characters: `**(?: )**`\n24.  Matching one of several patterns: `**(pattern1|pattern2|pattern3)**`\n25.  Using a backreference to match a previous captured group: `**\\\\n**`\n26.  Matching any number of characters lazily: `**?**`\n27.  Matching one or more characters lazily: `**+?**`\n28.  Matching a specific number of characters lazily: `**{n}?**`\n29.  Using lookahead to match a pattern only if it’s followed by another pattern: `**(?= )**`\n30.  Using lookbehind to match a pattern only if it’s preceded by another pattern: `**(?<= )**`\n\n```js\n// Matches all occurrences of the word \"dog\"  \nconst regex = /dog/g;  \n// Matches the word \"hello\" regardless of case  \nconst regex = /hello/i;  \n// Matches the pattern \"cat\" at the beginning of a string  \nconst regex = /^cat/;  \n// Matches the pattern \"bat\" at the end of a string  \nconst regex = /bat$/;  \n// Matches any vowel character  \nconst regex = /[aeiou]/;  \n// Matches any non-vowel character  \nconst regex = /[^aeiou]/;  \n// Matches either \"cat\" or \"dog\"  \nconst regex = /cat|dog/;  \n// Groups together \"hello\" and \"world\" and captures the result  \nconst regex = /(hello) (world)/;\n```\n\n**Most Used Regex Patterns**\n\n1.  Email addresses:\n\n*   `**\\\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Z|a-z]{2,}\\\\b**` - this matches most standard email addresses and ensures that the domain name ends with at least two letters.\n\n2\\. Phone numbers:\n\n*   `**\\\\b\\\\d{3}[-.]?\\\\d{3}[-.]?\\\\d{4}\\\\b**` - this matches most US phone numbers, with or without dashes or periods between groups of digits.\n\n3\\. URLs:\n\n*   `**(http(s)?://)?([\\\\w-]+\\\\.)+[\\\\w-]+(/[\\\\w- ;,./?%&=]*)?**` - this matches most standard URLs, including those with or without the `**http://**` or `**https://**` prefixes, and with or without query parameters.\n\n4\\. Postal codes:\n\n*   `**[A-Z]\\\\d[A-Z] ?\\\\d[A-Z]\\\\d**` - this matches most Canadian postal codes, which have the format A1A 1A1, with the first three characters being a letter, followed by a digit, followed by another letter, and then a space, and then a digit, followed by another letter, and then a digit.\n\n5\\. IP addresses:\n\n*   `**\\\\b\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\b**` - this matches most standard IP addresses, with each group of digits separated by periods.\n\n6\\. Dates:\n\n*   `**\\\\b\\\\d{1,2}[\\\\/\\\\-]\\\\d{1,2}[\\\\/\\\\-]\\\\d{4}\\\\b**` - this matches most standard date formats, with the month and day separated by either a slash or a dash, and the year consisting of four digits.\n\n7\\. Credit card numbers:\n\n*   `**\\\\b\\\\d{4}([ \\\\-]?\\\\d{4}){3}\\\\b**` - this matches most standard credit card numbers, with groups of four digits separated by either spaces or dashes.\n\n8\\. Social Security numbers:\n\n*   `**\\\\b\\\\d{3}[ \\\\-]?\\\\d{2}[ \\\\-]?\\\\d{4}\\\\b**` - this matches most standard SSN formats, with groups of three, two, and four digits separated by either spaces or dashes.\n\n9\\. File paths:\n\n*   `**^[A-Za-z]:[\\\\\\\\/].***` - this matches most standard file paths on Windows systems, with the drive letter followed by a colon, and then the rest of the path separated by either backslashes or forward slashes.\n\nCreating a Regex Object\n=======================\n\nIn JavaScript, we can create a regex object using the `RegExp` constructor or by using a regex literal. Here is an example:\n\n```js\n// Using RegExp constructor  \nlet regex1 = new RegExp('hello');  \nconsole.log(regex1.test('hello world')); // true  \n// Using regex literal  \nlet regex2 = /hello/;  \nconsole.log(regex2.test('world hello')); // true\n```\n\nMatching a Pattern\n==================\n\nTo match a pattern in a string, we can use the `match` method. This method returns an array of matches or `null` if no matches are found. Here is an example:\n\n```js\nlet str = 'The quick brown fox jumps over the lazy dog';  \nlet regex = /the/gi;  \nlet matches = str.match(regex);  \nconsole.log(matches); // [\"The\", \"the\"]\n```\n\nIn this example, we used the `g` and `i` flags to match all occurrences of the word \"the\" in a case-insensitive way.\n\nReplacing a Pattern\n===================\n\nTo replace a pattern in a string, we can use the `replace` method. This method returns a new string with the replaced value. Here is an example:\n\n```js\nlet str = 'JavaScript is a popular programming language';  \nlet regex = /JavaScript/;  \nlet newStr = str.replace(regex, 'JS');  \nconsole.log(newStr); // \"JS is a popular programming language\"\n```\n\nIn this example, we used the `replace` method to replace the word \"JavaScript\" with \"JS\" in the string.\n\nConclusion\n==========\n\nRegular expressions are a powerful tool in JavaScript for searching and manipulating text data. We can create regex objects using the `RegExp` constructor or regex literals. We can match a pattern using the `match` method and replace a pattern using the `replace` method. With regular expressions, we can write more efficient and flexible code."},{"id":"object-methods-in-js","metadata":{"permalink":"/blog/object-methods-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/10-object-methods-in-js.md","source":"@site/blog/javascript/10-object-methods-in-js.md","title":"Object Methods in JS","description":"JavaScript functions are a powerful tool that can help you build complex and dynamic web applications. Whether you’re building a simple website or a large-scale web application, functions are essential for adding interactivity and functionality to your code.","date":"2024-05-15T13:15:30.632Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":5.39,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"object-methods-in-js","title":"Object Methods in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Regex Expressions in JS","permalink":"/blog/regex-expressions-in-js"},"nextItem":{"title":"Object in JS","permalink":"/blog/object-in-js"}},"content":"JavaScript functions are a powerful tool that can help you build complex and dynamic web applications. Whether you’re building a simple website or a large-scale web application, functions are essential for adding interactivity and functionality to your code.\n<!-- truncate -->\n\nIn JavaScript, it’s possible to define functions as properties of an object. These functions are commonly referred to as methods.\n\n```js\n// Define a greetings object with a function to greet the user  \nconst greetings = {  \n  greetUser: function(name) {  \n    console.log(`Hello, ${name}! Welcome to our website.`);  \n  }  \n};  \n// Use the greetings object to greet the user  \ngreetings.greetUser(\"John\"); // \"Hello, John! Welcome to our website.\"\n```\n\nYou can achieve the similar functionality in this way:\n\n```js\n// Define a greetings object with a function to greet the user  \nconst greetings = {};  \ngreetings.greetUser = function(){  \n console.log(`Hello, ${name}! Welcome to our website.`);  \n}  \n// Use the greetings object to greet the user  \ngreetings.greetUser(\"John\"); // \"Hello, John! Welcome to our website.\"\n```\n\nArrow functions can also be used inside an object:\n\n```js\n// Define a greetings object with a function to greet the user  \nconst greetings = {  \n  greetUser: (name) => {  \n    console.log(`Hello, ${name}! Welcome to our website.`);  \n  }  \n};  \n// Use the greetings object to greet the user  \ngreetings.greetUser(\"John\"); // \"Hello, John! Welcome to our website.\"\n```\n\nThe `this` Keyword\n==================\n\nThe `this` keyword refers to the current object in JavaScript. It is often used inside object methods to refer to the object that the method belongs to.\n\nFor example, let’s say we have an object with a `name` property and a method called `greet`:\n\n```js\nconst person = {  \n  firstName: \"John\",  \n  lastName: \"Doe\",  \n  fullName: function() {  \n    return `${this.firstName} ${this.lastName}`;  \n  }  \n};  \nconsole.log(person.fullName()); // \"John Doe\"\n```\n\nWhen using arrow functions as methods inside objects, it’s important to be conscious of the value of the `**this**` keyword. Unlike regular functions, arrow functions do not have their own `**this**` context, but instead inherit the `**this**` value from their enclosing lexical scope. This can lead to unexpected behavior if you're not careful.\n\n```js\nconst person = {  \n  firstName: \"John\",  \n  lastName: \"Doe\",  \n  fullName: () => {  \n    return `${this.firstName} ${this.lastName}`;  \n  }  \n};  \nconsole.log(person.fullName()); // \"undefined undefined\"\n```\n\nHere’s an example of how you can use an arrow function inside an object method:\n\n```js\nconst calculator = {  \n  operand1: 0,  \n  operand2: 0,  \n  add: function() {  \n    const sum = () => {  \n\t\t\t/*  \n\t\t\t* As arrow functions inherit this value from their enclosing lexical scope,  \n\t\t\t* now it is inheriting from add function context  \n\t\t\t*/  \n      return this.operand1 + this.operand2;  \n    }  \n    console.log(`Sum: ${sum()}`);  \n  }  \n};  \ncalculator.operand1 = 10;  \ncalculator.operand2 = 20;  \ncalculator.add(); // \"Sum: 30\"\n```\n\nThe `new` Keyword\n=================\n\nIn JavaScript, the `**new**` keyword is used to create new instances of a constructor function. A constructor function is a special type of function that is used to create and initialize objects with the same properties and methods.\n\nWhen the `**new**` keyword is used with a constructor function, a new object is created with its own set of properties and methods. The `**this**` keyword inside the constructor function refers to the new object being created, and can be used to set the initial values of its properties.\n\nHere’s an example of using the `**new**` keyword to create a new instance of a constructor function:\n\n```js\nfunction Person(firstName, lastName) {  \n  this.firstName = firstName;  \n  this.lastName = lastName;  \n}  \nconst person1 = new Person('John', 'Doe');  \nconst person2 = new Person('Jane', 'Doe');  \nconsole.log(person1); // Person { firstName: 'John', lastName: 'Doe' }  \nconsole.log(person2); // Person { firstName: 'Jane', lastName: 'Doe' }\n```\n\nThe `**new**` keyword is used to create two instances of `**Person**`: `**person1**` and `**person2**`. Each instance has its own set of properties `**firstName**` and `**lastName**` with different values.\n\nNote that the `**new**` keyword is not necessary when creating objects using object literals `**{}**` or when using classes in modern JavaScript. However, it is still commonly used when working with constructor functions or legacy code.\n\nYou can also define methods in an object instance with this way:\n\n```js\nfunction Person(name, age) {  \n  this.name = name;  \n  this.age = age;  \n}  \nPerson.prototype.greet = function() {  \n  console.log('Hello, my name is ' + this.name + ' and I am ' + this.age + ' years old.');  \n};  \nconst person1 = new Person('John', 30);  \nperson1.greet(); // \"Hello, my name is John and I am 30 years old.\"\n```\n\nInheritance can achieve in this way:\n\n```js\nfunction Animal(name) {  \n  this.name = name;  \n}  \nAnimal.prototype.speak = function() {  \n  console.log(`${this.name} makes a noise.`);  \n}  \nfunction Dog(name) {  \n  Animal.call(this, name);  \n}  \nDog.prototype = Object.create(Animal.prototype);  \nDog.prototype.constructor = Dog;  \nDog.prototype.speak = function() {  \n  console.log(`${this.name} barks.`);  \n}  \nlet dog = new Dog('Rex');  \ndog.speak(); // \"Rex barks.\"\n```\n\nGetter and Setter\n=================\n\nEncapsulation is a technique used to control access to object properties and methods. One way to achieve encapsulation in JavaScript is to use a naming **convention** where properties that are intended to be protected are prefixed with an underscore (`**_**`).\n\nBy convention, properties and methods that start with an underscore are meant to be accessed only within the object, and not from outside the object. This means that developers can create private properties and methods that are hidden from the outside world, while still allowing public properties and methods to be accessed and used as intended.\n\n```js\nconst person = {  \n  _name: 'John',  \n};  \n// Accessing the private _name property directly from outside the object  \nconsole.log(person._name); // 'Jane'  \n// Attempting to modify the private _name property directly from outside the object  \nperson._name = 'Bob';  \nconsole.log(person._name); // 'Bob'\n```\n\nGetter and setter methods are a way to control access to object properties. They allow you to define custom behavior when getting or setting a property’s value. To define a getter or setter method, use the `get` or `set` keyword followed by the name of the property you want to define the behavior for. For example:\n\n```js\nconst person = {  \n  _firstName: \"John\",  \n  _lastName: \"Doe\",  \n  get fullName() {  \n    return `${this._firstName} ${this._lastName}`;  \n  },  \n  set fullName(name) {  \n    const parts = name.split(\" \");  \n    this._firstName = parts[0];  \n    this._lastName = parts[1];  \n  }  \n};  \nconsole.log(person.fullName); // \"John Doe\"  \nperson.fullName = \"Jane Smith\";  \nconsole.log(person.fullName); // \"Jane Smith\"\n```\n\n**Note:** In more recent versions of JavaScript # is introduced for strictly enforcing private fields but it has limited support.\n\nIn summary, defining functions inside objects can be useful for encapsulating related functionality and keeping your code organized. Additionally, it allows you to access other properties and methods of the same object, which can be helpful for building more complex functionality."},{"id":"object-in-js","metadata":{"permalink":"/blog/object-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/9-object-in-js.md","source":"@site/blog/javascript/9-object-in-js.md","title":"Object in JS","description":"In JavaScript, an object is a collection of key-value pairs, where the keys are strings (or symbols) and the values can be of any type. It is an unordered data structure that can hold primitive data types, arrays, and even functions. Objects are used to represent real-world entities, and they provide a way to organize and store related data.","date":"2024-05-15T13:15:30.615Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":9.12,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"object-in-js","title":"Object in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Object Methods in JS","permalink":"/blog/object-methods-in-js"},"nextItem":{"title":"Array in JS","permalink":"/blog/array-in-js"}},"content":"In JavaScript, an object is a collection of key-value pairs, where the keys are strings (or symbols) and the values can be of any type. It is an unordered data structure that can hold primitive data types, arrays, and even functions. Objects are used to represent real-world entities, and they provide a way to organize and store related data.\n<!-- truncate -->\n\nCreating Objects in JavaScript\n==============================\n\nThere are several ways to create objects in JavaScript:\n\nObject Literals\n===============\n\nThe most common way to create an object is by using an object literal. An object literal is a comma-separated list of key-value pairs enclosed in curly braces. For example:\n\n```js\nlet person = {  \n  name: \"John\",  \n  age: 30,  \n  address: {  \n    street: \"123 Main St\",  \n    city: \"New York\",  \n    state: \"NY\"  \n  }  \n};\n```\n\nUsing the Object Constructor\n============================\n\nAnother way to create objects is by using the Object constructor. This method is less commonly used but can be useful in certain situations. For example:\n\n```js\nlet person = new Object();  \nperson.name = \"John\";  \nperson.age = 30;  \nperson.address = {  \n  street: \"123 Main St\",  \n  city: \"New York\",  \n  state: \"NY\"  \n};\n```\n\nUsing Object.create()\n=====================\n\nA third way to create objects is by using the Object.create() method. This method creates a new object and sets its prototype to an existing object. For example:\n\n```js\nlet person = Object.create(null);  \nperson.name = \"John\";  \nperson.age = 30;  \nperson.address = {  \n  street: \"123 Main St\",  \n  city: \"New York\",  \n  state: \"NY\"  \n};\n```\n\nAccessing Object Properties\n===========================\n\nYou can access object properties using dot notation or bracket notation. For example:\n\n```js\nlet person = {  \n  name: \"John\",  \n  age: 30  \n};  \nconsole.log(person.name); // \"John\"  \nconsole.log(person[\"age\"]); // 30\n```\n\nModifying Object Properties\n===========================\n\nYou can modify object properties by simply assigning a new value to them. For example:\n\n```js\nlet person = {  \n  name: \"John\",  \n  age: 30  \n};  \nperson.age = 40;  \nconsole.log(person.age); // 40\n```\n\nAdding Object Properties\n========================\n\nYou can add new properties to an object by simply assigning a value to a new key. For example:\n\n```js\nlet person = {  \n  name: \"John\",  \n  age: 30  \n};  \nperson.address = {  \n  street: \"123 Main St\",  \n  city: \"New York\",  \n  state: \"NY\"  \n};  \nconsole.log(person.address); // { street: \"123 Main St\", city: \"New York\", state: \"NY\" }\n```\n\nCharacteristics of Keys and Values in JS Objects\n================================================\n\nThe characteristics of keys and values in JavaScript objects are as follows:\n\n1.  Keys must be unique within an object. If you try to add a new property with an existing key, the value of the existing property will be overwritten with the new value.\n2.  Keys are always converted to strings. If you use a non-string value as a key, it will be automatically converted to a string using the `**toString()**` method.\n3.  Values can be of any type, including strings, numbers, booleans, objects, arrays, and functions.\n4.  Values can be accessed using dot notation (`**object.property**`) or bracket notation (`**object[\"property\"]**`). Dot notation can only be used if the property name is a valid identifier (i.e., it does not contain spaces or special characters).\n5.  Values can be added or modified at any time by assigning a new value to a property: `**object.property = value**` or `**object[\"property\"] = value**`.\n6.  Values can also be removed using the `**delete**` operator: `**delete object.property**` or `**delete object[\"property\"]**`.\n7.  In JavaScript, it is generally not recommended to use spaces in the name of a key in an object. While it is possible to use spaces in key names using bracket notation, it can make it harder to work with the object, as you would always have to use bracket notation to access the property.\n\nFor example, let’s say you have an object with a key called “first name” and you try to access it using dot notation:\n\n```\nconst person = {  \n  \"first name\": \"John\",  \n  age: 30  \n};  \nconsole.log(person.first name); // Outputs: undefined\n```\n\nThis code would result in an error because dot notation does not allow for spaces in the property name. Instead, you would have to use bracket notation to access the “first name” property:\n\n```\nconsole.log(person[\"first name\"]); // Outputs: \"John\"\n```\n\nThis can make the code more difficult to read and can introduce errors if you forget to use bracket notation when accessing the property.\n\nIt is generally recommended to use camelCase or snake_case for key names in JavaScript objects, as they are easier to read and less error-prone.\n\nfor…in loop\n===========\n\nThe for…in loop is a useful tool for iterating over an object’s properties. This loop allows you to loop through all of the object’s properties and perform some action on each one. For example:\n\n```js\nlet person = {  \n  name: \"John\",  \n  age: 30,  \n  address: {  \n    street: \"123 Main St\",  \n    city: \"New York\",  \n    state: \"NY\"  \n  }  \n};  \nfor (let prop in person) {  \n  console.log(prop + \": \" + person[prop]);  \n}  \n// Output:  \n// name: John  \n// age: 30  \n// address: [object Object]\n```\n\nObject Reference\n================\n\nWhen you create two empty objects in JavaScript, they are not equal to each other, even though they are both objects.\n\nFor example:\n\n```js\nconst person1 = {};  \nconst person2 = {};  \nconsole.log(person1 == person2); // false\n```\n\nThis is because `**person1**` and `**person2**` are both references to different objects in memory, even though the objects themselves have no properties or values.\n\nSo, objects are reference types, which means that when you assign an object to a variable or pass it as an argument to a function, you are actually passing a reference to the object in memory, rather than creating a new copy of the object.\n\nHere’s an example of how object references work in JavaScript:\n\n```js\nconst person1 = { name: \"John\", age: 30 };  \nconst person2 = person1;  \n\n```\n\nTo make a copy of an object in JavaScript, you can use the spread operator or the `**Object.assign()**` method:\n\n```js\n// Using the spread operator  \nconst person1 = { name: \"John\", age: 30 };  \nconst person2 = { ...person1 };  \nperson2.age = 31;  \nconsole.log(person1.age); // 30\n```\n\n`Object.assign()` works in this way:\n\n```js\nconst user = {};  \n// Using Object.assign() to add a \"name\" property to the \"user\" object  \nObject.assign(user, { name: \"john\" });  \nconsole.log(user); // { name: \"john\" }\n```\n\n`Object.assign` can also be used to copy an object:\n\n```js\n// Using Object.assign()  \nconst person3 = { name: \"John\", age: 30 };  \nconst person4 = Object.assign({}, person3);  \nperson4.age = 31;  \nconsole.log(person3.age); // 30\n```\n\nGarbage Collection\n==================\n\nGarbage collection is the process by which JavaScript automatically frees up memory that is no longer being used by an object. When an object is created, it is allocated a block of memory on the heap. When the object is no longer needed, the memory is freed up so that it can be used by other objects.\n\nJavaScript uses a form of garbage collection called reference counting. This means that each object keeps track of how many other objects are referencing it. When the reference count drops to zero, the object is no longer needed and its memory can be freed up.\n\nWhile garbage collection is a useful feature of JavaScript, it can also have some downsides. For example, managing memory can be slower than in other languages, as the garbage collector has to constantly monitor the reference counts of objects. Additionally, the garbage collector can sometimes be too aggressive, causing performance issues in some cases.\n\nDespite these limitations, garbage collection is still an important feature of JavaScript that helps developers to write more efficient and reliable code.\n\n```js\n// user is reference to object  \nlet user = {  \n\tname: \"John\"  \n}  \n// now reference is overridden  \nuser = null;  \n// there is no variable pointing to {name: \"John\"}, it will be in garbage collection\n```\n\nOptional Chaining\n=================\n\nOptional chaining is a feature in JavaScript that allows you to safely access deeply nested properties of an object without worrying about the intermediate properties being `**null**` or `**undefined**`.\n\n```js\nconst user = {  \n  name: \"John\",  \n  address: {  \n    street: \"123 Main St\",  \n    city: \"Anytown\",  \n    state: \"CA\",  \n    zip: \"12345\"  \n  }  \n};  \n// Using optional chaining to access nested properties  \nconst zipCode = user?.address?.zip; // \"12345\"  \n// Trying to access a non-existent property with optional chaining  \nconst phone = user?.contact?.phone; // undefined\n```\n\nSymbol Type\n===========\n\nIn JavaScript, `**Symbol**` is a primitive data type that is used to create unique identifiers for objects. Symbols are created using the `**Symbol()**` constructor function, which returns a new, unique symbol each time it is called.\n\nHere is an example of creating and using symbols with an object:\n\n```js\nconst name = Symbol('name');  \nconst age = Symbol('age');  \nconst person = {  \n  [name]: 'John',  \n  [age]: 30,  \n  gender: 'male'  \n};  \nconsole.log(person[name]); // \"John\"  \nconsole.log(person[age]); // 30  \nconsole.log(person.gender); // \"male\"\n```\n\nWe can access the values of the symbol properties using the square bracket notation with the symbol as the key. Note that we cannot access the symbol properties using dot notation, as symbols are not valid property names in that syntax.\n\nSymbols are often used to create private or hidden properties in objects, as they cannot be accessed or modified from outside the object. They are also useful for creating non-colliding property names in cases where multiple objects might share the same key name.\n\nSymbol.iterator\n===============\n\n`**Symbol.iterator**` is a built-in symbol in JavaScript that is used to define the default iterator for an object. An iterator is an object that provides a way to iterate over the elements of a collection one at a time.\n\nTo use `**Symbol.iterator**`, you define a method on an object that returns an iterator object. This method is called when the object is used in a `**for...of**` loop or when the `**next()**` method is called on the iterator object.\n\nHere is an example of using `**Symbol.iterator**` to define an iterator for an array:\n\n```js\nconst arr = [1, 2, 3];  \narr[Symbol.iterator] = function() {  \n  let i = 0;  \n  return {  \n    next: () => {  \n      if (i < this.length) {  \n        return { value: this[i++], done: false };  \n      } else {  \n        return { done: true };  \n      }  \n    }  \n  };  \n};  \nfor (const num of arr) {  \n  console.log(num);  \n}\n```\n\nNote that the `**Symbol.iterator**` method can be defined on any object, not just arrays. This allows you to define custom iteration behavior for any object that you create.\n\n```js\nconst obj = { from: 1, to: 3 };  \nobj[Symbol.iterator] = function() {  \n  let current = this.from;  \n  const last = this.to;  \n   return {  \n    next: () => {  \n      if (current <= last) {  \n        return { value: current++, done: false };  \n      } else {  \n        return { done: true };  \n      }  \n    }  \n  };  \n};  \nconst arr = [...obj]; // [1, 2, 3]\n```\n\nConclusion\n==========\n\nIn JavaScript, objects are a powerful data structure that can be used to represent complex entities. They provide a way to organize and store related data, and can be easily accessed, modified, and extended. Understanding how to create and work with objects is an essential skill for any JavaScript developer."},{"id":"array-in-js","metadata":{"permalink":"/blog/array-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/8-array-in-js.md","source":"@site/blog/javascript/8-array-in-js.md","title":"Array in JS","description":"JavaScript is an incredibly popular programming language and one of the reasons it is so popular is because of the versatility of arrays in JavaScript. Arrays in JavaScript are used to store multiple values in a single variable.","date":"2024-05-15T13:15:30.599Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":5.005,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"array-in-js","title":"Array in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Object in JS","permalink":"/blog/object-in-js"},"nextItem":{"title":"Functions in JS: named, anonymous","permalink":"/blog/functions-in-js-named-anonymous"}},"content":"JavaScript is an incredibly popular programming language and one of the reasons it is so popular is because of the versatility of arrays in JavaScript. Arrays in JavaScript are used to store multiple values in a single variable.\n<!-- truncate -->\n\nCreating an Array\n=================\n\nThere are two ways to create an array in JavaScript. The first method is to use the Array() constructor. Here is an example:\n\n```js\nlet fruits = new Array(\"apple\", \"banana\", \"orange\");\n```\n\nThe second method is to use array literal notation. Here is an example:\n\n```js\nlet fruits = [\"apple\", \"banana\", \"orange\"];\n```\n\nAccessing Array Elements\n========================\n\nYou can access individual elements of an array by referring to the index number. Here is an example:\n\n```js\nlet fruits = [\"apple\", \"banana\", \"orange\"];  \nconsole.log(fruits[0]); // \"apple\"\n```\n\nModifying Array Elements\n========================\n\nYou can modify elements of an array by referring to the index number and assigning a new value. Here is an example:\n\n```js\nlet fruits = [\"apple\", \"banana\", \"orange\"];  \nfruits[0] = \"pear\";  \nconsole.log(fruits); // [\"pear\", \"banana\", \"orange\"]\n```\n\nSpread Syntax\n=============\n\nSpread syntax allows you to spread an array or object into another array or object. You can use the spread syntax by using three dots (…) before the array or object name.\n\nFor example, consider the following code that concatenates two arrays using spread syntax:\n\n```js\nconst arr1 = [1, 2, 3];  \nconst arr2 = [4, 5, 6];  \nconst arr3 = [...arr1, ...arr2];  \nconsole.log(arr3); // Output: [1, 2, 3, 4, 5, 6]\n```\n\nYou can also use spread syntax to create a copy of an array or object:\n\n```js\njavascriptCopy code  \nconst arr1 = [1, 2, 3];  \nconst arr2 = [...arr1];  \nconsole.log(arr2); // Output: [1, 2, 3]\n```\n\ntypeof Array\n============\n\nIn JavaScript, the `**typeof**` operator will return \"object\" for an array. This is because arrays in JavaScript are a type of object.\n\nFor example:\n\n```js\nconst myArray = [1, 2, 3];  \nconsole.log(typeof myArray); // \"object\"\n```\n\nThis can be surprising at first, but it’s important to remember that arrays in JavaScript are implemented as objects with integer-based keys that are automatically updated when elements are added or removed.\n\nTo check if a variable is an array, you can use the `**Array.isArray()**` method instead. This method returns `**true**` if the variable is an array and `**false**` otherwise. For example:\n\n```js\nconst myArray = [1, 2, 3];  \nconsole.log(Array.isArray(myArray)); // true\n```\n\nArray Methods\n=============\n\nJavaScript provides several methods for working with arrays. Here are a few of the most common methods:\n\npush()\n======\n\nThe push() method adds one or more elements to the end of an array. Here is an example:\n\n```js\nlet fruits = [\"apple\", \"banana\", \"orange\"];  \nfruits.push(\"pear\");  \nconsole.log(fruits); // [\"apple\", \"banana\", \"orange\", \"pear\"]\n```\n\npop()\n=====\n\nThe pop() method removes the last element from an array. Here is an example:\n\n```js\nlet fruits = [\"apple\", \"banana\", \"orange\"];  \nfruits.pop();  \nconsole.log(fruits); // [\"apple\", \"banana\"]\n```\n\nshift()\n=======\n\nThe shift() method removes the first element from an array. Here is an example:\n\n```js\nlet fruits = [\"apple\", \"banana\", \"orange\"];  \nfruits.shift();  \nconsole.log(fruits); // [\"banana\", \"orange\"]\n```\n\nunshift()\n=========\n\nThe unshift() method adds one or more elements to the beginning of an array. Here is an example:\n\n```js\nlet fruits = [\"apple\", \"banana\", \"orange\"];  \nfruits.unshift(\"pear\");  \nconsole.log(fruits); // [\"pear\", \"apple\", \"banana\", \"orange\"]\n```\n\nslice()\n=======\n\nThe slice() method returns a new array that contains a portion of the original array. Here is an example:\n\n```js\nlet fruits = [\"apple\", \"banana\", \"orange\", \"pear\"];  \nlet newFruits = fruits.slice(1, 3);  \nconsole.log(newFruits); // [\"banana\", \"orange\"]\n```\n\nLoops of Array in JavaScript\n============================\n\nOne of the most important features of arrays in JavaScript is the ability to loop through the elements of an array. There are several ways to loop through an array in JavaScript.\n\nFor Loop\n========\n\nThe for loop is the most common way to loop through an array in JavaScript. Here is an example:\n\n```js\nlet fruits = [\"apple\", \"banana\", \"orange\", \"pear\"];  \nfor (let i = 0; i < fruits.length; i++) {  \n  console.log(fruits[i]);  \n}\n```\n\nforEach() Method\n================\n\nThe forEach() method is a built-in method of arrays in JavaScript that provides a convenient way to loop through the elements of an array. Here is an example:\n\n```js\nlet fruits = [\"apple\", \"banana\", \"orange\", \"pear\"];  \nfruits.forEach(function(fruit) {  \n  console.log(fruit);  \n});\n```\n\nFor…of Loop\n===========\n\nThe for…of loop is a newer feature of JavaScript that provides a simpler way to loop through arrays. Here is an example:\n\n```js\nlet fruits = [\"apple\", \"banana\", \"orange\", \"pear\"];  \nfor (let fruit of fruits) {  \n  console.log(fruit);  \n}\n```\n\nIterables\n=========\n\nUsing loops, we can easily perform operations on each element of an array, such as displaying the elements or modifying them.\n\nmap() Method\n============\n\nThe map() method is used to create a new array by applying a function to each element of an existing array. Here is an example:\n\n```js\nlet numbers = [1, 2, 3, 4, 5];  \nlet doubledNumbers = numbers.map(function(number) {  \n  return number * 2;  \n});  \nconsole.log(doubledNumbers); // [2, 4, 6, 8, 10]\n```\n\nreduce() Method\n===============\n\nThe reduce() method is used to reduce an array to a single value by applying a function to each element of the array. Here is an example:\n\n```js\nlet numbers = [1, 2, 3, 4, 5];  \nlet sum = numbers.reduce(function(accumulator, currentValue) {  \n  return accumulator + currentValue;  \n});  \nconsole.log(sum); // 15\n```\n\nfilter() Method\n===============\n\nThe filter() method is used to create a new array that contains only the elements of an existing array that meet a certain condition. Here is an example:\n\n```js\nlet numbers = [1, 2, 3, 4, 5];  \nlet evenNumbers = numbers.filter(function(number) {  \n  return number % 2 === 0;  \n});  \nconsole.log(evenNumbers); // [2, 4]\n```\n\nUsing the map(), reduce(), and filter() methods, we can easily manipulate and transform arrays in JavaScript.\n\nConclusion\n==========\n\nArrays are an essential tool in JavaScript programming. They are used to store multiple values in a single variable and provide a convenient way to access and modify those values. With the built-in methods provided by JavaScript, working with arrays is easy and efficient."},{"id":"functions-in-js-named-anonymous","metadata":{"permalink":"/blog/functions-in-js-named-anonymous","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/7-functions-in-js-named-anonymous.md","source":"@site/blog/javascript/7-functions-in-js-named-anonymous.md","title":"Functions in JS: named, anonymous","description":"JavaScript is a programming language used mainly for creating interactive web pages. One of its most powerful features is the ability to create functions, which are reusable blocks of code that perform a specific task. In this blog post, we will discuss what functions are, how they work, and how to create and use them in JavaScript.","date":"2024-05-15T13:15:30.582Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":4.84,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"functions-in-js-named-anonymous","title":"Functions in JS: named, anonymous","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Array in JS","permalink":"/blog/array-in-js"},"nextItem":{"title":"TypeConversion in JS","permalink":"/blog/typeconversion-in-js"}},"content":"JavaScript is a programming language used mainly for creating interactive web pages. One of its most powerful features is the ability to create functions, which are reusable blocks of code that perform a specific task. In this blog post, we will discuss what functions are, how they work, and how to create and use them in JavaScript.\n<!-- truncate -->\n\nWhat are Functions?\n===================\n\nFunctions are reusable blocks of code that perform a specific task. They take input in the form of arguments and return output in the form of a value. Functions can be used to perform a variety of tasks, from simple calculations to complex operations.\n\nCreating Functions in JavaScript\n================================\n\nThe simplest function in JavaScript will look like:\n\n```js\nfunction myFunction(){  \n\tconsole.log('Hello, I am a function');  \n}\n```\n\nTo execute the function we need to call the function:\n\n```js\n// calling to function  \nmyFunction(); // Hello, I am a function  \n// again calling the function  \nmyFunction(); // Hello, I am a function\n```\n\nFunction don’t only use for consoling some output or simple operations, you can also use function to return some value, like:\n\n```js\nfunction myFunction(){  \n\treturn 'Hello I am a function';  \n}  \nmyFunction() // no output  \nconsole.log(myFunction()) // Hello, I am a function\n```\n\nYou can also pass parameter to function\n\n```js\nfunction greet(name) {  \n  console.log(`Hello, ${name}!`);  \n}  \ngreet(\"John\"); // \"Hello, John!\"  \ngreet(\"Jane\"); // \"Hello, Jane!\"\n```\n\nYou can also pass multiple parameters to a JavaScript function, like this:\n\n```js\nfunction add(a, b) {  \n  return a + b;  \n}  \nconsole.log(add(2, 3)); // 5  \nconsole.log(add(4, 5)); // 9\n```\n\nRest parameters allow you to pass an arbitrary number of arguments to a function as an array. You can define a rest parameter using three dots (…) followed by the parameter name.\n\nFor example, consider the following code that calculates the sum of an arbitrary number of arguments using a rest parameter:\n\n```js\nfunction sum(...nums) {  \n  return nums.reduce((total, num) => total + num);  \n}  \nconsole.log(sum(1, 2, 3, 4, 5)); // Output: 15  \nconsole.log(sum(10, 20)); // Output: 30\n```\n\nFunctions can also return objects or arrays or any complex datatype\n\n```js\nfunction createPerson(name, age) {  \n  return {  \n    name: name,  \n    age: age  \n  };  \n}  \nlet person1 = createPerson(\"John\", 30);  \nlet person2 = createPerson(\"Jane\", 25);  \nconsole.log(person1); // outputs {name: \"John\", age: 30}  \nconsole.log(person2); // outputs {name: \"Jane\", age: 25}\n```\n\nFunctions as First-Class Citizens\n=================================\n\nIn JavaScript, functions are considered “first-class citizens”, which means that they are treated like any other value or data type, such as strings or numbers.\n\nThis means that functions can be:\n\n1.  Assigned to variables:\n\n```js\nconst myFunction = function() {  \n  console.log(\"Hello world!\");  \n};\n```\n\n1.  Passed as arguments to other functions:\n\n```js\nfunction execute(func) {  \n  func();  \n}  \nexecute(function() {  \n  console.log(\"Hello world!\");  \n});\n```\n\n1.  Returned as values from functions:\n\n```js\nfunction createFunction() {  \n  return function() {  \n    console.log(\"Hello world!\");  \n  };  \n}  \nconst myFunction = createFunction();  \nmyFunction(); // Hello World  \ncreateFunction()(); // Hello World\n```\n\nBecause of this first-class status, functions in JavaScript can be used to create powerful abstractions and higher-order functions. This is what makes JavaScript a powerful functional programming language.\n\nNamed vs. Anonymous Functions\n=============================\n\nIn JavaScript, there are two types of functions: named and anonymous.\n\nNamed Functions\n===============\n\nNamed functions have a name identifier and can be defined using the `**function**` keyword.\n\n```js\nfunction namedFunction(param1, param2) {  \n  // function body  \n}\n```\n\nNamed functions are hoisted at the top of the scope.\n\nAnonymous Functions\n===================\n\nAnonymous functions do not have a name identifier, but can be assigned to a variable or passed as an argument to another function. They are also defined using the `**function**` keyword.\n\n```js\nconst anonymousFunction = function(param1, param2) {  \n  // function body  \n};\n```\n\nAnonymous functions are not hoisted.\n\nArrow Functions\n===============\n\nArrow functions are a concise way to define a function and are defined using the `**=>**` syntax. They are similar to anonymous functions but have a shorter syntax and do not have their own `**this**` keyword and instead inherit it from their lexical scope.\n\n```js\nconst arrowFunction = (param1, param2) => {  \n  // function body  \n};\n```\n\nArrow functions are not hoisted.\n\nProperties of JS Functions\n==========================\n\n1.  Functions are objects: In JavaScript, functions are actually objects. This means that they can have properties and methods just like any other object.\\\\\n\n```js\nfunction myFunction() {  \n  console.log(\"Hello, World!\");  \n}  \n// Functions are objects and can have properties and methods  \nmyFunction.myProperty = \"This is a property of myFunction\";  \nmyFunction.myMethod = function() {  \n  console.log(\"This is a method of myFunction\");  \n}  \n// Access the property and method of myFunction  \nconsole.log(myFunction.myProperty); // \"This is a property of myFunction\"  \nmyFunction.myMethod(); // \"This is a method of myFunction\"\n```\n\n2\\. Functions can be nested: In JavaScript, functions can be nested within other functions. This allows for the creation of closures, which are powerful tools for maintaining state and creating private variables.\n\n```js\nfunction outerFunction() {  \n  const outerVar = \"I am defined in the outer function\";  \n  function innerFunction() {  \n    const innerVar = \"I am defined in the inner function\";  \n    console.log(innerVar);  \n    console.log(outerVar);  \n  }  \n  innerFunction();  \n}  \nouterFunction();   \n// I am defined in the outer function  \n// I am defined in the inner function\n```\n\n3\\. Functions can have default parameters: Starting with ES6, JavaScript allows for the use of default function parameters. This means that you can specify default values for parameters that are not passed in when the function is called.\n\n```js\nfunction greet(name = \"World\") {  \n  console.log(`Hello, ${name}!`);  \n}  \ngreet(); // \"Hello, World!\"  \ngreet(\"John\"); // \"Hello, John!\"\n```\n\nConclusion\n==========\n\nIn this blog post, we have discussed what functions are, how to create and use them, and the different types of functions in JavaScript. Functions are an essential part of JavaScript programming and are used extensively in web development. By understanding how functions work, you can write more efficient and maintainable code."},{"id":"typeconversion-in-js","metadata":{"permalink":"/blog/typeconversion-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/6-typeconversion-in-js.md","source":"@site/blog/javascript/6-typeconversion-in-js.md","title":"TypeConversion in JS","description":"When we need to convert a value from one data type to another in JavaScript, we can perform either implicit or explicit type conversion. Implicit type conversion is performed automatically by JavaScript, while explicit type conversion is performed manually using built-in methods. Some examples of explicit type conversion are Boolean Conversion Boolean(), Number Conversion Number(), and String Conversion String().","date":"2024-05-15T13:15:30.572Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":4.06,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"typeconversion-in-js","title":"TypeConversion in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Functions in JS: named, anonymous","permalink":"/blog/functions-in-js-named-anonymous"},"nextItem":{"title":"Control Flow Statements in JS","permalink":"/blog/control-flow-statements-in-js"}},"content":"When we need to convert a value from one data type to another in JavaScript, we can perform either implicit or explicit type conversion. Implicit type conversion is performed automatically by JavaScript, while explicit type conversion is performed manually using built-in methods. Some examples of explicit type conversion are Boolean Conversion Boolean(), Number Conversion Number(), and String Conversion String().\n<!-- truncate -->\n\n1.  **Explicit type conversion** (also known as casting) is performed manually by the developer using built-in methods.\n\n**Boolean Conversion** `**Boolean()**`\n\nThe rule for converting a number to a boolean value is simple: any non-zero number is considered truthy, and the number `**0**` (or `**-0**`) and `NaN` is considered falsy.\n\n```js\nBoolean(0);  // false  \nBoolean(-0); // false  \nBoolean(1);  // true  \nBoolean(-1); // true  \nBoolean(42); // true\n```\n\nAn empty string (`**\"\"**`) even having whitespaces is considered falsy, while any non-empty string is truthy.\n\n```js\nBoolean(\"\");      // false  \nBoolean(\"hello\"); // true  \nBoolean(\"0\");     // true  \nBoolean(\"false\"); // true  \nBoolean(\"true\");  // true\n```\n\nAll objects will always be truthy no matter it is empty or filled\n\n```js\nBoolean([]);            // true  \nBoolean([1, 2, 3]);     // true  \nBoolean([\"hello\", 42]); // true  \nBoolean({});            // true  \nBoolean({name: \"John\"});// true\n```\n\n**Number Conversion** `**Number()**`\n\nWhen a boolean value is converted to a number, true is converted to 1 and false is converted to 0.\n\n```js\nNumber(true);  // 1  \nNumber(false); // 0\n```\n\nWhen a string is converted to a number, the following rules apply:\n\n*   If the string contains only numeric characters (0–9) or a decimal point, it is converted to a corresponding number.\n*   If the string is empty or contains only whitespace characters, it is converted to `**0**`.\n*   If the string contains any non-numeric characters other than a decimal point, it is converted to `**NaN**` (Not a Number).\n\n```js\nNumber(\"42\");      // 42  \nNumber(\"3.14\");    // 3.14  \nNumber(\"\");        // 0  \nNumber(\"   \");     // 0  \nNumber(\"123abc\");  // NaN\n```\n\nIf an array has only one element and that element is a number, then the array can be directly converted to a number and if array is empty, then the array will convert to zero.\n\n```js\nlet arr = [42];  \nconsole.log(Number(arr)); // 42  \nconsole.log(+arr);        // 42  \nconsole.log(Number([]));  // 0\n```\n\n**String Conversion** `**String()**`\n\nIf primitive is converted to string, then value will be only wrapped to `''`\n\n```js\nlet bool = true;  \nconsole.log(String(bool)); // \"true\"  \nbool = false;  \nconsole.log(String(bool)); // \"false\"  \nlet num = 42;  \nconsole.log(String(num));  // \"42\"\n```\n\nIf object is converted to string, then object will be wrapped to string in this way\n\n```js\nconsole.log(String([])); // \"\"  \nconsole.log(String([1,2,3])); // \"1,2,3\"  \nconsole.log(String({})); // \"[object Object]\"\n```\n\n2\\. **Implicit type conversion** (also known as coercion) is performed automatically by JavaScript when a value of one data type is used in a context that expects a different data type.\n\n**Implicit Type Conversion on Addition**\n\nIn case of boolean, it implicitly convert it to Number and then perform addition operation\n\n```js\nlet num = 42;  \nlet bool1 = true;  \nlet bool2 = false;  \nconsole.log(num + bool1); // 43  \nconsole.log(num + bool2); // 42\n```\n\nIn case of array and string, it simply convert both of them to string and then perform concatenation\n\n```js\nlet str = \"foo\";  \nlet num = 42;  \nconsole.log(str + num); // \"foo42\"\n```\n\n```js\nlet arr = [1, 2, 3];  \nlet num = 42;  \nconsole.log(arr + num); // \"1,2,342\"\n```\n\n**Implicit Type Conversion on Subtraction**\n\nIn case of boolean, it implicitly convert it to Number and then perform subtraction operation\n\n```js\nlet num = 42;  \nlet bool1 = true;  \nlet bool2 = false;  \nconsole.log(num - bool1); // 41  \nconsole.log(num - bool2); // 42\n```\n\nIn case of string, it implicitly convert it to Number and then perform subtraction operation\n\n```js\nlet str = \"7\";  \nlet num = 4;  \nconsole.log(str - num); // 3\n```\n\nIn case of non-numeric string, or array or object, it will result in NaN except one situation that array has only and only one Number.\n\n```js\nlet str = \"foo\";  \nconsole.log(str - 1); // NaN\n```\n\n```js\nlet arr = [1, 2, 3];  \nconsole.log(arr - 1); // NaNlet arr1 = [1];  \nconsole.log(arr1 - 1); // 0let obj = {name: \"John\"};  \nconsole.log(obj - 1); // NaN\n```\n\n**Implicit Type Conversion on Comparison**\n\nThe rules for type coercion in comparison operators is that JavaScript tries to convert the values to a type that makes sense for the comparison being made. In case of strict equality, implicit type conversion not happens, it simply return false.\n\n```js\nconsole.log('10' == 10); // true  \nconsole.log('10' == '10'); // true  \nconsole.log(true == 1); // true  \nconsole.log(false == 0); // true  \nconsole.log(null == undefined); // true  \nconsole.log('' == 0); // true  \nconsole.log([] == ''); // true  \nconsole.log([] == 0); // true  \nconsole.log([1, 2] == '1,2'); // true  \nconsole.log(NaN == NaN); // false\n```\n\nIn conclusion, this is how conversion happens in JavaScript. By understanding this, you can write predicted and efficient code."},{"id":"control-flow-statements-in-js","metadata":{"permalink":"/blog/control-flow-statements-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/5-control-flow-statements-in-js.md","source":"@site/blog/javascript/5-control-flow-statements-in-js.md","title":"Control Flow Statements in JS","description":"JavaScript is a programming language that allows developers to build complex web applications. Control flow statements are one of the most important features in JavaScript.","date":"2024-05-15T13:15:30.556Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":3.04,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"control-flow-statements-in-js","title":"Control Flow Statements in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"TypeConversion in JS","permalink":"/blog/typeconversion-in-js"},"nextItem":{"title":"Operators and Expressions in JS","permalink":"/blog/operators-and-expressions-in-js"}},"content":"JavaScript is a programming language that allows developers to build complex web applications. Control flow statements are one of the most important features in JavaScript.\n<!-- truncate -->\n\nControl flow statements are used to control the flow of execution in a program. They are used to make decisions, execute loops, and handle errors. There are three types of control flow statements in JavaScript: conditional statements, loops, and try/catch statements.\n\nConditional Statements\n======================\n\nConditional statements are used to execute different actions based on different conditions.\n\n1.  `if` statement:\n\n```js\nlet x = 5;  \nif (x < 10) {  \n  console.log(\"x is less than 10\");  \n}\n```\n\n2. `**if...else**` statement:\n\n```js\nlet temperature = 25;  \nif (temperature < 20) {  \n  console.log(\"It's cold outside\");  \n} else {  \n  console.log(\"It's warm outside\");  \n}\n```\n\n3\\. `**if...else if...else**` statement:\n\n```js\nlet grade = 85;  \nif (grade >= 90) {  \n  console.log(\"A\");  \n} else if (grade >= 80) {  \n  console.log(\"B\");  \n} else if (grade >= 70) {  \n  console.log(\"C\");  \n} else {  \n  console.log(\"F\");  \n}\n```\n\n4\\. Nested `**if**` statements:\n\n```js\nlet age = 20;  \nlet hasLicense = true;  \nif (age >= 18) {  \n  if (hasLicense) {  \n    console.log(\"You can drive\");  \n  } else {  \n    console.log(\"You can't drive without a license\");  \n  }  \n} else {  \n  console.log(\"You're too young to drive\");  \n}\n```\n\nIn JavaScript, any value that is not explicitly `**false**`, `**0**`, `**null**`, `**undefined**`, `**NaN**`, or an empty string (`**\"\"**`) is considered \"truthy\". This means that when such a value is used in an `**if**` statement, it will be evaluated as `**true**`.\n\n```js\nif (\"hello\") {  \n  console.log(\"This will be printed\");  \n}  \n  \nif ([]) {  \n  console.log(\"This will also be printed\");  \n}\n```\n\nLoops\n=====\n\nLoops are used to execute a block of code multiple times. JavaScript supports different types of loops, including the for loop, while loop, and do-while loop.\n\nfor loop\n========\n\nThe for loop is the most commonly used loop in JavaScript. It is used to iterate over an array or execute a block of code a specific number of times.\n\n```js\nfor (let i = 0; i < 5; i++) {  \n  console.log(i);  \n}  \n// nested for loop  \nfor (let i = 0; i < 5; i++) {  \n  for (let j= 0; j< 5; j++) {  \n    console.log(i, j);  \n  }  \n}\n```\n\nThe for loop parameters are optional\n\n```js\nfor(;;){  \n  // infinite loop  \n  console.log(\"printing\")  \n}\n```\n\nwhile loop\n==========\n\nThe while loop is used to execute a block of code as long as a condition is true.\n\n```js\nlet i = 0;  \nwhile (i < 5) {  \n  console.log(i);  \n  i++;  \n}\n```\n\ndo-while loop\n=============\n\nThe do-while loop is similar to the while loop, but it executes the code block at least once before checking the condition.\n\n```js\nlet i = 1;  \ndo {  \n  console.log(i);  \n  i++;  \n} while (i <= 5);\n```\n\nBreak\n=====\n\nThe `**break**` statement is used to immediately terminate a loop and continue executing code outside of the loop. Here's an example of using `**break**` to terminate a loop when a condition is met:\n\n```js\nfor (let i = 0; i < 10; i++) {  \n  if (i === 5) {  \n    break;  \n  }  \n  console.log(i);  \n}\n```\n\nContinue\n========\n\nThe `**continue**` statement is used to skip over an iteration of a loop and continue with the next iteration. Here's an example of using `**continue**` to skip over even numbers in a loop:\n\n```js\nfor (let i = 0; i < 10; i++) {  \n  if (i % 2 === 0) {  \n    continue;  \n  }  \n  console.log(i);  \n}\n```\n\nIn conclusion, control flow statements are essential in JavaScript programming. They allow developers to make decisions, execute loops, and handle errors. By understanding how to use these statements, developers can write more efficient and effective code."},{"id":"operators-and-expressions-in-js","metadata":{"permalink":"/blog/operators-and-expressions-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/4-operators-and-expressions-in-js.md","source":"@site/blog/javascript/4-operators-and-expressions-in-js.md","title":"Operators and Expressions in JS","description":"JavaScript is a powerful programming language that allows you to create dynamic and interactive web pages. One of the key features of JavaScript is its use of operators and expressions.","date":"2024-05-15T13:15:30.540Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":5.31,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"operators-and-expressions-in-js","title":"Operators and Expressions in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Control Flow Statements in JS","permalink":"/blog/control-flow-statements-in-js"},"nextItem":{"title":"Commenting and Debugging in JS","permalink":"/blog/commenting-and-debugging-in-js"}},"content":"JavaScript is a powerful programming language that allows you to create dynamic and interactive web pages. One of the key features of JavaScript is its use of operators and expressions.\n<!-- truncate -->\n\nOperators in JS\n===============\n\nOperators in JavaScript are used to perform various operations on values. JavaScript has several types of operators, including arithmetic, comparison, logical, assignment, bitwise, and conditional operators.\n\nArithmetic Operators\n====================\n\nArithmetic operators are used to perform mathematical calculations on numeric values. These operators include addition (+), subtraction (-), multiplication (*), division (/), and modulus (%).\n\n```js\nlet num1 = 10;  \nlet num2 = 20;  \n// Addition  \nlet sum = num1 + num2;  \nconsole.log(sum); // 30  \n// Subtraction  \nlet difference = num1 - num2;  \nconsole.log(difference); // -10  \n// Multiplication  \nlet product = num1 * num2;  \nconsole.log(product); // 200  \n// Division  \nlet quotient = num2 / num1;  \nconsole.log(quotient); // 2  \n// Modulo (Remainder)  \nlet remainder = num2 % num1;  \nconsole.log(remainder); // 0  \n// Increment  \nnum1++;  \nconsole.log(num1); // 11  \n// Decrement  \nnum2--;  \nconsole.log(num2); // 19\n```\n\nComparison Operators\n====================\n\nComparison operators are used to compare two values and return a Boolean value of true or false. These operators include `==`, `!=`, `>`, `<`, `>=`, and `<=`.\n\n```js\nlet num1 = 10;  \nlet num2 = 20;  \n// Equal to  \nconsole.log(num1 == num2); // false  \n// Not equal to  \nconsole.log(num1 != num2); // true  \n// Greater than  \nconsole.log(num2 > num1); // true  \n// Less than  \nconsole.log(num1 < num2); // true  \n// Greater than or equal to  \nconsole.log(num2 >= num1); // true  \n// Less than or equal to  \nconsole.log(num1 <= num2); // true\n```\n\nLogical Operators\n=================\n\nLogical operators are used to evaluate two or more expressions and return a Boolean value of true or false. These operators include &&, ||, and !.\n\n```js\nlet num1 = 10;  \nlet num2 = 20;  \nlet num3 = 30;  \n// Logical AND  \nconsole.log(num1 < num2 && num2 < num3); // true  \n// Logical OR  \nconsole.log(num1 < num2 || num2 > num3); // true  \n// Logical NOT  \nconsole.log(!(num1 == num2)); // true\n```\n\nAssignment Operators\n====================\n\nAssignment operators are used to assign values to variables. These operators include `=`, `+=`, `-=`, `*=`, `/=`, `%=`, `<<=`, `>>=`, `&=`, `^=`, and `|=`.\n\n```js\nlet num1 = 10;  \nlet num2 = 20;  \n// Assignment  \nnum1 = num2;  \nconsole.log(num1); // 20  \n// Addition assignment  \nnum1 += num2;  \nconsole.log(num1); // 40  \n// Subtraction assignment  \nnum1 -= num2;  \nconsole.log(num1); // 20  \n// Multiplication assignment  \nnum1 *= num2;  \nconsole.log(num1); // 400  \n// Division assignment  \nnum1 /= num2;  \nconsole.log(num1); // 20  \n// Modulo (Remainder) assignment  \nnum1 %= num2;  \nconsole.log(num1); // 0\n```\n\nBitwise Operators\n=================\n\nBitwise operators are used to perform bitwise operations on values. These operators include `&`, `|`, `^`, `~`, `<<`, and `>>`.\n\n```js\nlet num1 = 10;  \nlet num2 = 20;  \n// Bitwise AND  \nconsole.log(num1 & num2); // 0  \n// Bitwise OR  \nconsole.log(num1 | num2); // 30  \n// Bitwise XOR  \nconsole.log(num1 ^ num2); // 30  \n// Bitwise NOT  \nconsole.log(~num1); // -11  \n// Left shift  \nconsole.log(num1 << 1); // 20  \n// Right shift  \nconsole.log(num1 >> 1); // 5\n```\n\nConditional Operator\n====================\n\nConditional operators are used to assign a value to a variable based on a condition. The syntax for the conditional operator is as follows:\n\n```js\nlet age = 20;  \nlet status = (age >= 18) ? \"adult\" : \"minor\";  \nconsole.log(status); // \"adult\"\n```\n\nNullish Coalescing Operator\n===========================\n\nThe Nullish Coalescing Operator (??) is used to check if a value is null or undefined, and if it is, it returns a default value instead.\n\n```js\nlet num1 = 10;  \nlet num2 = null;  \n// Using the Nullish Coalescing Operator  \nlet result = num1 ?? 20;  \nconsole.log(result); // 10  \nresult = num2 ?? 20;  \nconsole.log(result); // 20\n```\n\nExpressions in JS\n=================\n\nExpressions in JavaScript are combinations of values, variables, and operators that are evaluated to produce a value. There are several types of expressions in JavaScript, including arithmetic expressions, string expressions, Boolean expressions, and object expressions.\n\nArithmetic Expressions\n======================\n\nArithmetic expressions are expressions that use arithmetic operators to perform mathematical calculations on numeric values.\n\n```js\nlet num1 = 10;  \nlet num2 = 20;  \n// Addition  \nlet result1 = num1 + num2;  \nconsole.log(result1); // 30  \n// Subtraction  \nlet result2 = num1 - num2;  \nconsole.log(result2); // -10  \n// Multiplication  \nlet result3 = num1 * num2;  \nconsole.log(result3); // 200  \n// Division  \nlet result4 = num1 / num2;  \nconsole.log(result4); // 0.5  \n// Modulo (Remainder)  \nlet result5 = num1 % num2;  \nconsole.log(result5); // 10\n```\n\nString Expressions\n==================\n\nString expressions are expressions that concatenate two or more strings together using the + operator.\n\n```js\nlet firstName = \"John\";  \nlet lastName = \"Doe\";  \n// Concatenation  \nlet fullName = firstName + \" \" + lastName;  \nconsole.log(fullName); // \"John Doe\"  \n// String Length  \nlet nameLength = fullName.length;  \nconsole.log(nameLength); // 8  \n// Accessing Characters  \nlet firstChar = fullName[0];  \nconsole.log(firstChar); // \"J\"  \n// Substring  \nlet firstNameSubstring = fullName.substring(0, 4);  \nconsole.log(firstNameSubstring); // \"John\"  \n// Replacing Characters  \nlet replacedName = fullName.replace(\"Doe\", \"Smith\");  \nconsole.log(replacedName); // \"John Smith\"\n```\n\nBoolean Expressions\n===================\n\nBoolean expressions are expressions that evaluate to either true or false.\n\n```js\nlet num1 = 10;  \nlet num2 = 20;  \n// Greater Than  \nlet greaterThan = num2 > num1;  \nconsole.log(greaterThan); // true  \n// Less Than  \nlet lessThan = num1 < num2;  \nconsole.log(lessThan); // true  \n// Greater Than or Equal To  \nlet greaterThanOrEqualTo = num1 >= num2;  \nconsole.log(greaterThanOrEqualTo); // false  \n// Less Than or Equal To  \nlet lessThanOrEqualTo = num2 <= num1;  \nconsole.log(lessThanOrEqualTo); // false  \n// Equal To  \nlet equalTo = num1 == num2;  \nconsole.log(equalTo); // false  \n// Not Equal To  \nlet notEqualTo = num1 != num2;  \nconsole.log(notEqualTo); // true\n```\n\nObject expressions are expressions that create a new object using the new operator.\n\n```js\nlet person = {  \n  firstName: \"John\",  \n  lastName: \"Doe\",  \n  age: 30,  \n  hobbies: [\"reading\", \"swimming\", \"hiking\"],  \n  address: {  \n    street: \"123 Main St\",  \n    city: \"Anytown\",  \n    state: \"CA\",  \n    zip: \"12345\"  \n  },  \n  isStudent: false  \n};  \nconsole.log(person.firstName); // \"John\"  \nconsole.log(person.age); // 30  \nconsole.log(person.hobbies[1]); // \"swimming\"  \nconsole.log(person.address.city); // \"Anytown\"  \nconsole.log(person.isStudent); // false  \n// Adding a new property to the object  \nperson.email = \"john.doe@example.com\";  \nconsole.log(person.email); // \"john.doe@example.com\"  \n// Modifying an existing property of the object  \nperson.age = 35;  \nconsole.log(person.age); // 35  \n// Deleting a property of the object  \ndelete person.isStudent;  \nconsole.log(person.isStudent); // undefined\n```\n\nOperators and expressions are essential components of JavaScript programming. By understanding how operators and expressions work in JS, you can create powerful and dynamic web pages that are sure to impress your users."},{"id":"commenting-and-debugging-in-js","metadata":{"permalink":"/blog/commenting-and-debugging-in-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/3-commenting-and-debugging-in-js.md","source":"@site/blog/javascript/3-commenting-and-debugging-in-js.md","title":"Commenting and Debugging in JS","description":"When it comes to programming in JavaScript, commenting and debugging are two important tasks that every developer should be familiar with.","date":"2024-05-15T13:15:30.532Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":5.345,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"commenting-and-debugging-in-js","title":"Commenting and Debugging in JS","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Operators and Expressions in JS","permalink":"/blog/operators-and-expressions-in-js"},"nextItem":{"title":"Datatypes in JS: Type Conversion","permalink":"/blog/datatypes-in-js-type-conversion"}},"content":"When it comes to programming in JavaScript, commenting and debugging are two important tasks that every developer should be familiar with.\n<!-- truncate -->\n\nCommenting in JS\n================\n\nCommenting in JavaScript is the process of adding notes or explanations within the code. These comments are not executed by the browser and are only meant for developers to read.\n\nIn JS, there are two ways to add comments:\n\nSingle-line comments\n--------------------\n\nSingle-line comments start with ‘//’ and continue until the end of the line. For example:\n\n```js\n// This is a single-line comment\n```\n\nMulti-line comments\n-------------------\n\nMulti-line comments start with ‘/_’ and end with ‘_/’. They can span across multiple lines. For example:\n\n```js\n/*  \nThis is a multi-line comment  \nIt can span across multiple lines  \n*/\n```\n\nHere’s an example of a function definition with JSDoc comments:\n\n```js\n/**\n * Adds two numbers together and returns the result  \n * @param {number} num1 - The first number to add  \n * @param {number} num2 - The second number to add  \n * @returns {number} The sum of the two numbers  \n */  \nfunction addNumbers(num1, num2) {  \n  return num1 + num2;  \n}  \n// Example usage  \nlet result = addNumbers(5, 7);  \nconsole.log(result); // 12\n```\n\nAdding comments to your code can make it more readable and easier to understand for other developers who may have to work on the same codebase.\n\nDebugging in JS\n===============\n\nDebugging in JavaScript is the process of finding and fixing errors or bugs in the code. There are different ways to debug JavaScript code, including:\n\nConsole\n-------\n\nThe console object in JavaScript provides a way to output messages to the browser’s console. This is useful for debugging purposes or for displaying information to the user. Here are some of the different functions available on the console object:\n\n1.  console.log(): Outputs a message to the console. This method is used to log messages, variables or other information to the console.\n\n```js\nconsole.log('Hello, world!'); // Hello, world!  \n  \nconst name = 'John';  \nconsole.log(`My name is ${name}.`); // My name is John.\n```\n\n2\\. console.error(): Outputs an error message to the console. This method is used to log error messages to the console.\n\n```js\nconsole.error('Something went wrong.'); // Something went wrong.\n```\n\n3\\. console.warn(): Outputs a warning message to the console. This method is used to log warning messages to the console.\n\n```js\nconsole.warn('This could be a problem.'); // This could be a problem.\n```\n\n4\\. console.info(): Outputs an informational message to the console. This method is used to log informational messages to the console.\n\n```js\nconsole.info('The sky is blue.'); // The sky is blue.\n```\n\n5\\. console.debug(): Outputs a debug message to the console. This method is used to log debug messages to the console.\n\n```js\nconsole.debug('This is a debug message.'); // This is a debug message.\n```\n\n6\\. console.assert(): Writes an error message to the console if the assertion is false. This method is used to check assertions and log error messages if they are false.\n\n```js\nconst num1 = 5;  \nconst num2 = 10;  \n  \nconsole.assert(num1 < num2, 'num1 is not less than num2.'); // No output  \n  \nconsole.assert(num1 > num2, 'num1 is not greater than num2.'); // num1 is not greater than num2.\n```\n\n7\\. console.clear(): Clears the console. This method is used to clear the console.\n\n```js\nconsole.clear(); // Clears the console\n```\n\n8\\. console.count(): Outputs the number of times that the count() method has been called with the given label. This method is used to count how many times a specific label has been counted.\n\n```js\nfunction foo() {  \n  console.count('foo');  \n}  \n  \nfoo(); // foo: 1  \nfoo(); // foo: 2  \nfoo(); // foo: 3\n```\n\n9\\. console.group(): Groups together a set of console messages. This method is used to group console messages together.\n\n```js\nconsole.group('Group');  \nconsole.log('Hello, world!');  \nconsole.warn('This could be a problem.');  \nconsole.groupEnd();\n```\n\n10\\. console.groupCollapsed(): Groups together a set of console messages, but collapses the group initially. This method is used to group console messages together and collapse them initially.\n\n```js\nconsole.groupCollapsed('Group');  \nconsole.log('Hello, world!');  \nconsole.warn('This could be a problem.');  \nconsole.groupEnd();\n```\n\n11\\. console.groupEnd(): Ends the current group of console messages. This method is used to end a group of console messages.\n\n```js\nconsole.group('Group');  \nconsole.log('Hello, world!');  \nconsole.warn('This could be a problem.');  \nconsole.groupEnd();  \nconsole.log('Hello, world!'); // Not part of the group\n```\n\n12\\. console.table(): Outputs an array or object as a table to the console. This method is used to log an array or object in tabular form.\n\n```js\nconst fruits = ['Apple', 'Banana', 'Orange'];  \nconsole.table(fruits);  \n  \nconst person = {  \n  name: 'John',  \n  age: 30,  \n  city: 'New York'  \n};  \nconsole.table(person);\n```\n\n13\\. console.time(): Starts a timer in the console. This method is used to start a timer.\n\n```js\nconsole.time('Timer');  \n// Code to be timed goes here  \nconsole.timeEnd('Timer');\n```\n\n14\\. console.timeEnd(): Ends a timer in the console. This method is used to end a timer.\n\n```js\nconsole.time('Timer');  \n// Code to be timed goes here  \nconsole.timeEnd('Timer');\n```\n\n15\\. console.trace(): Outputs a stack trace to the console. This method is used to log a stack trace to the console.\n\n```js\nfunction foo() {  \n  console.trace();  \n}  \n  \nfunction bar() {  \n  foo();  \n}  \n  \nbar();\n```\n\n16\\. console.dir(): Outputs a directory of an object to the console. This method is used to log a directory of an object to the console.\n\n```js\nconst person = {  \n  name: 'John',  \n  age: 30,  \n  city: 'New York'  \n};  \n  \nconsole.dir(person);\n```\n\n17\\. console.profile(): Starts the profiler in the console. This method is used to start the profiler.\n\n```js\nconsole.profile('Profile');  \n// Code to be profiled goes here  \nconsole.profileEnd('Profile');\n```\n\n18\\. console.profileEnd(): Ends the profiler in the console. This method is used to end the profiler.\n\n```js\nconsole.profile('Profile');  \n// Code to be profiled goes here  \nconsole.profileEnd('Profile');\n```\n\nUsing breakpoints\n-----------------\n\nAnother way to debug JavaScript code is by using breakpoints. Breakpoints are markers that you can set in the code, which will pause the execution of the code at that point. This allows you to inspect the values of variables and objects at that point in time.\n\nUsing the debugger statement\n----------------------------\n\nThe debugger statement is a statement in JavaScript that stops the execution of the code and launches the browser’s debugging tool. For example:\n\n```js\nlet x = 10;  \ndebugger;  \nconsole.log(x);\n```\n\nWhen the code reaches the debugger statement, it will pause execution and launch the browser’s debugging tool.\n\nDebugging in JavaScript is an essential skill for every developer. It helps to identify and fix errors in the code, making it more efficient and reliable."},{"id":"datatypes-in-js-type-conversion","metadata":{"permalink":"/blog/datatypes-in-js-type-conversion","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/2-datatypes-in-js-type-conversion.md","source":"@site/blog/javascript/2-datatypes-in-js-type-conversion.md","title":"Datatypes in JS: Type Conversion","description":"JavaScript is a dynamically typed language, which means that the data type of a variable is determined at runtime.","date":"2024-05-15T13:15:30.508Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":2.895,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"datatypes-in-js-type-conversion","title":"Datatypes in JS: Type Conversion","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Commenting and Debugging in JS","permalink":"/blog/commenting-and-debugging-in-js"},"nextItem":{"title":"Variables in JS: var, let, const","permalink":"/blog/variables-in-js-var-let-const"}},"content":"JavaScript is a dynamically typed language, which means that the data type of a variable is determined at runtime.\n<!-- truncate -->\n\nThe `typeof` keyword is used to determine the data type of a value or variable in JavaScript. For example, `typeof 42` will return `\"number\"`. There are seven primitive data types in JavaScript:\n\n1.  **Number**: represents numeric values, including integers and floating-point numbers.\n\n```js\nlet age = 30;  \n// toFixed()  \nlet num = 3.14159;  \nlet formattedNum = num.toFixed(2);  \nconsole.log(formattedNum); // \"3.14\"  \n// toPrecision()  \nlet num = 123.456;  \nlet formattedNum = num.toPrecision(4);  \nconsole.log(formattedNum); // \"123.5\"\n```\n\n**2\\. String**: represents a sequence of characters, enclosed in single or double quotes.\n\n```js\nlet name = \"John Doe\";  \n// length  \nlet str = \"Hello, world!\";  \nconsole.log(str.length); // 13  \n// toUpperCase(), toLowerCase()  \nlet str = \"Hello, world!\";  \nconsole.log(str.toUpperCase()); // \"HELLO, WORLD!\"  \nconsole.log(str.toLowerCase()); // \"hello, world!\"  \n// trim()  \nlet str = \"  Hello, world!   \";  \nconsole.log(str.trim()); // Output: \"Hello, world!\"\n```\n\n**3\\. Boolean**: represents a logical value, either true or false.\n\n```js\nlet isStudent = true;  \n// ! (logical not)  \nconsole.log(!true); // false  \nconsole.log(!false); // true  \nconsole.log(!0); // true  \nconsole.log(!\"hello\"); // false  \nconsole.log(!null); // true\n```\n\n**4\\. Undefined**: represents a variable that has not been assigned a value yet.\n\n```js\nlet x;  \nconsole.log(x); // undefined\n```\n\n**5\\. Null**: represents a variable that has been explicitly assigned the value of null.\n\n```js\nlet x = null;  \nconsole.log(x); // null\n```\n\n**6\\. Symbol**: represents a unique identifier.\n\n```js\nlet firstName = Symbol(\"first name\");  \nlet person = {  \n  [firstName]: \"John\",  \n  lastName: \"Doe\",  \n  age: 30  \n};  \nconsole.log(person[firstName]); // John\n```\n\n**7\\. BigInt**: A numeric data type that represents integers larger than the maximum safe integer in JavaScript\n\n```js\nlet bigNumber = BigInt(Number.MAX_SAFE_INTEGER) + 1n;  \nconsole.log(bigNumber); // 9007199254740992n\n```\n\n8\\. In addition to these primitive data types, JavaScript has one non-primitive data type, which is the **Object**.\n\n```js\nlet person = {  \n  firstName: \"John\",  \n  lastName: \"Doe\",  \n  age: 30,  \n  address: {  \n    street: \"123 Main St\",  \n    city: \"Anytown\",  \n    state: \"CA\",  \n    zip: \"12345\"  \n  }  \n};  \nconsole.log(person.firstName); // John  \nconsole.log(person.address.city); // Anytown  \nperson.phone = \"555-1234\";  \nconsole.log(person); // { firstName: \"John\", lastName: \"Doe\", age: 30, address: { street: \"123 Main St\", city: \"Anytown\", state: \"CA\", zip: \"12345\" }, phone: \"555-1234\" }\n```\n\nIn JavaScript, arrays are a type of object. Arrays are a specialized kind of object that have a numeric index and a `**length**` property, and provide additional methods for working with ordered collections of data. Arrays can store any type of data as its elements, including objects themselves.\n\nArrays in JavaScript are created using the array literal syntax, which is enclosed in square brackets `**[]**`. Here's an example of an array:\n\n```js\nlet fruits = [\"apple\", \"banana\", \"orange\"];  \nconsole.log(fruits[0]); // apple  \nconsole.log(fruits.length); // 3  \nfruits.push(\"grape\");  \nconsole.log(fruits); // [\"apple\", \"banana\", \"orange\", \"grape\"]\n```\n\nSince JavaScript is a dynamically typed language, variables can hold values of any data type, and their data type can change during runtime.\n\nHowever, it’s worth noting that assigning a string to a variable that was previously holding a number is an example of implicit type conversion, as the variable’s data type has been changed without an explicit conversion using a function or operator. This can sometimes lead to unexpected behavior and bugs, so it’s important to use type conversions carefully and deliberately.\n\n```js\nlet x = 12;  \nx = \"hello\";  \nconsole.log(x) // hello\n```\n\nIt is important to understand the different data types in JavaScript and how type conversion works, as it can affect the behavior of your code."},{"id":"variables-in-js-var-let-const","metadata":{"permalink":"/blog/variables-in-js-var-let-const","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/1-variables-in-js-var-let-const.md","source":"@site/blog/javascript/1-variables-in-js-var-let-const.md","title":"Variables in JS: var, let, const","description":"JavaScript is a high-level programming language that is widely used for web development. One of the fundamental concepts in JavaScript is the use of variables. Variables are used to store data values that can be used throughout the code.","date":"2024-05-15T13:15:30.480Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":6.345,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"variables-in-js-var-let-const","title":"Variables in JS: var, let, const","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Datatypes in JS: Type Conversion","permalink":"/blog/datatypes-in-js-type-conversion"},"nextItem":{"title":"Introduction to JavaScript","permalink":"/blog/introduction-to-js"}},"content":"JavaScript is a high-level programming language that is widely used for web development. One of the fundamental concepts in JavaScript is the use of variables. Variables are used to store data values that can be used throughout the code.\n<!-- truncate -->\n\nThere are three different ways to declare variables in JavaScript: const, let, and var.\n\nvar\n===\n\nTo use `var` in JavaScript, you simply need to declare a variable using the keyword `var`, followed by the variable name and an optional assignment operator to set the initial value. For example:\n\n```js\nvar x = 5;  \nconsole.log(x); // 5  \nvar y;  \ny = 12;  \nconsole.log(y); // 12\n```\n\nIf you don’t initialize a variable declared with `var`, the initial value of variable is `undefined`.\n\n```js\nvar x;  \nconsole.log(x) // undefined\n```\n\nIn JavaScript, variables declared with the `var` keyword can be reinitialized, which means you can initialize a variable multiple times with different values.\n\n```js\nvar x = 5;  \nx = 18;  \nconsole.log(x) // 18\n```\n\nIn JavaScript, variables declared with the `var` keyword can also be redeclared within the same scope. This means you can declare the same variable multiple times with different values.\n\n```js\nvar x = 10;  \nconsole.log(x); // 10  \nvar x;  \nconsole.log(x); // undefined  \nvar x = 20;  \nconsole.log(x); // 20\n```\n\nScoping Rules\n-------------\n\nVariables declared with the `var` keyword have function-level scope. This means that if a variable is declared within a function, it is only accessible within that function.\n\n```js\nfunction myFunction() {  \n  var x = 10;  \n  console.log(x); // 10  \n}  \nmyFunction();  \nconsole.log(x); // ReferenceError: x is not defined\n```\n\nIf a variable is declared outside of a function, it is accessible throughout the entire program.\n\n```js\nvar x = 3;  \nfunction myFunction(){  \n\tx = 6 // global scoped   \n}  \nmyFunction();  \nconsole.log(x) // 6\n```\n\n```js\nvar x = 3;  \nfunction myFunction(){  \n\tvar x = 6 // local scoped to myFunction   \n}  \nmyFunction();  \nconsole.log(x) // 3\n```\n\nIt is important to note that `var` does not have block-level scope. This means that if a variable is declared within a block, such as an `if` statement or loop, it is still accessible outside of that block.\n\n```js\nif (true) {  \n  var x = 10;  \n}  \nconsole.log(x); // 10\n```\n\nHoisting\n--------\n\nOne important feature of `var` is hoisting, which means that variable declarations are moved to the top of their scope before the code is executed. This means that you can use a variable before it has been declared without getting an error.\n\n```js\nconsole.log(x); // undefined  \nvar x = 10;\n```\n\nThis code is equivalent to:\n\n```js\nvar x;  \nconsole.log(x); // undefined  \nx = 10;\n```\n\nFollowing code will also work fine because of the concept of hoisting in `var`\n\n```js\nx = 10;  \nvar x;  \nconsole.log(x); // 10\n```\n\nHowever, it is generally considered best practice to declare all variables at the beginning of their scope to avoid confusion and bugs in your code.\n\nlet\n===\n\n`let` is another way to declare variables in JavaScript.\n\n```js\nlet x = 5;  \nconsole.log(x); // 5  \nlet y;  \ny = 12;  \nconsole.log(y); // 12\n```\n\nYou can also use `let` to declare a variable without assigning a value to it. In this case, the variable will be initialized with the value `undefined`.\n\n```js\nlet x;  \nconsole.log(x); // undefined\n```\n\nUnlike `var`, `let` variables can be reassigned, but they cannot be redeclared within the same block.\n\n```js\nlet x = 12;  \nconsole.log(x); // 12  \nx = 14;  \nconsole.log(); // 14  \nlet x; // SyntaxError: Identifier 'x' has already been declared\n```\n\nScoping Rules\n-------------\n\n`let` variables have block-level scope. This means that if a variable is declared within a block, such as an `if` statement or loop, it is only accessible within that block. If a variable is declared outside of a block, it is accessible throughout the entire program.\n\n```js\nfunction myFunction(){  \n\tlet x = 9;  \n}  \nmyFunction();  \nconsole.log(x); // ReferenceError: x is not defined  \nif(true){  \n\tlet y = 2;  \n}  \nconsole.log(x); // ReferenceError: x is not defined\n```\n\nOn the other hand, if we declare `let x` outside of the function or any block, it is accessible throughout the entire program:\n\n```js\nlet x = 3;  \nfunction myFunction(){  \n\tx = 6 // initialized the outside variable x  \n}  \nmyFunction();  \nconsole.log(x) // 6  \nif(true){  \n\tx = 7;  \n}  \nconsole.log(x) // 7\n```\n\nWe can redeclare the variable in different block.\n\n```js\nlet x = 3;  \nfunction myFunction(){  \n\tlet x = 6 // local scoped to myFunction  \n}  \nmyFunction();  \nconsole.log(x) // 3\n```\n\n```js\nlet x = 3;  \nif (true) {  \n\tlet x = 6 // block scoped to if statement  \n\tconsole.log(x) // 6  \n}  \nconsole.log(x) // 3\n```\n\nHoisting\n--------\n\n`let` variables are not hoisted to the top of their scope. This means that if you try to use a `let` variable before it is declared, you will get a `ReferenceError`.\n\n```js\nconsole.log(x); // ReferenceError: x is not defined  \nlet x = 10;\n```\n\nconst\n=====\n\n`const` is used to declare a variable that cannot be reassigned, similar to a constant in other programming languages. However, it is important to note that the value of a `const` variable is not immutable. If the `const` variable is an object or an array, its properties or elements can still be modified.\n\n```js\nconst myObj = {name: \"John\", age: 30};  \nmyObj.age = 31;  \nconsole.log(myObj); // {name: \"John\", age: 31}\n```\n\nIt is also important to note that `const` variables have block-level scope, similar to `let` variables. This means that if a variable is declared within a block, such as an `if` statement or loop, it is only accessible within that block. If a variable is declared outside of a block, it is accessible throughout the entire program.\n\nLike `let`, `const` variables are not hoisted to the top of their scope. This means that if you try to use a `const` variable before it is declared, you will get a `ReferenceError`.\n\n```js\nconsole.log(x); // ReferenceError: x is not defined  \nconst x = 10;\n```\n\nIt is generally considered best practice to use `const` for variables that will not be reassigned, and `let` for variables that will be reassigned.\n\nVariable Naming Rules\n=====================\n\nIn JavaScript, variable names must follow certain rules to be valid. Here are the common rules for naming variables in JavaScript:\n\n1.  The variable name must start with a letter, underscore (_), or dollar sign ($). It cannot start with a number.\n2.  The variable name can contain letters, digits, underscores, or dollar signs. It is recommended to use only alphanumeric characters and underscores in variable names.\n3.  JavaScript is case sensitive, so `**myVariable**` and `**myvariable**` are two different variables.\n4.  Avoid using reserved words as variable names, such as `**if**`, `**else**`, `**while**`, etc.\n5.  Use descriptive names that reflect the purpose of the variable. This helps to make the code more readable and maintainable.\n6.  Do not use spaces in variable names. Use camelCase or underscores to separate words in the variable name.\n7.  Variable names should be concise and meaningful. A good variable name should accurately describe the data it holds or the purpose it serves.\n\nFollowing these rules and conventions helps to write clean, readable, and maintainable code in JavaScript.\n\nThis blog explains the three ways to declare variables in JavaScript: `const`, `let`, and `var`. It covers the syntax, scoping rules, and hoisting behavior of each type of variable, as well as best practices for using them. It also notes that `const` variables cannot be reassigned or redeclared, but their properties or elements can still be modified if they are objects or arrays."},{"id":"introduction-to-js","metadata":{"permalink":"/blog/introduction-to-js","editUrl":"https://github.com/sonnetjs/sonnetjs.github.io/tree/main/blog/javascript/0-introduction-to-js.md","source":"@site/blog/javascript/0-introduction-to-js.md","title":"Introduction to JavaScript","description":"JavaScript is one of the most popular programming languages in the world, and for good reason. It is a powerful language that can be used to create dynamic and interactive web pages. In this blog post, we will take an overview of complete language","date":"2024-05-15T13:15:30.460Z","tags":[{"label":"javascript","permalink":"/blog/tags/javascript"}],"readingTime":3.455,"hasTruncateMarker":true,"authors":[{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"}],"frontMatter":{"slug":"introduction-to-js","title":"Introduction to JavaScript","authors":{"name":"Talha Mujahid","title":"Software Engineer","url":"https://github.com/htmujahid","image_url":"https://avatars.githubusercontent.com/u/58030954?v=4","imageURL":"https://avatars.githubusercontent.com/u/58030954?v=4"},"tags":["javascript"]},"unlisted":false,"prevItem":{"title":"Variables in JS: var, let, const","permalink":"/blog/variables-in-js-var-let-const"}},"content":"JavaScript is one of the most popular programming languages in the world, and for good reason. It is a powerful language that can be used to create dynamic and interactive web pages. In this blog post, we will take an overview of complete language\n<!-- truncate -->\n\n## History\n\nJavaScript was created by Brendan Eich in just 10 days in May 1995, while he was working at Netscape Communications Corporation. It was originally called Mocha, but was later renamed to LiveScript and finally JavaScript. The language was created to add interactivity to static HTML pages, which was a revolutionary concept at the time.\n\nIn 1996, Microsoft created JScript, which was essentially a clone of JavaScript. This led to a period of intense competition between Netscape and Microsoft, with both companies adding new features to their respective languages. This competition ultimately led to the creation of ECMAScript, which is a standardized version of JavaScript that is maintained by the European Computer Manufacturers Association (ECMA).\n\nOver the years, JavaScript has continued to evolve, with new features and capabilities being added to the language. Today, JavaScript is a full-fledged programming language that can be used for both client-side and server-side programming. It is a critical component of modern web development, and is used by developers all over the world to create dynamic and interactive web applications.\n\n## JS Compilation Steps\n\nThe process of converting JavaScript source code into bytecode involves several steps. Firstly, the JavaScript engine parses the source code and generates an Abstract Syntax Tree (AST) that represents the structure of the code. Next, the engine compiles the AST into bytecode, which is a lower-level representation of the code that can be executed by the engine. The bytecode is then optimized by the engine using various techniques, such as Just-In-Time (JIT) compilation, to improve the performance of the code. Finally, the engine executes the bytecode.\n\n## JavaScript Engine\n\nJavaScript Engine is a program that executes JavaScript code. It is responsible for interpreting and compiling the code, as well as optimizing its performance. The most popular JavaScript engines include V8, which is used in Google Chrome and Node.js, and SpiderMonkey, which is used in Mozilla Firefox.\n\n## ES6 vs Common JS\n\nES6, also known as ECMAScript 6, is a newer version of JavaScript that was released in 2015. It introduced several new features to the language, such as arrow functions, template literals, and classes, that make writing code in JavaScript much easier and more efficient. Common JS, on the other hand, is a module system for JavaScript that was developed for use in server-side environments.\n\nWhile ES6 is a newer and more modern version of JavaScript, Common JS is still widely used in server-side development. Node.js, a popular server-side JavaScript runtime environment, uses Common JS modules by default. However, many developers are shifting towards using ES6 modules for server-side development as well.\n\nRegardless of which version is used, JavaScript remains an incredibly versatile and powerful language. Its ability to be used for both client-side and server-side development, as well as its popularity within the developer community, make it an important language to learn for anyone interested in programming or web development.\n\n## Uses\n\nJavaScript can be used for a wide range of applications, including web development, server-side programming, and even desktop and mobile application development. It is also commonly used in game development, data visualization, and other areas where interactivity is important. With its versatility and popularity, JavaScript is a language that is well worth learning for anyone interested in programming or web development.\n\n## Resources\n\nHere are some stunning resources for learning js.\n\n### Books\n\n*   [https://eloquentjavascript.net/](https://eloquentjavascript.net/)\n*   [https://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742](https://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742)\n*   [https://kbpsystem777.github.io/You-Dont-Know-JS/](https://kbpsystem777.github.io/You-Dont-Know-JS/)\n\n### YouTube\n\n*   [https://www.youtube.com/watch?v=hdI2bqOjy3c](https://www.youtube.com/watch?v=hdI2bqOjy3c)\n*   [https://www.youtube.com/watch?v=jS4aFq5-91M](https://www.youtube.com/watch?v=jS4aFq5-91M)\n*   [https://www.youtube.com/watch?v=PoRJizFvM7s](https://www.youtube.com/watch?v=PoRJizFvM7s)\n\n### Udemy\n\n*   [https://www.udemy.com/course/the-complete-javascript-course/](https://www.udemy.com/course/the-complete-javascript-course/)\n*   [https://www.udemy.com/course/javascript-the-complete-guide-2020-beginner-advanced/](https://www.udemy.com/course/javascript-the-complete-guide-2020-beginner-advanced/)\n*   [https://www.udemy.com/course/javascript-basics-for-beginners/](https://www.udemy.com/course/javascript-basics-for-beginners/)\n\n### Websites\n\n*   [https://tc39.github.io/ecma262/](https://tc39.github.io/ecma262/)\n*   [https://developer.mozilla.org/en-US/docs/Web/JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript)\n*   [https://javascript.info/](https://javascript.info/)\n\n## Conclusion\n\nJavaScript is an incredibly powerful and versatile programming language. Its ability to create interactive web pages and its popularity within the developer community make it a valuable language to learn. Whether you are a beginner or an experienced developer, adding JavaScript to your skill set can help you to create more engaging and dynamic web applications."}]}}